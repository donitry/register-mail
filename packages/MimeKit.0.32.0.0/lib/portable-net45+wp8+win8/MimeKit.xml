<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MimeKit</name>
    </assembly>
    <members>
        <member name="T:MimeKit.Encodings.Base64Decoder">
            <summary>
            Incrementally decodes content encoded with the base64 encoding.
            </summary>
            <remarks>
            Base64 is an encoding often used in MIME to encode binary content such
            as images and other types of multi-media to ensure that the data remains
            intact when sent via 7bit transports such as SMTP.
            </remarks>
        </member>
        <member name="T:MimeKit.Encodings.IMimeDecoder">
            <summary>
            An interface for incrementally decoding content.
            </summary>
            <remarks>
            An interface for incrementally decoding content.
            </remarks>
        </member>
        <member name="M:MimeKit.Encodings.IMimeDecoder.Clone">
            <summary>
            Clone the <see cref="T:MimeKit.Encodings.IMimeDecoder"/> with its current state.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.Encodings.IMimeDecoder"/> with exactly the same state as the current decoder.
            </remarks>
            <returns>A new <see cref="T:MimeKit.Encodings.IMimeDecoder"/> with identical state.</returns>
        </member>
        <member name="M:MimeKit.Encodings.IMimeDecoder.EstimateOutputLength(System.Int32)">
            <summary>
            Estimates the length of the output.
            </summary>
            <remarks>
            Estimates the number of bytes needed to decode the specified number of input bytes.
            </remarks>
            <returns>The estimated output length.</returns>
            <param name="inputLength">The input length.</param>
        </member>
        <member name="M:MimeKit.Encodings.IMimeDecoder.Decode(System.Byte*,System.Int32,System.Byte*)">
            <summary>
            Decodes the specified input into the output buffer.
            </summary>
            <remarks>
            <para>Decodes the specified input into the output buffer.</para>
            <para>The output buffer should be large enough to hold all of the
            decoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.IMimeDecoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">A pointer to the beginning of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">A pointer to the beginning of the output buffer.</param>
        </member>
        <member name="M:MimeKit.Encodings.IMimeDecoder.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Decodes the specified input into the output buffer.
            </summary>
            <remarks>
            <para>Decodes the specified input into the output buffer.</para>
            <para>The output buffer should be large enough to hold all of the
            decoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.IMimeDecoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">The output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="input"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="output"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="output"/> is not large enough to contain the encoded content.</para>
            <para>Use the <see cref="M:MimeKit.Encodings.IMimeDecoder.EstimateOutputLength(System.Int32)"/> method to properly determine the 
            necessary length of the <paramref name="output"/> byte array.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Encodings.IMimeDecoder.Reset">
            <summary>
            Resets the decoder.
            </summary>
            <remarks>
            Resets the state of the decoder.
            </remarks>
        </member>
        <member name="P:MimeKit.Encodings.IMimeDecoder.Encoding">
            <summary>
            Gets the encoding.
            </summary>
            <remarks>
            Gets the encoding that the decoder supports.
            </remarks>
            <value>The encoding.</value>
        </member>
        <member name="M:MimeKit.Encodings.Base64Decoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Encodings.Base64Decoder"/> class.
            </summary>
            <remarks>
            Creates a new base64 decoder.
            </remarks>
        </member>
        <member name="M:MimeKit.Encodings.Base64Decoder.Clone">
            <summary>
            Clone the <see cref="T:MimeKit.Encodings.Base64Decoder"/> with its current state.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.Encodings.Base64Decoder"/> with exactly the same state as the current decoder.
            </remarks>
            <returns>A new <see cref="T:MimeKit.Encodings.Base64Decoder"/> with identical state.</returns>
        </member>
        <member name="M:MimeKit.Encodings.Base64Decoder.EstimateOutputLength(System.Int32)">
            <summary>
            Estimates the length of the output.
            </summary>
            <remarks>
            Estimates the number of bytes needed to decode the specified number of input bytes.
            </remarks>
            <returns>The estimated output length.</returns>
            <param name="inputLength">The input length.</param>
        </member>
        <member name="M:MimeKit.Encodings.Base64Decoder.Decode(System.Byte*,System.Int32,System.Byte*)">
            <summary>
            Decodes the specified input into the output buffer.
            </summary>
            <remarks>
            <para>Decodes the specified input into the output buffer.</para>
            <para>The output buffer should be large enough to hold all of the
            decoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.Base64Decoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">A pointer to the beginning of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">A pointer to the beginning of the output buffer.</param>
        </member>
        <member name="M:MimeKit.Encodings.Base64Decoder.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Decodes the specified input into the output buffer.
            </summary>
            <remarks>
            <para>Decodes the specified input into the output buffer.</para>
            <para>The output buffer should be large enough to hold all of the
            decoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.Base64Decoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">The output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="input"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="output"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="output"/> is not large enough to contain the encoded content.</para>
            <para>Use the <see cref="M:MimeKit.Encodings.Base64Decoder.EstimateOutputLength(System.Int32)"/> method to properly determine the 
            necessary length of the <paramref name="output"/> byte array.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Encodings.Base64Decoder.Reset">
            <summary>
            Resets the decoder.
            </summary>
            <remarks>
            Resets the state of the decoder.
            </remarks>
        </member>
        <member name="P:MimeKit.Encodings.Base64Decoder.Encoding">
            <summary>
            Gets the encoding.
            </summary>
            <remarks>
            Gets the encoding that the decoder supports.
            </remarks>
            <value>The encoding.</value>
        </member>
        <member name="T:MimeKit.Encodings.Base64Encoder">
            <summary>
            Incrementally encodes content using the base64 encoding.
            </summary>
            <remarks>
            Base64 is an encoding often used in MIME to encode binary content such
            as images and other types of multi-media to ensure that the data remains
            intact when sent via 7bit transports such as SMTP.
            </remarks>
        </member>
        <member name="T:MimeKit.Encodings.IMimeEncoder">
            <summary>
            An interface for incrementally encoding content.
            </summary>
            <remarks>
            An interface for incrementally encoding content.
            </remarks>
        </member>
        <member name="M:MimeKit.Encodings.IMimeEncoder.Clone">
            <summary>
            Clone the <see cref="T:MimeKit.Encodings.IMimeEncoder"/> with its current state.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.Encodings.IMimeEncoder"/> with exactly the same state as the current encoder.
            </remarks>
            <returns>A new <see cref="T:MimeKit.Encodings.IMimeEncoder"/> with identical state.</returns>
        </member>
        <member name="M:MimeKit.Encodings.IMimeEncoder.EstimateOutputLength(System.Int32)">
            <summary>
            Estimates the length of the output.
            </summary>
            <remarks>
            Estimates the number of bytes needed to encode the specified number of input bytes.
            </remarks>
            <returns>The estimated output length.</returns>
            <param name="inputLength">The input length.</param>
        </member>
        <member name="M:MimeKit.Encodings.IMimeEncoder.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Encodes the specified input into the output buffer.
            </summary>
            <remarks>
            <para>Encodes the specified input into the output buffer.</para>
            <para>The output buffer should be large enough to hold all of the
            encoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.IMimeEncoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">The output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="input"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="output"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="output"/> is not large enough to contain the encoded content.</para>
            <para>Use the <see cref="M:MimeKit.Encodings.IMimeEncoder.EstimateOutputLength(System.Int32)"/> method to properly determine the 
            necessary length of the <paramref name="output"/> byte array.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Encodings.IMimeEncoder.Flush(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Encodes the specified input into the output buffer, flushing any internal buffer state as well.
            </summary>
            <remarks>
            <para>Encodes the specified input into the output buffer, flusing any internal state as well.</para>
            <para>The output buffer should be large enough to hold all of the
            encoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.IMimeEncoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">The output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="input"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="output"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="output"/> is not large enough to contain the encoded content.</para>
            <para>Use the <see cref="M:MimeKit.Encodings.IMimeEncoder.EstimateOutputLength(System.Int32)"/> method to properly determine the 
            necessary length of the <paramref name="output"/> byte array.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Encodings.IMimeEncoder.Reset">
            <summary>
            Resets the encoder.
            </summary>
            <remarks>
            Resets the state of the encoder.
            </remarks>
        </member>
        <member name="P:MimeKit.Encodings.IMimeEncoder.Encoding">
            <summary>
            Gets the encoding.
            </summary>
            <remarks>
            Gets the encoding that the encoder supports.
            </remarks>
            <value>The encoding.</value>
        </member>
        <member name="M:MimeKit.Encodings.Base64Encoder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Encodings.Base64Encoder"/> class.
            </summary>
            <param name="rfc2047">
            <c>true</c> if this encoder will be used to encode rfc2047 encoded-word payloads; <c>false</c> otherwise.
            </param>
        </member>
        <member name="M:MimeKit.Encodings.Base64Encoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Encodings.Base64Encoder"/> class.
            </summary>
            <remarks>
            Creates a new base64 encoder.
            </remarks>
        </member>
        <member name="M:MimeKit.Encodings.Base64Encoder.Clone">
            <summary>
            Clone the <see cref="T:MimeKit.Encodings.Base64Encoder"/> with its current state.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.Encodings.Base64Encoder"/> with exactly the same state as the current encoder.
            </remarks>
            <returns>A new <see cref="T:MimeKit.Encodings.Base64Encoder"/> with identical state.</returns>
        </member>
        <member name="M:MimeKit.Encodings.Base64Encoder.EstimateOutputLength(System.Int32)">
            <summary>
            Estimates the length of the output.
            </summary>
            <remarks>
            Estimates the number of bytes needed to encode the specified number of input bytes.
            </remarks>
            <returns>The estimated output length.</returns>
            <param name="inputLength">The input length.</param>
        </member>
        <member name="M:MimeKit.Encodings.Base64Encoder.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Encodes the specified input into the output buffer.
            </summary>
            <remarks>
            <para>Encodes the specified input into the output buffer.</para>
            <para>The output buffer should be large enough to hold all of the
            encoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.Base64Encoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">The output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="input"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="output"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="output"/> is not large enough to contain the encoded content.</para>
            <para>Use the <see cref="M:MimeKit.Encodings.Base64Encoder.EstimateOutputLength(System.Int32)"/> method to properly determine the 
            necessary length of the <paramref name="output"/> byte array.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Encodings.Base64Encoder.Flush(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Encodes the specified input into the output buffer, flushing any internal buffer state as well.
            </summary>
            <remarks>
            <para>Encodes the specified input into the output buffer, flusing any internal state as well.</para>
            <para>The output buffer should be large enough to hold all of the
            encoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.Base64Encoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">The output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="input"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="output"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="output"/> is not large enough to contain the encoded content.</para>
            <para>Use the <see cref="M:MimeKit.Encodings.Base64Encoder.EstimateOutputLength(System.Int32)"/> method to properly determine the 
            necessary length of the <paramref name="output"/> byte array.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Encodings.Base64Encoder.Reset">
            <summary>
            Resets the encoder.
            </summary>
            <remarks>
            Resets the state of the encoder.
            </remarks>
        </member>
        <member name="P:MimeKit.Encodings.Base64Encoder.Encoding">
            <summary>
            Gets the encoding.
            </summary>
            <remarks>
            Gets the encoding that the encoder supports.
            </remarks>
            <value>The encoding.</value>
        </member>
        <member name="T:MimeKit.Encodings.HexDecoder">
            <summary>
            Incrementally decodes content encoded with a Uri hex encoding.
            </summary>
            <remarks>
            This is mostly meant for decoding parameter values encoded using
            the rules specified by rfc2184 and rfc2231.
            </remarks>
        </member>
        <member name="M:MimeKit.Encodings.HexDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Encodings.HexDecoder"/> class.
            </summary>
            <remarks>
            Creates a new hex decoder.
            </remarks>
        </member>
        <member name="M:MimeKit.Encodings.HexDecoder.Clone">
            <summary>
            Clone the <see cref="T:MimeKit.Encodings.HexDecoder"/> with its current state.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.Encodings.HexDecoder"/> with exactly the same state as the current decoder.
            </remarks>
            <returns>A new <see cref="T:MimeKit.Encodings.HexDecoder"/> with identical state.</returns>
        </member>
        <member name="M:MimeKit.Encodings.HexDecoder.EstimateOutputLength(System.Int32)">
            <summary>
            Estimates the length of the output.
            </summary>
            <remarks>
            Estimates the number of bytes needed to decode the specified number of input bytes.
            </remarks>
            <returns>The estimated output length.</returns>
            <param name="inputLength">The input length.</param>
        </member>
        <member name="M:MimeKit.Encodings.HexDecoder.Decode(System.Byte*,System.Int32,System.Byte*)">
            <summary>
            Decodes the specified input into the output buffer.
            </summary>
            <remarks>
            <para>Decodes the specified input into the output buffer.</para>
            <para>The output buffer should be large enough to hold all of the
            decoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.HexDecoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">A pointer to the beginning of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">A pointer to the beginning of the output buffer.</param>
        </member>
        <member name="M:MimeKit.Encodings.HexDecoder.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Decodes the specified input into the output buffer.
            </summary>
            <remarks>
            <para>Decodes the specified input into the output buffer.</para>
            <para>The output buffer should be large enough to hold all of the
            decoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.HexDecoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">The output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="input"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="output"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="output"/> is not large enough to contain the encoded content.</para>
            <para>Use the <see cref="M:MimeKit.Encodings.HexDecoder.EstimateOutputLength(System.Int32)"/> method to properly determine the 
            necessary length of the <paramref name="output"/> byte array.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Encodings.HexDecoder.Reset">
            <summary>
            Resets the decoder.
            </summary>
            <remarks>
            Resets the state of the decoder.
            </remarks>
        </member>
        <member name="P:MimeKit.Encodings.HexDecoder.Encoding">
            <summary>
            Gets the encoding.
            </summary>
            <remarks>
            Gets the encoding that the decoder supports.
            </remarks>
            <value>The encoding.</value>
        </member>
        <member name="T:MimeKit.Encodings.HexEncoder">
            <summary>
            Incrementally encodes content using a Uri hex encoding.
            </summary>
            <remarks>
            This is mostly meant for decoding parameter values encoded using
            the rules specified by rfc2184 and rfc2231.
            </remarks>
        </member>
        <member name="M:MimeKit.Encodings.HexEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Encodings.HexEncoder"/> class.
            </summary>
            <remarks>
            Creates a new hex encoder.
            </remarks>
        </member>
        <member name="M:MimeKit.Encodings.HexEncoder.Clone">
            <summary>
            Clone the <see cref="T:MimeKit.Encodings.HexEncoder"/> with its current state.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.Encodings.HexEncoder"/> with exactly the same state as the current encoder.
            </remarks>
            <returns>A new <see cref="T:MimeKit.Encodings.HexEncoder"/> with identical state.</returns>
        </member>
        <member name="M:MimeKit.Encodings.HexEncoder.EstimateOutputLength(System.Int32)">
            <summary>
            Estimates the length of the output.
            </summary>
            <remarks>
            Estimates the number of bytes needed to encode the specified number of input bytes.
            </remarks>
            <returns>The estimated output length.</returns>
            <param name="inputLength">The input length.</param>
        </member>
        <member name="M:MimeKit.Encodings.HexEncoder.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Encodes the specified input into the output buffer.
            </summary>
            <remarks>
            <para>Encodes the specified input into the output buffer.</para>
            <para>The output buffer should be large enough to hold all of the
            encoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.HexEncoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">The output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="input"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="output"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="output"/> is not large enough to contain the encoded content.</para>
            <para>Use the <see cref="M:MimeKit.Encodings.HexEncoder.EstimateOutputLength(System.Int32)"/> method to properly determine the 
            necessary length of the <paramref name="output"/> byte array.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Encodings.HexEncoder.Flush(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Encodes the specified input into the output buffer, flushing any internal buffer state as well.
            </summary>
            <remarks>
            <para>Encodes the specified input into the output buffer, flusing any internal state as well.</para>
            <para>The output buffer should be large enough to hold all of the
            encoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.HexEncoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">The output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="input"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="output"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="output"/> is not large enough to contain the encoded content.</para>
            <para>Use the <see cref="M:MimeKit.Encodings.HexEncoder.EstimateOutputLength(System.Int32)"/> method to properly determine the 
            necessary length of the <paramref name="output"/> byte array.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Encodings.HexEncoder.Reset">
            <summary>
            Resets the encoder.
            </summary>
            <remarks>
            Resets the state of the encoder.
            </remarks>
        </member>
        <member name="P:MimeKit.Encodings.HexEncoder.Encoding">
            <summary>
            Gets the encoding.
            </summary>
            <remarks>
            Gets the encoding that the encoder supports.
            </remarks>
            <value>The encoding.</value>
        </member>
        <member name="T:MimeKit.Encodings.PassThroughDecoder">
            <summary>
            A pass-through decoder implementing the <see cref="T:MimeKit.Encodings.IMimeDecoder"/> interface.
            </summary>
            <remarks>
            Simply copies data as-is from the input buffer into the output buffer.
            </remarks>
        </member>
        <member name="M:MimeKit.Encodings.PassThroughDecoder.#ctor(MimeKit.ContentEncoding)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Encodings.PassThroughDecoder"/> class.
            </summary>
            <param name="encoding">The encoding to return in the <see cref="P:MimeKit.Encodings.PassThroughDecoder.Encoding"/> property.</param>
            <remarks>
            Creates a new pass-through decoder.
            </remarks>
        </member>
        <member name="M:MimeKit.Encodings.PassThroughDecoder.Clone">
            <summary>
            Clone the <see cref="T:MimeKit.Encodings.PassThroughDecoder"/> with its current state.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.Encodings.PassThroughDecoder"/> with exactly the same state as the current decoder.
            </remarks>
            <returns>A new <see cref="T:MimeKit.Encodings.PassThroughDecoder"/> with identical state.</returns>
        </member>
        <member name="M:MimeKit.Encodings.PassThroughDecoder.EstimateOutputLength(System.Int32)">
            <summary>
            Estimates the length of the output.
            </summary>
            <remarks>
            Estimates the number of bytes needed to decode the specified number of input bytes.
            </remarks>
            <returns>The estimated output length.</returns>
            <param name="inputLength">The input length.</param>
        </member>
        <member name="M:MimeKit.Encodings.PassThroughDecoder.Decode(System.Byte*,System.Int32,System.Byte*)">
            <summary>
            Decodes the specified input into the output buffer.
            </summary>
            <remarks>
            Copies the input buffer into the output buffer, verbatim.
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">A pointer to the beginning of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">A pointer to the beginning of the output buffer.</param>
        </member>
        <member name="M:MimeKit.Encodings.PassThroughDecoder.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Decodes the specified input into the output buffer.
            </summary>
            <remarks>
            Copies the input buffer into the output buffer, verbatim.
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">The output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="input"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="output"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="output"/> is not large enough to contain the encoded content.</para>
            <para>Use the <see cref="M:MimeKit.Encodings.PassThroughDecoder.EstimateOutputLength(System.Int32)"/> method to properly determine the 
            necessary length of the <paramref name="output"/> byte array.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Encodings.PassThroughDecoder.Reset">
            <summary>
            Resets the decoder.
            </summary>
            <remarks>
            Resets the state of the decoder.
            </remarks>
        </member>
        <member name="P:MimeKit.Encodings.PassThroughDecoder.Encoding">
            <summary>
            Gets the encoding.
            </summary>
            <remarks>
            Gets the encoding that the decoder supports.
            </remarks>
            <value>The encoding.</value>
        </member>
        <member name="T:MimeKit.Encodings.PassThroughEncoder">
            <summary>
            A pass-through encoder implementing the <see cref="T:MimeKit.Encodings.IMimeDecoder"/> interface.
            </summary>
            <remarks>
            Simply copies data as-is from the input buffer into the output buffer.
            </remarks>
        </member>
        <member name="M:MimeKit.Encodings.PassThroughEncoder.#ctor(MimeKit.ContentEncoding)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Encodings.PassThroughEncoder"/> class.
            </summary>
            <param name="encoding">The encoding to return in the <see cref="P:MimeKit.Encodings.PassThroughEncoder.Encoding"/> property.</param>
            <remarks>
            Creates a new pass-through encoder.
            </remarks>
        </member>
        <member name="M:MimeKit.Encodings.PassThroughEncoder.Clone">
            <summary>
            Clone the <see cref="T:MimeKit.Encodings.PassThroughEncoder"/> with its current state.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.Encodings.PassThroughEncoder"/> with exactly the same state as the current encoder.
            </remarks>
            <returns>A new <see cref="T:MimeKit.Encodings.PassThroughEncoder"/> with identical state.</returns>
        </member>
        <member name="M:MimeKit.Encodings.PassThroughEncoder.EstimateOutputLength(System.Int32)">
            <summary>
            Estimates the length of the output.
            </summary>
            <remarks>
            Estimates the number of bytes needed to encode the specified number of input bytes.
            </remarks>
            <returns>The estimated output length.</returns>
            <param name="inputLength">The input length.</param>
        </member>
        <member name="M:MimeKit.Encodings.PassThroughEncoder.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Encodes the specified input into the output buffer.
            </summary>
            <remarks>
            Copies the input buffer into the output buffer, verbatim.
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">The output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="input"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="output"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="output"/> is not large enough to contain the encoded content.</para>
            <para>Use the <see cref="M:MimeKit.Encodings.PassThroughEncoder.EstimateOutputLength(System.Int32)"/> method to properly determine the 
            necessary length of the <paramref name="output"/> byte array.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Encodings.PassThroughEncoder.Flush(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Encodes the specified input into the output buffer, flushing any internal buffer state as well.
            </summary>
            <remarks>
            Copies the input buffer into the output buffer, verbatim.
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">The output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="input"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="output"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="output"/> is not large enough to contain the encoded content.</para>
            <para>Use the <see cref="M:MimeKit.Encodings.PassThroughEncoder.EstimateOutputLength(System.Int32)"/> method to properly determine the 
            necessary length of the <paramref name="output"/> byte array.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Encodings.PassThroughEncoder.Reset">
            <summary>
            Resets the encoder.
            </summary>
            <remarks>
            Resets the state of the encoder.
            </remarks>
        </member>
        <member name="P:MimeKit.Encodings.PassThroughEncoder.Encoding">
            <summary>
            Gets the encoding.
            </summary>
            <remarks>
            Gets the encoding that the encoder supports.
            </remarks>
            <value>The encoding.</value>
        </member>
        <member name="T:MimeKit.Encodings.QEncodeMode">
            <summary>
            Q-Encoding mode.
            </summary>
            <remarks>
            The encoding mode for the 'Q' encoding used in rfc2047.
            </remarks>
        </member>
        <member name="F:MimeKit.Encodings.QEncodeMode.Phrase">
            <summary>
            A mode for encoding phrases, as defined by rfc822.
            </summary>
        </member>
        <member name="F:MimeKit.Encodings.QEncodeMode.Text">
            <summary>
            A mode for encoding text.
            </summary>
        </member>
        <member name="T:MimeKit.Encodings.QEncoder">
            <summary>
            Incrementally encodes content using a variation of the quoted-printable encoding
            that is specifically meant to be used for rfc2047 encoded-word tokens.
            </summary>
            <remarks>
            The Q-Encoding is an encoding often used in MIME to encode textual content outside
            of the ASCII range within an rfc2047 encoded-word token in order to ensure that
            the text remains intact when sent via 7bit transports such as SMTP.
            </remarks>
        </member>
        <member name="M:MimeKit.Encodings.QEncoder.#ctor(MimeKit.Encodings.QEncodeMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Encodings.QEncoder"/> class.
            </summary>
            <remarks>
            Creates a new rfc2047 quoted-printable encoder.
            </remarks>
            <param name="mode">The rfc2047 encoding mode.</param>
        </member>
        <member name="M:MimeKit.Encodings.QEncoder.Clone">
            <summary>
            Clone the <see cref="T:MimeKit.Encodings.QEncoder"/> with its current state.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.Encodings.QEncoder"/> with exactly the same state as the current encoder.
            </remarks>
            <returns>A new <see cref="T:MimeKit.Encodings.QEncoder"/> with identical state.</returns>
        </member>
        <member name="M:MimeKit.Encodings.QEncoder.EstimateOutputLength(System.Int32)">
            <summary>
            Estimates the length of the output.
            </summary>
            <remarks>
            Estimates the number of bytes needed to encode the specified number of input bytes.
            </remarks>
            <returns>The estimated output length.</returns>
            <param name="inputLength">The input length.</param>
        </member>
        <member name="M:MimeKit.Encodings.QEncoder.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Encodes the specified input into the output buffer.
            </summary>
            <remarks>
            <para>Encodes the specified input into the output buffer.</para>
            <para>The output buffer should be large enough to hold all of the
            encoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.QEncoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">The output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="input"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="output"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="output"/> is not large enough to contain the encoded content.</para>
            <para>Use the <see cref="M:MimeKit.Encodings.QEncoder.EstimateOutputLength(System.Int32)"/> method to properly determine the 
            necessary length of the <paramref name="output"/> byte array.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Encodings.QEncoder.Flush(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Encodes the specified input into the output buffer, flushing any internal buffer state as well.
            </summary>
            <remarks>
            <para>Encodes the specified input into the output buffer, flusing any internal state as well.</para>
            <para>The output buffer should be large enough to hold all of the
            encoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.QEncoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">The output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="input"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="output"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="output"/> is not large enough to contain the encoded content.</para>
            <para>Use the <see cref="M:MimeKit.Encodings.QEncoder.EstimateOutputLength(System.Int32)"/> method to properly determine the 
            necessary length of the <paramref name="output"/> byte array.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Encodings.QEncoder.Reset">
            <summary>
            Resets the encoder.
            </summary>
            <remarks>
            Resets the state of the encoder.
            </remarks>
        </member>
        <member name="P:MimeKit.Encodings.QEncoder.Encoding">
            <summary>
            Gets the encoding.
            </summary>
            <remarks>
            Gets the encoding that the encoder supports.
            </remarks>
            <value>The encoding.</value>
        </member>
        <member name="T:MimeKit.Encodings.QuotedPrintableDecoder">
            <summary>
            Incrementally decodes content encoded with the quoted-printable encoding.
            </summary>
            <remarks>
            Quoted-Printable is an encoding often used in MIME to textual content outside
            of the ASCII range in order to ensure that the text remains intact when sent
            via 7bit transports such as SMTP.
            </remarks>
        </member>
        <member name="M:MimeKit.Encodings.QuotedPrintableDecoder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Encodings.QuotedPrintableDecoder"/> class.
            </summary>
            <remarks>
            Creates a new quoted-printable decoder.
            </remarks>
            <param name="rfc2047">
            <c>true</c> if this decoder will be used to decode rfc2047 encoded-word payloads; <c>false</c> otherwise.
            </param>
        </member>
        <member name="M:MimeKit.Encodings.QuotedPrintableDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Encodings.QuotedPrintableDecoder"/> class.
            </summary>
            <remarks>
            Creates a new quoted-printable decoder.
            </remarks>
        </member>
        <member name="M:MimeKit.Encodings.QuotedPrintableDecoder.Clone">
            <summary>
            Clone the <see cref="T:MimeKit.Encodings.QuotedPrintableDecoder"/> with its current state.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.Encodings.QuotedPrintableDecoder"/> with exactly the same state as the current decoder.
            </remarks>
            <returns>A new <see cref="T:MimeKit.Encodings.QuotedPrintableDecoder"/> with identical state.</returns>
        </member>
        <member name="M:MimeKit.Encodings.QuotedPrintableDecoder.EstimateOutputLength(System.Int32)">
            <summary>
            Estimates the length of the output.
            </summary>
            <remarks>
            Estimates the number of bytes needed to decode the specified number of input bytes.
            </remarks>
            <returns>The estimated output length.</returns>
            <param name="inputLength">The input length.</param>
        </member>
        <member name="M:MimeKit.Encodings.QuotedPrintableDecoder.Decode(System.Byte*,System.Int32,System.Byte*)">
            <summary>
            Decodes the specified input into the output buffer.
            </summary>
            <remarks>
            <para>Decodes the specified input into the output buffer.</para>
            <para>The output buffer should be large enough to hold all of the
            decoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.QuotedPrintableDecoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">A pointer to the beginning of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">A pointer to the beginning of the output buffer.</param>
        </member>
        <member name="M:MimeKit.Encodings.QuotedPrintableDecoder.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Decodes the specified input into the output buffer.
            </summary>
            <remarks>
            <para>Decodes the specified input into the output buffer.</para>
            <para>The output buffer should be large enough to hold all of the
            decoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.QuotedPrintableDecoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">The output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="input"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="output"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="output"/> is not large enough to contain the encoded content.</para>
            <para>Use the <see cref="M:MimeKit.Encodings.QuotedPrintableDecoder.EstimateOutputLength(System.Int32)"/> method to properly determine the 
            necessary length of the <paramref name="output"/> byte array.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Encodings.QuotedPrintableDecoder.Reset">
            <summary>
            Resets the decoder.
            </summary>
            <remarks>
            Resets the state of the decoder.
            </remarks>
        </member>
        <member name="P:MimeKit.Encodings.QuotedPrintableDecoder.Encoding">
            <summary>
            Gets the encoding.
            </summary>
            <remarks>
            Gets the encoding that the decoder supports.
            </remarks>
            <value>The encoding.</value>
        </member>
        <member name="T:MimeKit.Encodings.QuotedPrintableEncoder">
            <summary>
            Incrementally encodes content using the quoted-printable encoding.
            </summary>
            <remarks>
            Quoted-Printable is an encoding often used in MIME to encode textual content
            outside of the ASCII range in order to ensure that the text remains intact
            when sent via 7bit transports such as SMTP.
            </remarks>
        </member>
        <member name="M:MimeKit.Encodings.QuotedPrintableEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Encodings.QuotedPrintableEncoder"/> class.
            </summary>
            <remarks>
            Creates a new quoted-printable encoder.
            </remarks>
        </member>
        <member name="M:MimeKit.Encodings.QuotedPrintableEncoder.Clone">
            <summary>
            Clone the <see cref="T:MimeKit.Encodings.QuotedPrintableEncoder"/> with its current state.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.Encodings.QuotedPrintableEncoder"/> with exactly the same state as the current encoder.
            </remarks>
            <returns>A new <see cref="T:MimeKit.Encodings.QuotedPrintableEncoder"/> with identical state.</returns>
        </member>
        <member name="M:MimeKit.Encodings.QuotedPrintableEncoder.EstimateOutputLength(System.Int32)">
            <summary>
            Estimates the length of the output.
            </summary>
            <remarks>
            Estimates the number of bytes needed to encode the specified number of input bytes.
            </remarks>
            <returns>The estimated output length.</returns>
            <param name="inputLength">The input length.</param>
        </member>
        <member name="M:MimeKit.Encodings.QuotedPrintableEncoder.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Encodes the specified input into the output buffer.
            </summary>
            <remarks>
            <para>Encodes the specified input into the output buffer.</para>
            <para>The output buffer should be large enough to hold all of the
            encoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.QuotedPrintableEncoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">The output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="input"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="output"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="output"/> is not large enough to contain the encoded content.</para>
            <para>Use the <see cref="M:MimeKit.Encodings.QuotedPrintableEncoder.EstimateOutputLength(System.Int32)"/> method to properly determine the 
            necessary length of the <paramref name="output"/> byte array.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Encodings.QuotedPrintableEncoder.Flush(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Encodes the specified input into the output buffer, flushing any internal buffer state as well.
            </summary>
            <remarks>
            <para>Encodes the specified input into the output buffer, flusing any internal state as well.</para>
            <para>The output buffer should be large enough to hold all of the
            encoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.QuotedPrintableEncoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">The output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="input"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="output"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="output"/> is not large enough to contain the encoded content.</para>
            <para>Use the <see cref="M:MimeKit.Encodings.QuotedPrintableEncoder.EstimateOutputLength(System.Int32)"/> method to properly determine the 
            necessary length of the <paramref name="output"/> byte array.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Encodings.QuotedPrintableEncoder.Reset">
            <summary>
            Resets the encoder.
            </summary>
            <remarks>
            Resets the state of the encoder.
            </remarks>
        </member>
        <member name="P:MimeKit.Encodings.QuotedPrintableEncoder.Encoding">
            <summary>
            Gets the encoding.
            </summary>
            <remarks>
            Gets the encoding that the encoder supports.
            </remarks>
            <value>The encoding.</value>
        </member>
        <member name="T:MimeKit.Encodings.UUDecoder">
            <summary>
            Incrementally decodes content encoded with the Unix-to-Unix encoding.
            </summary>
            <remarks>
            <para>The UUEncoding is an encoding that predates MIME and was used to encode
            binary content such as images and other types of multi-media to ensure
            that the data remained intact when sent via 7bit transports such as SMTP.</para>
            <para>These days, the UUEncoding has largely been deprecated in favour of
            the base64 encoding, however, some older mail clients still use it.</para>
            </remarks>
        </member>
        <member name="M:MimeKit.Encodings.UUDecoder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Encodings.UUDecoder"/> class.
            </summary>
            <remarks>
            Creates a new Unix-to-Unix decoder.
            </remarks>
            <param name="payloadOnly">
            If <c>true</c>, decoding begins immediately rather than after finding a begin-line.
            </param>
        </member>
        <member name="M:MimeKit.Encodings.UUDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Encodings.UUDecoder"/> class.
            </summary>
            <remarks>
            Creates a new Unix-to-Unix decoder.
            </remarks>
        </member>
        <member name="M:MimeKit.Encodings.UUDecoder.Clone">
            <summary>
            Clone the <see cref="T:MimeKit.Encodings.UUDecoder"/> with its current state.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.Encodings.UUDecoder"/> with exactly the same state as the current decoder.
            </remarks>
            <returns>A new <see cref="T:MimeKit.Encodings.UUDecoder"/> with identical state.</returns>
        </member>
        <member name="M:MimeKit.Encodings.UUDecoder.EstimateOutputLength(System.Int32)">
            <summary>
            Estimates the length of the output.
            </summary>
            <remarks>
            Estimates the number of bytes needed to decode the specified number of input bytes.
            </remarks>
            <returns>The estimated output length.</returns>
            <param name="inputLength">The input length.</param>
        </member>
        <member name="M:MimeKit.Encodings.UUDecoder.Decode(System.Byte*,System.Int32,System.Byte*)">
            <summary>
            Decodes the specified input into the output buffer.
            </summary>
            <remarks>
            <para>Decodes the specified input into the output buffer.</para>
            <para>The output buffer should be large enough to hold all of the
            decoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.UUDecoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">A pointer to the beginning of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">A pointer to the beginning of the output buffer.</param>
        </member>
        <member name="M:MimeKit.Encodings.UUDecoder.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Decodes the specified input into the output buffer.
            </summary>
            <remarks>
            <para>Decodes the specified input into the output buffer.</para>
            <para>The output buffer should be large enough to hold all of the
            decoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.UUDecoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">The output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="input"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="output"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="output"/> is not large enough to contain the encoded content.</para>
            <para>Use the <see cref="M:MimeKit.Encodings.UUDecoder.EstimateOutputLength(System.Int32)"/> method to properly determine the 
            necessary length of the <paramref name="output"/> byte array.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Encodings.UUDecoder.Reset">
            <summary>
            Resets the decoder.
            </summary>
            <remarks>
            Resets the state of the decoder.
            </remarks>
        </member>
        <member name="P:MimeKit.Encodings.UUDecoder.Encoding">
            <summary>
            Gets the encoding.
            </summary>
            <remarks>
            Gets the encoding that the decoder supports.
            </remarks>
            <value>The encoding.</value>
        </member>
        <member name="T:MimeKit.Encodings.UUEncoder">
            <summary>
            Incrementally encodes content using the Unix-to-Unix encoding.
            </summary>
            <remarks>
            <para>The UUEncoding is an encoding that predates MIME and was used to encode
            binary content such as images and other types of multi-media to ensure
            that the data remained intact when sent via 7bit transports such as SMTP.</para>
            <para>These days, the UUEncoding has largely been deprecated in favour of
            the base64 encoding, however, some older mail clients still use it.</para>
            </remarks>
        </member>
        <member name="M:MimeKit.Encodings.UUEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Encodings.UUEncoder"/> class.
            </summary>
            <remarks>
            Creates a new Unix-to-Unix encoder.
            </remarks>
        </member>
        <member name="M:MimeKit.Encodings.UUEncoder.Clone">
            <summary>
            Clone the <see cref="T:MimeKit.Encodings.UUEncoder"/> with its current state.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.Encodings.UUEncoder"/> with exactly the same state as the current encoder.
            </remarks>
            <returns>A new <see cref="T:MimeKit.Encodings.UUEncoder"/> with identical state.</returns>
        </member>
        <member name="M:MimeKit.Encodings.UUEncoder.EstimateOutputLength(System.Int32)">
            <summary>
            Estimates the length of the output.
            </summary>
            <remarks>
            Estimates the number of bytes needed to encode the specified number of input bytes.
            </remarks>
            <returns>The estimated output length.</returns>
            <param name="inputLength">The input length.</param>
        </member>
        <member name="M:MimeKit.Encodings.UUEncoder.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Encodes the specified input into the output buffer.
            </summary>
            <remarks>
            <para>Encodes the specified input into the output buffer.</para>
            <para>The output buffer should be large enough to hold all of the
            encoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.UUEncoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">The output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="input"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="output"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="output"/> is not large enough to contain the encoded content.</para>
            <para>Use the <see cref="M:MimeKit.Encodings.UUEncoder.EstimateOutputLength(System.Int32)"/> method to properly determine the 
            necessary length of the <paramref name="output"/> byte array.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Encodings.UUEncoder.Flush(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Encodes the specified input into the output buffer, flushing any internal buffer state as well.
            </summary>
            <remarks>
            <para>Encodes the specified input into the output buffer, flusing any internal state as well.</para>
            <para>The output buffer should be large enough to hold all of the
            encoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.UUEncoder.EstimateOutputLength(System.Int32)"/>.</para>
            </remarks>
            <returns>The number of bytes written to the output buffer.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer.</param>
            <param name="output">The output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="input"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="output"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="output"/> is not large enough to contain the encoded content.</para>
            <para>Use the <see cref="M:MimeKit.Encodings.UUEncoder.EstimateOutputLength(System.Int32)"/> method to properly determine the 
            necessary length of the <paramref name="output"/> byte array.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Encodings.UUEncoder.Reset">
            <summary>
            Resets the encoder.
            </summary>
            <remarks>
            Resets the state of the encoder.
            </remarks>
        </member>
        <member name="P:MimeKit.Encodings.UUEncoder.Encoding">
            <summary>
            Gets the encoding.
            </summary>
            <remarks>
            Gets the encoding that the encoder supports.
            </remarks>
            <value>The encoding.</value>
        </member>
        <member name="T:MimeKit.IO.BoundStream">
            <summary>
            A bounded stream, confined to reading and writing data to a limited subset of the overall source stream.
            </summary>
            <remarks>
            <para>Wraps an arbitrary stream, limiting I/O operations to a subset of the source stream.
            If the <see cref="P:MimeKit.IO.BoundStream.EndBoundary"/> is <c>-1</c>, then the end of the stream is unbound.</para>
            <para>When a <see cref="T:MimeKit.MimeParser"/> is set to parse a persistent stream, it will construct
            <see cref="T:MimeKit.ContentObject"/>s using bounded streams instead of loading the content into memory.</para>
            </remarks>
        </member>
        <member name="M:MimeKit.IO.BoundStream.#ctor(System.IO.Stream,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.IO.BoundStream"/> class.
            </summary>
            <remarks>
            If the <paramref name="endBoundary"/> is less than <c>0</c>, then the end of the stream
            is unbounded.
            </remarks>
            <param name="baseStream">The underlying stream.</param>
            <param name="startBoundary">The offset in the base stream that will mark the start of this substream.</param>
            <param name="endBoundary">The offset in the base stream that will mark the end of this substream.</param>
            <param name="leaveOpen"><c>true</c> to leave the baseStream open after the
            <see cref="T:MimeKit.IO.BoundStream"/> is disposed; otherwise, <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="baseStream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="startBoundary"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="endBoundary"/> is greater than or equal to zero
            -and- is less than <paramref name="startBoundary"/>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.IO.BoundStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the stream and advances the position
            within the stream by the number of bytes read.
            </summary>
            <remarks>
            Reads data from the <see cref="P:MimeKit.IO.BoundStream.BaseStream"/>, not allowing it to
            read beyond the <see cref="P:MimeKit.IO.BoundStream.EndBoundary"/>.
            </remarks>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many
            bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <param name="buffer">The buffer to read data into.</param>
            <param name="offset">The offset into the buffer to start reading data.</param>
            <param name="count">The number of bytes to read.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support reading.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.IO.BoundStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the stream and advances the current
            position within this stream by the number of bytes written.
            </summary>
            <remarks>
            Writes data to the <see cref="P:MimeKit.IO.BoundStream.BaseStream"/>, not allowing it to
            write beyond the <see cref="P:MimeKit.IO.BoundStream.EndBoundary"/>.
            </remarks>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.IO.BoundStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <remarks>
            Seeks within the confines of the <see cref="P:MimeKit.IO.BoundStream.StartBoundary"/> and the <see cref="P:MimeKit.IO.BoundStream.EndBoundary"/>.
            </remarks>
            <returns>The new position within the stream.</returns>
            <param name="offset">The offset into the stream relative to the <paramref name="origin"/>.</param>
            <param name="origin">The origin to seek from.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="origin"/> is not a valid <see cref="T:System.IO.SeekOrigin"/>. 
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.IO.BoundStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written
            to the underlying device.
            </summary>
            <remarks>
            Flushes the <see cref="P:MimeKit.IO.BoundStream.BaseStream"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.IO.BoundStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <remarks>
            Updates the <see cref="P:MimeKit.IO.BoundStream.EndBoundary"/> to be <see cref="P:MimeKit.IO.BoundStream.StartBoundary"/> plus
            the specified new length. If the <see cref="P:MimeKit.IO.BoundStream.BaseStream"/> needs to be grown
            to allow this, then the length of the <see cref="P:MimeKit.IO.BoundStream.BaseStream"/> will also be
            updated.
            </remarks>
            <param name="value">The desired length of the stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support setting the length.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.IO.BoundStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:MimeKit.IO.BoundStream"/> and
            optionally releases the managed resources.
            </summary>
            <remarks>
            If the <see cref="P:MimeKit.IO.BoundStream.LeaveOpen"/> property is <c>false</c>, then
            the <see cref="P:MimeKit.IO.BoundStream.BaseStream"/> is also disposed.
            </remarks>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only the unmanaged resources.</param>
        </member>
        <member name="P:MimeKit.IO.BoundStream.BaseStream">
            <summary>
            Gets the underlying stream.
            </summary>
            <remarks>
            All I/O is performed on the base stream.
            </remarks>
            <value>The underlying stream.</value>
        </member>
        <member name="P:MimeKit.IO.BoundStream.StartBoundary">
            <summary>
            Gets the start boundary offset of the underlying stream.
            </summary>
            <remarks>
            The start boundary is the byte offset into the <see cref="P:MimeKit.IO.BoundStream.BaseStream"/>
            that marks the beginning of the substream.
            </remarks>
            <value>The start boundary offset of the underlying stream.</value>
        </member>
        <member name="P:MimeKit.IO.BoundStream.EndBoundary">
            <summary>
            Gets the end boundary offset of the underlying stream.
            </summary>
            <remarks>
            The end boundary is the byte offset into the <see cref="P:MimeKit.IO.BoundStream.BaseStream"/>
            that marks the end of the substream. If the value is less than 0,
            then the end of the stream is treated as unbound.
            </remarks>
            <value>The end boundary offset of the underlying stream.</value>
        </member>
        <member name="P:MimeKit.IO.BoundStream.LeaveOpen">
            <summary>
            Checks whether or not the underlying stream will remain open after
            the <see cref="T:MimeKit.IO.BoundStream"/> is disposed.
            </summary>
            <value><c>true</c> if the underlying stream should remain open after the
            <see cref="T:MimeKit.IO.BoundStream"/> is disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.IO.BoundStream.CanRead">
            <summary>
            Checks whether or not the stream supports reading.
            </summary>
            <remarks>
            The <see cref="T:MimeKit.IO.BoundStream"/> will only support reading if the
            <see cref="P:MimeKit.IO.BoundStream.BaseStream"/> supports it.
            </remarks>
            <value><c>true</c> if the stream supports reading; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.IO.BoundStream.CanWrite">
            <summary>
            Checks whether or not the stream supports writing.
            </summary>
            <remarks>
            The <see cref="T:MimeKit.IO.BoundStream"/> will only support writing if the
            <see cref="P:MimeKit.IO.BoundStream.BaseStream"/> supports it.
            </remarks>
            <value><c>true</c> if the stream supports writing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.IO.BoundStream.CanSeek">
            <summary>
            Checks whether or not the stream supports seeking.
            </summary>
            <remarks>
            The <see cref="T:MimeKit.IO.BoundStream"/> will only support seeking if the
            <see cref="P:MimeKit.IO.BoundStream.BaseStream"/> supports it.
            </remarks>
            <value><c>true</c> if the stream supports seeking; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.IO.BoundStream.CanTimeout">
            <summary>
            Checks whether or not I/O operations can timeout.
            </summary>
            <remarks>
            The <see cref="T:MimeKit.IO.BoundStream"/> will only support timing out if the
            <see cref="P:MimeKit.IO.BoundStream.BaseStream"/> supports it.
            </remarks>
            <value><c>true</c> if I/O operations can timeout; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.IO.BoundStream.Length">
            <summary>
            Gets the length of the stream, in bytes.
            </summary>
            <remarks>
            If the <see cref="P:MimeKit.IO.BoundStream.EndBoundary"/> property is greater than or equal to <c>0</c>,
            then the length will be calculated by subtracting the <see cref="P:MimeKit.IO.BoundStream.StartBoundary"/>
            from the <see cref="P:MimeKit.IO.BoundStream.EndBoundary"/>. If the end of the stream is unbound, then the
            <see cref="P:MimeKit.IO.BoundStream.StartBoundary"/> will be subtracted from the length of the
            <see cref="P:MimeKit.IO.BoundStream.BaseStream"/>.
            </remarks>
            <value>The length of the stream in bytes.</value>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        </member>
        <member name="P:MimeKit.IO.BoundStream.Position">
            <summary>
            Gets or sets the current position within the stream.
            </summary>
            <remarks>
            The <see cref="P:MimeKit.IO.BoundStream.Position"/> is relative to the <see cref="P:MimeKit.IO.BoundStream.StartBoundary"/>.
            </remarks>
            <value>The position of the stream.</value>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        </member>
        <member name="P:MimeKit.IO.BoundStream.ReadTimeout">
            <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.
            </summary>
            <remarks>
            Gets or sets the <see cref="P:MimeKit.IO.BoundStream.BaseStream"/>'s read timeout.
            </remarks>
            <value>A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</value>
        </member>
        <member name="P:MimeKit.IO.BoundStream.WriteTimeout">
            <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.
            </summary>
            <remarks>
            Gets or sets the <see cref="P:MimeKit.IO.BoundStream.BaseStream"/>'s write timeout.
            </remarks>
            <value>A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</value>
        </member>
        <member name="T:MimeKit.IO.ChainedStream">
            <summary>
            A chained stream.
            </summary>
            <remarks>
            Chains multiple streams together such that reading or writing beyond the end
            of one stream spills over into the next stream in the chain. The idea is to
            make it appear is if the chain of streams is all one continuous stream.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.ChainedStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.IO.ChainedStream"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.IO.ChainedStream"/>.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.ChainedStream.Add(System.IO.Stream)">
            <summary>
            Add the specified stream to the chained stream.
            </summary>
            <remarks>
            Adds the stream to the end of the chain.
            </remarks>
            <param name="stream">The stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.IO.ChainedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the stream and advances the position
            within the stream by the number of bytes read.
            </summary>
            <remarks>
            Reads up to the requested number of bytes if reading is supported. If the
            current child stream does not have enough remaining data to complete the
            read, the read will progress into the next stream in the chain in order
            to complete the read.
            </remarks>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many
            bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <param name="buffer">The buffer to read data into.</param>
            <param name="offset">The offset into the buffer to start reading data.</param>
            <param name="count">The number of bytes to read.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support reading.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.IO.ChainedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the stream and advances the current
            position within this stream by the number of bytes written.
            </summary>
            <remarks>
            Writes the requested number of bytes if writing is supported. If the
            current child stream does not have enough remaining space to fit the
            complete buffer, the data will spill over into the next stream in the
            chain in order to complete the write.
            </remarks>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.IO.ChainedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <remarks>
            Seeks to the specified position within the stream if all child streams
            support seeking.
            </remarks>
            <returns>The new position within the stream.</returns>
            <param name="offset">The offset into the stream relative to the <paramref name="origin"/>.</param>
            <param name="origin">The origin to seek from.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="origin"/> is not a valid <see cref="T:System.IO.SeekOrigin"/>. 
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.IO.ChainedStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written
            to the underlying device.
            </summary>
            <remarks>
            If all of the child streams support writing, then the current child stream
            will be flushed.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.IO.ChainedStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <remarks>
            Setting the length of a <see cref="T:MimeKit.IO.ChainedStream"/> is not supported.
            </remarks>
            <param name="value">The desired length of the stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support setting the length.
            </exception>
        </member>
        <member name="M:MimeKit.IO.ChainedStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:MimeKit.IO.ChainedStream"/> and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only the unmanaged resources.</param>
        </member>
        <member name="P:MimeKit.IO.ChainedStream.CanRead">
            <summary>
            Checks whether or not the stream supports reading.
            </summary>
            <remarks>
            The <see cref="T:MimeKit.IO.ChainedStream"/> only supports reading if all of its
            streams support it.
            </remarks>
            <value><c>true</c> if the stream supports reading; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.IO.ChainedStream.CanWrite">
            <summary>
            Checks whether or not the stream supports writing.
            </summary>
            <remarks>
            The <see cref="T:MimeKit.IO.ChainedStream"/> only supports writing if all of its
            streams support it.
            </remarks>
            <value><c>true</c> if the stream supports writing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.IO.ChainedStream.CanSeek">
            <summary>
            Checks whether or not the stream supports seeking.
            </summary>
            <remarks>
            The <see cref="T:MimeKit.IO.ChainedStream"/> only supports seeking if all of its
            streams support it.
            </remarks>
            <value><c>true</c> if the stream supports seeking; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.IO.ChainedStream.CanTimeout">
            <summary>
            Checks whether or not I/O operations can timeout.
            </summary>
            <remarks>
            The <see cref="T:MimeKit.IO.ChainedStream"/> only supports timeouts if all of its
            streams support them.
            </remarks>
            <value><c>true</c> if I/O operations can timeout; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.IO.ChainedStream.Length">
            <summary>
            Gets the length of the stream, in bytes.
            </summary>
            <remarks>
            The length of a <see cref="T:MimeKit.IO.ChainedStream"/> is the combined lenths of all
            of its chained streams.
            </remarks>
            <value>The length of the stream in bytes.</value>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        </member>
        <member name="P:MimeKit.IO.ChainedStream.Position">
            <summary>
            Gets or sets the current position within the stream.
            </summary>
            <remarks>
            It is always possible to get the position of a <see cref="T:MimeKit.IO.ChainedStream"/>,
            but setting the position is only possible if all of its streams are seekable.
            </remarks>
            <value>The position of the stream.</value>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        </member>
        <member name="T:MimeKit.IO.FilteredStream">
            <summary>
            A stream which filters data as it is read or written.
            </summary>
            <remarks>
            Passes data through each <see cref="T:MimeKit.IO.Filters.IMimeFilter"/> as the data is read or written.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.FilteredStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.IO.FilteredStream"/> class.
            </summary>
            <remarks>
            Creates a filtered stream using the specified source stream.
            </remarks>
            <param name="source">The underlying stream to filter.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.IO.FilteredStream.Add(MimeKit.IO.Filters.IMimeFilter)">
            <summary>
            Adds the specified filter.
            </summary>
            <remarks>
            Adds the <paramref name="filter"/> to the end of the list of filters
            that data will pass through as data is read from or written to the
            underlying source stream.
            </remarks>
            <param name="filter">The filter.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filter"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.IO.FilteredStream.Contains(MimeKit.IO.Filters.IMimeFilter)">
            <summary>
            Checks if the filtered stream contains the specified filter.
            </summary>
            <remarks>
            Determines whether or not the filtered stream contains the specified filter.
            </remarks>
            <returns><value>true</value> if the specified filter exists;
            otherwise <value>false</value>.</returns>
            <param name="filter">The filter.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filter"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.IO.FilteredStream.Remove(MimeKit.IO.Filters.IMimeFilter)">
            <summary>
            Remove the specified filter.
            </summary>
            <remarks>
            Removes the specified filter from the list if it exists.
            </remarks>
            <returns><value>true</value> if the filter was removed; otherwise <value>false</value>.</returns>
            <param name="filter">The filter.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filter"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.IO.FilteredStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the stream and advances the position
            within the stream by the number of bytes read.
            </summary>
            <remarks>
            Reads up to the requested number of bytes, passing the data read from the <see cref="P:MimeKit.IO.FilteredStream.Source"/> stream
            through each of the filters before finally copying the result into the provided buffer.
            </remarks>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many
            bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <param name="buffer">The buffer to read data into.</param>
            <param name="offset">The offset into the buffer to start reading data.</param>
            <param name="count">The number of bytes to read.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support reading.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.IO.FilteredStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the stream and advances the current
            position within this stream by the number of bytes written.
            </summary>
            <remarks>
            Filters the provided buffer through each of the filters before finally writing
            the result to the underlying <see cref="P:MimeKit.IO.FilteredStream.Source"/> stream.
            </remarks>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.IO.FilteredStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <remarks>
            Seeking is not supported by the <see cref="T:MimeKit.IO.FilteredStream"/>.
            </remarks>
            <returns>The new position within the stream.</returns>
            <param name="offset">The offset into the stream relative to the <paramref name="origin"/>.</param>
            <param name="origin">The origin to seek from.</param>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
        </member>
        <member name="M:MimeKit.IO.FilteredStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written
            to the underlying device.
            </summary>
            <remarks>
            Flushes the state of all filters, writing any output to the underlying <see cref="P:MimeKit.IO.FilteredStream.Source"/>
            stream and then calling <see cref="M:System.IO.Stream.Flush"/> on the <see cref="P:MimeKit.IO.FilteredStream.Source"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.IO.FilteredStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <remarks>
            Setting the length of a <see cref="T:MimeKit.IO.FilteredStream"/> is not supported.
            </remarks>
            <param name="value">The desired length of the stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support setting the length.
            </exception>
        </member>
        <member name="M:MimeKit.IO.FilteredStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:MimeKit.IO.FilteredStream"/> and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only the unmanaged resources.</param>
        </member>
        <member name="P:MimeKit.IO.FilteredStream.Source">
            <summary>
            Gets the underlying source stream.
            </summary>
            <remarks>
            In general, it is not a good idea to manipulate the underlying
            source stream because most <see cref="T:MimeKit.IO.Filters.IMimeFilter"/>s store
            important state about previous bytes read from or written to
            the source stream.
            </remarks>
            <value>The underlying source stream.</value>
        </member>
        <member name="P:MimeKit.IO.FilteredStream.CanRead">
            <summary>
            Checks whether or not the stream supports reading.
            </summary>
            <remarks>
            The <see cref="T:MimeKit.IO.FilteredStream"/> will only support reading if the
            <see cref="P:MimeKit.IO.FilteredStream.Source"/> supports it.
            </remarks>
            <value><c>true</c> if the stream supports reading; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.IO.FilteredStream.CanWrite">
            <summary>
            Checks whether or not the stream supports writing.
            </summary>
            <remarks>
            The <see cref="T:MimeKit.IO.FilteredStream"/> will only support writing if the
            <see cref="P:MimeKit.IO.FilteredStream.Source"/> supports it.
            </remarks>
            <value><c>true</c> if the stream supports writing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.IO.FilteredStream.CanSeek">
            <summary>
            Checks whether or not the stream supports seeking.
            </summary>
            <remarks>
            Seeking is not supported by the <see cref="T:MimeKit.IO.FilteredStream"/>.
            </remarks>
            <value><c>true</c> if the stream supports seeking; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.IO.FilteredStream.CanTimeout">
            <summary>
            Checks whether or not I/O operations can timeout.
            </summary>
            <remarks>
            The <see cref="T:MimeKit.IO.FilteredStream"/> will only support timing out if the
            <see cref="P:MimeKit.IO.FilteredStream.Source"/> supports it.
            </remarks>
            <value><c>true</c> if I/O operations can timeout; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.IO.FilteredStream.Length">
            <summary>
            Gets the length of the stream, in bytes.
            </summary>
            <remarks>
            Getting the length of a <see cref="T:MimeKit.IO.FilteredStream"/> is not supported.
            </remarks>
            <value>The length of the stream in bytes.</value>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
        </member>
        <member name="P:MimeKit.IO.FilteredStream.Position">
            <summary>
            Gets or sets the current position within the stream.
            </summary>
            <remarks>
            Getting and setting the position of a <see cref="T:MimeKit.IO.FilteredStream"/> is not supported.
            </remarks>
            <value>The position of the stream.</value>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
        </member>
        <member name="P:MimeKit.IO.FilteredStream.ReadTimeout">
            <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.
            </summary>
            <remarks>
            Gets or sets the read timeout on the <see cref="P:MimeKit.IO.FilteredStream.Source"/> stream.
            </remarks>
            <value>A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</value>
        </member>
        <member name="P:MimeKit.IO.FilteredStream.WriteTimeout">
            <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.
            </summary>
            <remarks>
            Gets or sets the write timeout on the <see cref="P:MimeKit.IO.FilteredStream.Source"/> stream.
            </remarks>
            <value>A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</value>
        </member>
        <member name="T:MimeKit.IO.MeasuringStream">
            <summary>
            A stream useful for measuring the amount of data written.
            </summary>
            <remarks>
            A <see cref="T:MimeKit.IO.MeasuringStream"/> keeps track of the number of bytes
            that have been written to it. This is useful, for example, when you
            need to know how large a <see cref="T:MimeKit.MimeMessage"/> is without
            actually writing it to disk or into a memory buffer.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.MeasuringStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.IO.MeasuringStream"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.IO.MeasuringStream"/>.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.MeasuringStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the stream and advances the position
            within the stream by the number of bytes read.
            </summary>
            <remarks>
            Reading from a <see cref="T:MimeKit.IO.MeasuringStream"/> is not supported.
            </remarks>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many
            bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <param name="buffer">The buffer to read data into.</param>
            <param name="offset">The offset into the buffer to start reading data.</param>
            <param name="count">The number of bytes to read.</param>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support reading.
            </exception>
        </member>
        <member name="M:MimeKit.IO.MeasuringStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the stream and advances the current
            position within this stream by the number of bytes written.
            </summary>
            <remarks>
            Increments the <see cref="P:MimeKit.IO.MeasuringStream.Position"/> property by the number of bytes written.
            If the updated position is greater than the current length of the stream, then
            the <see cref="P:MimeKit.IO.MeasuringStream.Length"/> property will be updated to be identical to the
            position.
            </remarks>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.IO.MeasuringStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <remarks>
            Updates the <see cref="P:MimeKit.IO.MeasuringStream.Position"/> within the stream.
            </remarks>
            <returns>The new position within the stream.</returns>
            <param name="offset">The offset into the stream relative to the <paramref name="origin"/>.</param>
            <param name="origin">The origin to seek from.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="origin"/> is not a valid <see cref="T:System.IO.SeekOrigin"/>. 
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        </member>
        <member name="M:MimeKit.IO.MeasuringStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written
            to the underlying device.
            </summary>
            <remarks>
            Since a <see cref="T:MimeKit.IO.MeasuringStream"/> does not actually do anything other than
            count bytes, this method is a no-op.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        </member>
        <member name="M:MimeKit.IO.MeasuringStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <remarks>
            Sets the <see cref="P:MimeKit.IO.MeasuringStream.Length"/> to the specified value and updates
            <see cref="P:MimeKit.IO.MeasuringStream.Position"/> to the specified value if (and only if)
            the current position is greater than the new length value.
            </remarks>
            <param name="value">The desired length of the stream in bytes.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is out of range.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        </member>
        <member name="M:MimeKit.IO.MeasuringStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:MimeKit.IO.MeasuringStream"/> and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only the unmanaged resources.</param>
        </member>
        <member name="P:MimeKit.IO.MeasuringStream.CanRead">
            <summary>
            Checks whether or not the stream supports reading.
            </summary>
            <remarks>
            A <see cref="T:MimeKit.IO.MeasuringStream"/> is not readable.
            </remarks>
            <value><c>true</c> if the stream supports reading; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.IO.MeasuringStream.CanWrite">
            <summary>
            Checks whether or not the stream supports writing.
            </summary>
            <remarks>
            A <see cref="T:MimeKit.IO.MeasuringStream"/> is always writable.
            </remarks>
            <value><c>true</c> if the stream supports writing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.IO.MeasuringStream.CanSeek">
            <summary>
            Checks whether or not the stream supports seeking.
            </summary>
            <remarks>
            A <see cref="T:MimeKit.IO.MeasuringStream"/> is always seekable.
            </remarks>
            <value><c>true</c> if the stream supports seeking; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.IO.MeasuringStream.CanTimeout">
            <summary>
            Checks whether or not reading and writing to the stream can timeout.
            </summary>
            <remarks>
            Writing to a <see cref="T:MimeKit.IO.MeasuringStream"/> cannot timeout.
            </remarks>
            <value><c>true</c> if reading and writing to the stream can timeout; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.IO.MeasuringStream.Length">
            <summary>
            Gets the length of the stream, in bytes.
            </summary>
            <remarks>
            The length of a <see cref="T:MimeKit.IO.MeasuringStream"/> indicates the
            number of bytes that have been written to it.
            </remarks>
            <value>The length of the stream in bytes.</value>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        </member>
        <member name="P:MimeKit.IO.MeasuringStream.Position">
            <summary>
            Gets or sets the current position within the stream.
            </summary>
            <remarks>
            Since it is possible to seek within a <see cref="T:MimeKit.IO.MeasuringStream"/>,
            it is possible that the position will not always be identical to the
            length of the stream, but typically it will be.
            </remarks>
            <value>The position of the stream.</value>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        </member>
        <member name="T:MimeKit.IO.MemoryBlockStream">
            <summary>
            An efficient memory stream implementation that sacrifices the ability to
            get access to the internal byte buffer in order to drastically improve
            performance.
            </summary>
            <remarks>
            Instead of resizing an internal byte array, the <see cref="T:MimeKit.IO.MemoryBlockStream"/>
            chains blocks of non-contiguous memory. This helps improve performance by avoiding
            unneeded copying of data from the old array to the newly allocated array as well
            as the zeroing of the newly allocated array.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.MemoryBlockStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.IO.MemoryBlockStream"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.IO.MemoryBlockStream"/> with an initial memory block
            of 2048 bytes.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.MemoryBlockStream.ToArray">
            <summary>
            Copies the memory stream into a byte array.
            </summary>
            <remarks>
            Copies all of the stream data into a newly allocated byte array.
            </remarks>
            <returns>The array.</returns>
        </member>
        <member name="M:MimeKit.IO.MemoryBlockStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the stream and advances the position
            within the stream by the number of bytes read.
            </summary>
            <remarks>
            Reads a sequence of bytes from the stream and advances the position
            within the stream by the number of bytes read.
            </remarks>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many
            bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <param name="buffer">The buffer to read data into.</param>
            <param name="offset">The offset into the buffer to start reading data.</param>
            <param name="count">The number of bytes to read.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.IO.MemoryBlockStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the stream and advances the current
            position within this stream by the number of bytes written.
            </summary>
            <remarks>
            Writes the entire buffer to the stream and advances the current position
            within the stream by the number of bytes written, adding memory blocks as
            needed in order to contain the newly written bytes.
            </remarks>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.IO.MemoryBlockStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <remarks>
            Sets the position within the current stream.
            </remarks>
            <returns>The new position within the stream.</returns>
            <param name="offset">The offset into the stream relative to the <paramref name="origin"/>.</param>
            <param name="origin">The origin to seek from.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="origin"/> is not a valid <see cref="T:System.IO.SeekOrigin"/>. 
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.IO.MemoryBlockStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written
            to the underlying device.
            </summary>
            <remarks>
            This method does not do anything.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        </member>
        <member name="M:MimeKit.IO.MemoryBlockStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <remarks>
            Sets the length of the stream.
            </remarks>
            <param name="value">The desired length of the stream in bytes.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is out of range.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        </member>
        <member name="M:MimeKit.IO.MemoryBlockStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:MimeKit.IO.MemoryBlockStream"/> and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only the unmanaged resources.</param>
        </member>
        <member name="P:MimeKit.IO.MemoryBlockStream.CanRead">
            <summary>
            Checks whether or not the stream supports reading.
            </summary>
            <remarks>
            The <see cref="T:MimeKit.IO.MemoryBlockStream"/> is always readable.
            </remarks>
            <value><c>true</c> if the stream supports reading; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.IO.MemoryBlockStream.CanWrite">
            <summary>
            Checks whether or not the stream supports writing.
            </summary>
            <remarks>
            The <see cref="T:MimeKit.IO.MemoryBlockStream"/> is always writable.
            </remarks>
            <value><c>true</c> if the stream supports writing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.IO.MemoryBlockStream.CanSeek">
            <summary>
            Checks whether or not the stream supports seeking.
            </summary>
            <remarks>
            The <see cref="T:MimeKit.IO.MemoryBlockStream"/> is always seekable.
            </remarks>
            <value><c>true</c> if the stream supports seeking; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.IO.MemoryBlockStream.CanTimeout">
            <summary>
            Checks whether or not reading and writing to the stream can timeout.
            </summary>
            <remarks>
            The <see cref="T:MimeKit.IO.MemoryBlockStream"/> does not support timing out.
            </remarks>
            <value><c>true</c> if reading and writing to the stream can timeout; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.IO.MemoryBlockStream.Length">
            <summary>
            Gets the length of the stream, in bytes.
            </summary>
            <remarks>
            Gets the length of the stream, in bytes.
            </remarks>
            <value>The length of the stream, in bytes.</value>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        </member>
        <member name="P:MimeKit.IO.MemoryBlockStream.Position">
            <summary>
            Gets or sets the current position within the stream.
            </summary>
            <remarks>
            Gets or sets the current position within the stream.
            </remarks>
            <value>The position of the stream.</value>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        </member>
        <member name="T:MimeKit.IO.Filters.ArmoredFromFilter">
            <summary>
            A filter that armors lines beginning with "From " by encoding the 'F' with the
            Quoted-Printable encoding.
            </summary>
            <remarks>
            <para>From-armoring is a workaround to prevent receiving clients (or servers)
            that uses the mbox file format for local storage from munging the line
            by prepending a ">", as is typical with the mbox format.</para>
            <para>This armoring technique ensures that the receving client will still
            be able to verify S/MIME signatures.</para>
            </remarks>
        </member>
        <member name="T:MimeKit.IO.Filters.MimeFilterBase">
            <summary>
            A base implementation for MIME filters.
            </summary>
            <remarks>
            A base implementation for MIME filters.
            </remarks>
        </member>
        <member name="T:MimeKit.IO.Filters.IMimeFilter">
            <summary>
            An interface for incrementally filtering data.
            </summary>
            <remarks>
            An interface for incrementally filtering data.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.Filters.IMimeFilter.Filter(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Filters the specified input.
            </summary>
            <remarks>
            Filters the specified input buffer starting at the given index,
            spanning across the specified number of bytes.
            </remarks>
            <returns>The filtered output.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes of the input to filter.</param>
            <param name="outputIndex">The starting index of the output in the returned buffer.</param>
            <param name="outputLength">The length of the output buffer.</param>
        </member>
        <member name="M:MimeKit.IO.Filters.IMimeFilter.Flush(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Filters the specified input, flushing all internally buffered data to the output.
            </summary>
            <remarks>
            Filters the specified input buffer starting at the given index,
            spanning across the specified number of bytes.
            </remarks>
            <returns>The filtered output.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes of the input to filter.</param>
            <param name="outputIndex">The starting index of the output in the returned buffer.</param>
            <param name="outputLength">The length of the output buffer.</param>
        </member>
        <member name="M:MimeKit.IO.Filters.IMimeFilter.Reset">
            <summary>
            Resets the filter.
            </summary>
            <remarks>
            Resets the filter.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.Filters.MimeFilterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.IO.Filters.MimeFilterBase"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.IO.Filters.MimeFilterBase"/>.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.Filters.MimeFilterBase.Filter(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Filter the specified input.
            </summary>
            <remarks>
            Filters the specified input buffer starting at the given index,
            spanning across the specified number of bytes.
            </remarks>
            <returns>The filtered output.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer, starting at <paramref name="startIndex"/>.</param>
            <param name="outputIndex">The output index.</param>
            <param name="outputLength">The output length.</param>
            <param name="flush">If set to <c>true</c>, all internally buffered data should be flushed to the output buffer.</param>
        </member>
        <member name="M:MimeKit.IO.Filters.MimeFilterBase.Filter(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Filters the specified input.
            </summary>
            <remarks>
            Filters the specified input buffer starting at the given index,
            spanning across the specified number of bytes.
            </remarks>
            <returns>The filtered output.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes of the input to filter.</param>
            <param name="outputIndex">The starting index of the output in the returned buffer.</param>
            <param name="outputLength">The length of the output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="input"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
        </member>
        <member name="M:MimeKit.IO.Filters.MimeFilterBase.Flush(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Filters the specified input, flushing all internally buffered data to the output.
            </summary>
            <remarks>
            Filters the specified input buffer starting at the given index,
            spanning across the specified number of bytes.
            </remarks>
            <returns>The filtered output.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes of the input to filter.</param>
            <param name="outputIndex">The starting index of the output in the returned buffer.</param>
            <param name="outputLength">The length of the output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="input"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
        </member>
        <member name="M:MimeKit.IO.Filters.MimeFilterBase.Reset">
            <summary>
            Resets the filter.
            </summary>
            <remarks>
            Resets the filter.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.Filters.MimeFilterBase.SaveRemainingInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Saves the remaining input for the next round of processing.
            </summary>
            <remarks>
            Saves the remaining input for the next round of processing.
            </remarks>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the buffer to save.</param>
            <param name="length">The length of the buffer to save, starting at <paramref name="startIndex"/>.</param>
        </member>
        <member name="M:MimeKit.IO.Filters.MimeFilterBase.EnsureOutputSize(System.Int32,System.Boolean)">
            <summary>
            Ensures that the output buffer is greater than or equal to the specified size.
            </summary>
            <remarks>
            Ensures that the output buffer is greater than or equal to the specified size.
            </remarks>
            <param name="size">The minimum size needed.</param>
            <param name="keep">If set to <c>true</c>, the current output should be preserved.</param>
        </member>
        <member name="P:MimeKit.IO.Filters.MimeFilterBase.OutputBuffer">
            <summary>
            Gets the output buffer.
            </summary>
            <remarks>
            Gets the output buffer.
            </remarks>
            <value>The output buffer.</value>
        </member>
        <member name="M:MimeKit.IO.Filters.ArmoredFromFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.IO.Filters.ArmoredFromFilter"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.IO.Filters.ArmoredFromFilter"/>.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.Filters.ArmoredFromFilter.Filter(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Filter the specified input.
            </summary>
            <remarks>
            Filters the specified input buffer starting at the given index,
            spanning across the specified number of bytes.
            </remarks>
            <returns>The filtered output.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer, starting at <paramref name="startIndex"/>.</param>
            <param name="outputIndex">The output index.</param>
            <param name="outputLength">The output length.</param>
            <param name="flush">If set to <c>true</c>, all internally buffered data should be flushed to the output buffer.</param>
        </member>
        <member name="M:MimeKit.IO.Filters.ArmoredFromFilter.Reset">
            <summary>
            Resets the filter.
            </summary>
            <remarks>
            Resets the filter.
            </remarks>
        </member>
        <member name="T:MimeKit.IO.Filters.BestEncodingFilter">
            <summary>
            A filter that can be used to determine the most efficient Content-Transfer-Encoding.
            </summary>
            <remarks>
            Keeps track of the content that gets passed through the filter in order to
            determine the most efficient <see cref="T:MimeKit.ContentEncoding"/> to use.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.Filters.BestEncodingFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.IO.Filters.BestEncodingFilter"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.IO.Filters.BestEncodingFilter"/>.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.Filters.BestEncodingFilter.GetBestEncoding(MimeKit.EncodingConstraint)">
            <summary>
            Gets the best encoding given the specified constraints.
            </summary>
            <remarks>
            Gets the best encoding given the specified constraints.
            </remarks>
            <returns>The best encoding.</returns>
            <param name="constraint">The encoding constraint.</param>
        </member>
        <member name="M:MimeKit.IO.Filters.BestEncodingFilter.Filter(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Filters the specified input.
            </summary>
            <remarks>
            Filters the specified input buffer starting at the given index,
            spanning across the specified number of bytes.
            </remarks>
            <returns>The filtered output.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes of the input to filter.</param>
            <param name="outputIndex">The starting index of the output in the returned buffer.</param>
            <param name="outputLength">The length of the output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="input"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
        </member>
        <member name="M:MimeKit.IO.Filters.BestEncodingFilter.Flush(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Filters the specified input, flushing all internally buffered data to the output.
            </summary>
            <remarks>
            Filters the specified input buffer starting at the given index,
            spanning across the specified number of bytes.
            </remarks>
            <returns>The filtered output.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes of the input to filter.</param>
            <param name="outputIndex">The starting index of the output in the returned buffer.</param>
            <param name="outputLength">The length of the output buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="input"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the <paramref name="input"/> byte array.
            </exception>
        </member>
        <member name="M:MimeKit.IO.Filters.BestEncodingFilter.Reset">
            <summary>
            Resets the filter.
            </summary>
            <remarks>
            Resets the filter.
            </remarks>
        </member>
        <member name="T:MimeKit.IO.Filters.CharsetFilter">
            <summary>
            A charset filter for incrementally converting text streams from
            one charset encoding to another.
            </summary>
            <remarks>
            Incrementally converts text from one charset encoding to another.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.Filters.CharsetFilter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.IO.Filters.CharsetFilter"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.IO.Filters.CharsetFilter"/> to convert text from the specified
            source encoding into the target charset encoding.
            </remarks>
            <param name="sourceEncodingName">Source encoding name.</param>
            <param name="targetEncodingName">Target encoding name.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="sourceEncodingName"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="targetEncodingName"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <paramref name="sourceEncodingName"/> is not supported by the system.</para>
            <para>-or-</para>
            <para>The <paramref name="targetEncodingName"/> is not supported by the system.</para>
            </exception>
        </member>
        <member name="M:MimeKit.IO.Filters.CharsetFilter.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.IO.Filters.CharsetFilter"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.IO.Filters.CharsetFilter"/> to convert text from the specified
            source encoding into the target charset encoding.
            </remarks>
            <param name="sourceCodePage">Source code page.</param>
            <param name="targetCodePage">Target code page.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="sourceCodePage"/> is less than zero or greater than 65535.</para>
            <para>-or-</para>
            <para><paramref name="targetCodePage"/> is less than zero or greater than 65535.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <paramref name="sourceCodePage"/> is not supported by the system.</para>
            <para>-or-</para>
            <para>The <paramref name="targetCodePage"/> is not supported by the system.</para>
            </exception>
        </member>
        <member name="M:MimeKit.IO.Filters.CharsetFilter.#ctor(Portable.Text.Encoding,Portable.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.IO.Filters.CharsetFilter"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.IO.Filters.CharsetFilter"/> to convert text from the specified
            source encoding into the target charset encoding.
            </remarks>
            <param name="sourceEncoding">Source encoding.</param>
            <param name="targetEncoding">Target encoding.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="sourceEncoding"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="targetEncoding"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.IO.Filters.CharsetFilter.Filter(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Filter the specified input.
            </summary>
            <remarks>
            Filters the specified input buffer starting at the given index,
            spanning across the specified number of bytes.
            </remarks>
            <returns>The filtered output.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer, starting at <paramref name="startIndex"/>.</param>
            <param name="outputIndex">The output index.</param>
            <param name="outputLength">The output length.</param>
            <param name="flush">If set to <c>true</c>, all internally buffered data should be flushed to the output buffer.</param>
        </member>
        <member name="M:MimeKit.IO.Filters.CharsetFilter.Reset">
            <summary>
            Resets the filter.
            </summary>
            <remarks>
            Resets the filter.
            </remarks>
        </member>
        <member name="P:MimeKit.IO.Filters.CharsetFilter.SourceEncoding">
            <summary>
            Gets the source encoding.
            </summary>
            <remarks>
            Gets the source encoding.
            </remarks>
            <value>The source encoding.</value>
        </member>
        <member name="P:MimeKit.IO.Filters.CharsetFilter.TargetEncoding">
            <summary>
            Gets the target encoding.
            </summary>
            <remarks>
            Gets the target encoding.
            </remarks>
            <value>The target encoding.</value>
        </member>
        <member name="T:MimeKit.IO.Filters.DecoderFilter">
            <summary>
            A filter for decoding MIME content.
            </summary>
            <remarks>
            Uses a <see cref="T:MimeKit.Encodings.IMimeDecoder"/> to incrementally decode data.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.Filters.DecoderFilter.#ctor(MimeKit.Encodings.IMimeDecoder)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.IO.Filters.DecoderFilter"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.IO.Filters.DecoderFilter"/> using the specified decoder.
            </remarks>
            <param name="decoder">A specific decoder for the filter to use.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decoder"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.IO.Filters.DecoderFilter.Create(MimeKit.ContentEncoding)">
            <summary>
            Create a filter that will decode the specified encoding.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.IO.Filters.DecoderFilter"/> for the specified encoding.
            </remarks>
            <returns>A new decoder filter.</returns>
            <param name="encoding">The encoding to create a filter for.</param>
        </member>
        <member name="M:MimeKit.IO.Filters.DecoderFilter.Filter(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Filter the specified input.
            </summary>
            <remarks>
            Filters the specified input buffer starting at the given index,
            spanning across the specified number of bytes.
            </remarks>
            <returns>The filtered output.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer, starting at <paramref name="startIndex"/>.</param>
            <param name="outputIndex">The output index.</param>
            <param name="outputLength">The output length.</param>
            <param name="flush">If set to <c>true</c>, all internally buffered data should be flushed to the output buffer.</param>
        </member>
        <member name="M:MimeKit.IO.Filters.DecoderFilter.Reset">
            <summary>
            Resets the filter.
            </summary>
            <remarks>
            Resets the filter.
            </remarks>
        </member>
        <member name="P:MimeKit.IO.Filters.DecoderFilter.Decoder">
            <summary>
            Gets the decoder used by this filter.
            </summary>
            <remarks>
            Gets the decoder used by this filter.
            </remarks>
            <value>The decoder.</value>
        </member>
        <member name="P:MimeKit.IO.Filters.DecoderFilter.Encoding">
            <summary>
            Gets the encoding.
            </summary>
            <remarks>
            Gets the encoding that the decoder supports.
            </remarks>
            <value>The encoding.</value>
        </member>
        <member name="T:MimeKit.IO.Filters.Dos2UnixFilter">
            <summary>
            A filter that will convert from Windows/DOS line endings to Unix line endings.
            </summary>
            <remarks>
            Converts from Windows/DOS line endings to Unix line endings.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.Filters.Dos2UnixFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.IO.Filters.Dos2UnixFilter"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.IO.Filters.Dos2UnixFilter"/>.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.Filters.Dos2UnixFilter.Filter(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Filter the specified input.
            </summary>
            <remarks>
            Filters the specified input buffer starting at the given index,
            spanning across the specified number of bytes.
            </remarks>
            <returns>The filtered output.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer, starting at <paramref name="startIndex"/>.</param>
            <param name="outputIndex">The output index.</param>
            <param name="outputLength">The output length.</param>
            <param name="flush">If set to <c>true</c>, all internally buffered data should be flushed to the output buffer.</param>
        </member>
        <member name="M:MimeKit.IO.Filters.Dos2UnixFilter.Reset">
            <summary>
            Resets the filter.
            </summary>
            <remarks>
            Resets the filter.
            </remarks>
        </member>
        <member name="T:MimeKit.IO.Filters.EncoderFilter">
            <summary>
            A filter for encoding MIME content.
            </summary>
            <remarks>
            Uses a <see cref="T:MimeKit.Encodings.IMimeEncoder"/> to incrementally encode data.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.Filters.EncoderFilter.#ctor(MimeKit.Encodings.IMimeEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.IO.Filters.EncoderFilter"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.IO.Filters.EncoderFilter"/> using the specified encoder.
            </remarks>
            <param name="encoder">A specific encoder for the filter to use.</param>
        </member>
        <member name="M:MimeKit.IO.Filters.EncoderFilter.Create(MimeKit.ContentEncoding)">
            <summary>
            Create a filter that will encode using specified encoding.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.IO.Filters.EncoderFilter"/> for the specified encoding.
            </remarks>
            <returns>A new encoder filter.</returns>
            <param name="encoding">The encoding to create a filter for.</param>
        </member>
        <member name="M:MimeKit.IO.Filters.EncoderFilter.Filter(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Filter the specified input.
            </summary>
            <remarks>
            Filters the specified input buffer starting at the given index,
            spanning across the specified number of bytes.
            </remarks>
            <returns>The filtered output.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer, starting at <paramref name="startIndex"/>.</param>
            <param name="outputIndex">The output index.</param>
            <param name="outputLength">The output length.</param>
            <param name="flush">If set to <c>true</c>, all internally buffered data should be flushed to the output buffer.</param>
        </member>
        <member name="M:MimeKit.IO.Filters.EncoderFilter.Reset">
            <summary>
            Resets the filter.
            </summary>
            <remarks>
            Resets the filter.
            </remarks>
        </member>
        <member name="P:MimeKit.IO.Filters.EncoderFilter.Encoder">
            <summary>
            Gets the encoder used by this filter.
            </summary>
            <remarks>
            Gets the encoder used by this filter.
            </remarks>
            <value>The encoder.</value>
        </member>
        <member name="P:MimeKit.IO.Filters.EncoderFilter.Encoding">
            <summary>
            Gets the encoding.
            </summary>
            <remarks>
            Gets the encoding that the encoder supports.
            </remarks>
            <value>The encoding.</value>
        </member>
        <member name="T:MimeKit.IO.Filters.PassThroughFilter">
            <summary>
            A filter that simply passes data through without any processing.
            </summary>
            <remarks>
            Passes data through without any processing.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.Filters.PassThroughFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.IO.Filters.PassThroughFilter"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.IO.Filters.PassThroughFilter"/>.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.Filters.PassThroughFilter.Filter(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Filters the specified input.
            </summary>
            <remarks>
            Filters the specified input buffer starting at the given index,
            spanning across the specified number of bytes.
            </remarks>
            <returns>The filtered output.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes of the input to filter.</param>
            <param name="outputIndex">The starting index of the output in the returned buffer.</param>
            <param name="outputLength">The length of the output buffer.</param>
        </member>
        <member name="M:MimeKit.IO.Filters.PassThroughFilter.Flush(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Filters the specified input, flushing all internally buffered data to the output.
            </summary>
            <remarks>
            Filters the specified input buffer starting at the given index,
            spanning across the specified number of bytes.
            </remarks>
            <returns>The filtered output.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes of the input to filter.</param>
            <param name="outputIndex">The starting index of the output in the returned buffer.</param>
            <param name="outputLength">The length of the output buffer.</param>
        </member>
        <member name="M:MimeKit.IO.Filters.PassThroughFilter.Reset">
            <summary>
            Resets the filter.
            </summary>
            <remarks>
            Resets the filter.
            </remarks>
        </member>
        <member name="T:MimeKit.IO.Filters.TrailingWhitespaceFilter">
            <summary>
            A filter for stripping trailing whitespace from lines in a textual stream.
            </summary>
            <remarks>
            Strips trailing whitespace from lines in a textual stream.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.Filters.TrailingWhitespaceFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.IO.Filters.TrailingWhitespaceFilter"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.IO.Filters.TrailingWhitespaceFilter"/>.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.Filters.TrailingWhitespaceFilter.Filter(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Filter the specified input.
            </summary>
            <remarks>
            Filters the specified input buffer starting at the given index,
            spanning across the specified number of bytes.
            </remarks>
            <returns>The filtered output.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer, starting at <paramref name="startIndex"/>.</param>
            <param name="outputIndex">The output index.</param>
            <param name="outputLength">The output length.</param>
            <param name="flush">If set to <c>true</c>, all internally buffered data should be flushed to the output buffer.</param>
        </member>
        <member name="M:MimeKit.IO.Filters.TrailingWhitespaceFilter.Reset">
            <summary>
            Resets the filter.
            </summary>
            <remarks>
            Resets the filter.
            </remarks>
        </member>
        <member name="T:MimeKit.IO.Filters.Unix2DosFilter">
            <summary>
            A filter that will convert from Unix line endings to Windows/DOS line endings.
            </summary>
            <remarks>
            Converts from Unix line endings to Windows/DOS line endings.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.Filters.Unix2DosFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.IO.Filters.Unix2DosFilter"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.IO.Filters.Unix2DosFilter"/>.
            </remarks>
        </member>
        <member name="M:MimeKit.IO.Filters.Unix2DosFilter.Filter(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Filter the specified input.
            </summary>
            <remarks>
            Filters the specified input buffer starting at the given index,
            spanning across the specified number of bytes.
            </remarks>
            <returns>The filtered output.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The length of the input buffer, starting at <paramref name="startIndex"/>.</param>
            <param name="outputIndex">The output index.</param>
            <param name="outputLength">The output length.</param>
            <param name="flush">If set to <c>true</c>, all internally buffered data should be flushed to the output buffer.</param>
        </member>
        <member name="M:MimeKit.IO.Filters.Unix2DosFilter.Reset">
            <summary>
            Resets the filter.
            </summary>
            <remarks>
            Resets the filter.
            </remarks>
        </member>
        <member name="T:MimeKit.Utils.DateUtils">
            <summary>
            Utility methods to parse and format rfc822 date strings.
            </summary>
            <remarks>
            Utility methods to parse and format rfc822 date strings.
            </remarks>
        </member>
        <member name="M:MimeKit.Utils.DateUtils.TryParseDateTime(System.Byte[],System.Int32,System.Int32,System.DateTimeOffset@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:System.DateTimeOffset"/> instance.
            </summary>
            <remarks>
            Parses an rfc822 date and time from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
            <returns><c>true</c>, if the date was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes in the input buffer to parse.</param>
            <param name="date">The parsed date.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.Utils.DateUtils.TryParseDateTime(System.Byte[],System.Int32,System.DateTimeOffset@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:System.DateTimeOffset"/> instance.
            </summary>
            <remarks>
            Parses an rfc822 date and time from the supplied buffer starting at the specified index.
            </remarks>
            <returns><c>true</c>, if the date was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="date">The parsed date.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is not within the range of the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.Utils.DateUtils.TryParseDateTime(System.Byte[],System.DateTimeOffset@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:System.DateTimeOffset"/> instance.
            </summary>
            <remarks>
            Parses an rfc822 date and time from the specified buffer.
            </remarks>
            <returns><c>true</c>, if the date was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="date">The parsed date.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.Utils.DateUtils.TryParseDateTime(System.String,System.DateTimeOffset@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:System.DateTimeOffset"/> instance.
            </summary>
            <remarks>
            Parses an rfc822 date and time from the specified text.
            </remarks>
            <returns><c>true</c>, if the date was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="text">The input text.</param>
            <param name="date">The parsed date.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.Utils.DateUtils.FormatDate(System.DateTimeOffset)">
            <summary>
            Formats the <see cref="T:System.DateTimeOffset"/> as an rfc822 date string.
            </summary>
            <remarks>
            Formats the date and time in the format specified by rfc822, suitable for use
            in the Date header of MIME messages.
            </remarks>
            <returns>The formatted string.</returns>
            <param name="date">The date.</param>
        </member>
        <member name="T:MimeKit.Utils.MimeUtils">
            <summary>
            MIME utility methods.
            </summary>
            <remarks>
            Various utility methods that don't belong anywhere else.
            </remarks>
        </member>
        <member name="M:MimeKit.Utils.MimeUtils.GenerateMessageId(System.String)">
            <summary>
            Generates a Message-Id.
            </summary>
            <remarks>
            Generates a new Message-Id using the supplied domain.
            </remarks>
            <returns>The message identifier.</returns>
            <param name="domain">A domain to use.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="domain"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.Utils.MimeUtils.GenerateMessageId">
            <summary>
            Generates a Message-Id.
            </summary>
            <remarks>
            Generates a new Message-Id using the local machine's domain.
            </remarks>
            <returns>The message identifier.</returns>
        </member>
        <member name="M:MimeKit.Utils.MimeUtils.EnumerateReferences(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Enumerates the message-id references such as those that can be found in
            the In-Reply-To or References header.
            </summary>
            <remarks>
            Incrementally parses Message-Ids (such as those from a References header
            in a MIME message) from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
            <returns>The references.</returns>
            <param name="buffer">The raw byte buffer to parse.</param>
            <param name="startIndex">The index into the buffer to start parsing.</param>
            <param name="length">The length of the buffer to parse.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.Utils.MimeUtils.EnumerateReferences(System.String)">
            <summary>
            Enumerates the message-id references such as those that can be found in
            the In-Reply-To or References header.
            </summary>
            <remarks>
            Incrementally parses Message-Ids (such as those from a References header
            in a MIME message) from the specified text.
            </remarks>
            <returns>The references.</returns>
            <param name="text">The text to parse.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.Utils.MimeUtils.TryParseVersion(System.Byte[],System.Int32,System.Int32,System.Version@)">
            <summary>
            Tries to parse a version from a header such as Mime-Version.
            </summary>
            <remarks>
            Parses a MIME version string from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
            <returns><c>true</c>, if the version was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The raw byte buffer to parse.</param>
            <param name="startIndex">The index into the buffer to start parsing.</param>
            <param name="length">The length of the buffer to parse.</param>
            <param name="version">The parsed version.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.Utils.MimeUtils.TryParseVersion(System.String,System.Version@)">
            <summary>
            Tries to parse a version from a header such as Mime-Version.
            </summary>
            <remarks>
            Parses a MIME version string from the specified text.
            </remarks>
            <returns><c>true</c>, if the version was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="text">The text to parse.</param>
            <param name="version">The parsed version.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.Utils.MimeUtils.Quote(System.String)">
            <summary>
            Quotes the specified text.
            </summary>
            <remarks>
            Quotes the specified text, enclosing it in double-quotes and escaping
            any backslashes and double-quotes within.
            </remarks>
            <returns>The quoted text.</returns>
            <param name="text">The text to quote.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.Utils.MimeUtils.Unquote(System.String)">
            <summary>
            Unquotes the specified text.
            </summary>
            <remarks>
            Unquotes the specified text, removing any escaped backslashes within.
            </remarks>
            <returns>The unquoted text.</returns>
            <param name="text">The text to unquote.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:MimeKit.Utils.Rfc2047">
            <summary>
            Utility methods for encoding and decoding rfc2047 encoded-word tokens.
            </summary>
            <remarks>
            Utility methods for encoding and decoding rfc2047 encoded-word tokens.
            </remarks>
        </member>
        <member name="M:MimeKit.Utils.Rfc2047.DecodePhrase(MimeKit.ParserOptions,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes the phrase.
            </summary>
            <remarks>
            Decodes the phrase(s) starting at the given index and spanning across
            the specified number of bytes using the supplied parser options.
            </remarks>
            <returns>The decoded phrase.</returns>
            <param name="options">The parser options to use.</param>
            <param name="phrase">The phrase to decode.</param>
            <param name="startIndex">The starting index.</param>
            <param name="count">The number of bytes to decode.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="phrase"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="count"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.Utils.Rfc2047.DecodePhrase(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes the phrase.
            </summary>
            <remarks>
            Decodes the phrase(s) starting at the given index and spanning across
            the specified number of bytes using the default parser options.
            </remarks>
            <returns>The decoded phrase.</returns>
            <param name="phrase">The phrase to decode.</param>
            <param name="startIndex">The starting index.</param>
            <param name="count">The number of bytes to decode.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="phrase"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="count"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.Utils.Rfc2047.DecodePhrase(MimeKit.ParserOptions,System.Byte[])">
            <summary>
            Decodes the phrase.
            </summary>
            <remarks>
            Decodes the phrase(s) within the specified buffer using the supplied parser options.
            </remarks>
            <returns>The decoded phrase.</returns>
            <param name="options">The parser options to use.</param>
            <param name="phrase">The phrase to decode.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="phrase"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Utils.Rfc2047.DecodePhrase(System.Byte[])">
            <summary>
            Decodes the phrase.
            </summary>
            <remarks>
            Decodes the phrase(s) within the specified buffer using the default parser options.
            </remarks>
            <returns>The decoded phrase.</returns>
            <param name="phrase">The phrase to decode.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="phrase"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.Utils.Rfc2047.DecodeText(MimeKit.ParserOptions,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes unstructured text.
            </summary>
            <remarks>
            Decodes the unstructured text buffer starting at the given index and spanning
            across the specified number of bytes using the supplied parser options.
            </remarks>
            <returns>The decoded text.</returns>
            <param name="options">The parser options to use.</param>
            <param name="text">The text to decode.</param>
            <param name="startIndex">The starting index.</param>
            <param name="count">The number of bytes to decode.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="text"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="count"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.Utils.Rfc2047.DecodeText(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes unstructured text.
            </summary>
            <remarks>
            Decodes the unstructured text buffer starting at the given index and spanning
            across the specified number of bytes using the default parser options.
            </remarks>
            <returns>The decoded text.</returns>
            <param name="text">The text to decode.</param>
            <param name="startIndex">The starting index.</param>
            <param name="count">The number of bytes to decode.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="count"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.Utils.Rfc2047.DecodeText(MimeKit.ParserOptions,System.Byte[])">
            <summary>
            Decodes unstructured text.
            </summary>
            <remarks>
            Decodes the unstructured text buffer using the specified parser options.
            </remarks>
            <returns>The decoded text.</returns>
            <param name="options">The parser options to use.</param>
            <param name="text">The text to decode.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="text"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Utils.Rfc2047.DecodeText(System.Byte[])">
            <summary>
            Decodes unstructured text.
            </summary>
            <remarks>
            Decodes the unstructured text buffer using the default parser options.
            </remarks>
            <returns>The decoded text.</returns>
            <param name="text">The text to decode.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.Utils.Rfc2047.EncodePhrase(MimeKit.FormatOptions,Portable.Text.Encoding,System.String)">
            <summary>
            Encodes the phrase.
            </summary>
            <remarks>
            Encodes the phrase according to the rules of rfc2047 using
            the specified charset encoding and formatting options.
            </remarks>
            <returns>The encoded phrase.</returns>
            <param name="options">The formatting options</param>
            <param name="charset">The charset encoding.</param>
            <param name="phrase">The phrase to encode.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="charset"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="phrase"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Utils.Rfc2047.EncodePhrase(Portable.Text.Encoding,System.String)">
            <summary>
            Encodes the phrase.
            </summary>
            <remarks>
            Encodes the phrase according to the rules of rfc2047 using
            the specified charset encoding.
            </remarks>
            <returns>The encoded phrase.</returns>
            <param name="charset">The charset encoding.</param>
            <param name="phrase">The phrase to encode.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="charset"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="phrase"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Utils.Rfc2047.EncodeText(MimeKit.FormatOptions,Portable.Text.Encoding,System.String)">
            <summary>
            Encodes the unstructured text.
            </summary>
            <remarks>
            Encodes the unstructured text according to the rules of rfc2047
            using the specified charset encoding and formatting options.
            </remarks>
            <returns>The encoded text.</returns>
            <param name="options">The formatting options</param>
            <param name="charset">The charset encoding.</param>
            <param name="text">The text to encode.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="charset"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="text"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Utils.Rfc2047.EncodeText(Portable.Text.Encoding,System.String)">
            <summary>
            Encodes the unstructured text.
            </summary>
            <remarks>
            Encodes the unstructured text according to the rules of rfc2047
            using the specified charset encoding.
            </remarks>
            <returns>The encoded text.</returns>
            <param name="charset">The charset encoding.</param>
            <param name="text">The text to encode.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="charset"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="text"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="T:MimeKit.AttachmentCollection">
            <summary>
            A collection of attachments.
            </summary>
            <remarks>
            The <see cref="T:MimeKit.AttachmentCollection"/> is only used when building a message body with a <see cref="T:MimeKit.BodyBuilder"/>.
            </remarks>
        </member>
        <member name="M:MimeKit.AttachmentCollection.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.AttachmentCollection"/> class.
            </summary>
            <remarks>
            <para>Creates a new <see cref="T:MimeKit.AttachmentCollection"/>.</para>
            <para>If <paramref name="linkedResources"/> is <c>true</c>, then the attachments
            are treated as if they are linked to another <see cref="T:MimeKit.MimePart"/>.</para>
            </remarks>
            <param name="linkedResources">If set to <c>true</c>; the attachments are treated as linked resources.</param>
        </member>
        <member name="M:MimeKit.AttachmentCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.AttachmentCollection"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.AttachmentCollection"/>.
            </remarks>
        </member>
        <member name="M:MimeKit.AttachmentCollection.Add(MimeKit.MimePart)">
            <summary>
            Add the specified attachment.
            </summary>
            <remarks>
            Adds the specified <see cref="T:MimeKit.MimePart"/> as an attachment.
            </remarks>
            <param name="attachment">The attachment.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="attachment"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.AttachmentCollection.Clear">
            <summary>
            Clears the attachment collection.
            </summary>
            <remarks>
            Removes all attachments from the collection.
            </remarks>
        </member>
        <member name="M:MimeKit.AttachmentCollection.Contains(MimeKit.MimePart)">
            <summary>
            Checks if the collection contains the specified attachment.
            </summary>
            <remarks>
            Determines whether or not the collection contains the specified attachment.
            </remarks>
            <returns><value>true</value> if the specified attachment exists;
            otherwise <value>false</value>.</returns>
            <param name="attachment">The attachment.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="attachment"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.AttachmentCollection.CopyTo(MimeKit.MimePart[],System.Int32)">
            <summary>
            Copies all of the attachments in the collection to the specified array.
            </summary>
            <remarks>
            Copies all of the attachments within the <see cref="T:MimeKit.AttachmentCollection"/> into the array,
            starting at the specified array index.
            </remarks>
            <param name="array">The array to copy the attachments to.</param>
            <param name="arrayIndex">The index into the array.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.AttachmentCollection.Remove(MimeKit.MimePart)">
            <summary>
            Removes the specified attachment.
            </summary>
            <remarks>
            Removes the specified attachment.
            </remarks>
            <returns><value>true</value> if the attachment was removed; otherwise <value>false</value>.</returns>
            <param name="attachment">The attachment.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="attachment"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.AttachmentCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the list of attachments.
            </summary>
            <remarks>
            Gets an enumerator for the list of attachments.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MimeKit.AttachmentCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the list of attachments.
            </summary>
            <remarks>
            Gets an enumerator for the list of attachments.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:MimeKit.AttachmentCollection.Count">
            <summary>
            Gets the number of attachments currently in the collection.
            </summary>
            <remarks>
            Indicates the number of attachments in the collection.
            </remarks>
            <value>The number of attachments.</value>
        </member>
        <member name="P:MimeKit.AttachmentCollection.IsReadOnly">
            <summary>
            Gets whther or not the collection is read-only.
            </summary>
            <remarks>
            A <see cref="T:MimeKit.AttachmentCollection"/> is never read-only.
            </remarks>
            <value><c>true</c> if the collection is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MimeKit.BodyBuilder">
            <summary>
            A message body builder.
            </summary>
            <remarks>
            <see cref="T:MimeKit.BodyBuilder"/> is a helper class for building common MIME body structures.
            </remarks>
        </member>
        <member name="M:MimeKit.BodyBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.BodyBuilder"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.BodyBuilder"/>.
            </remarks>
        </member>
        <member name="M:MimeKit.BodyBuilder.ToMessageBody">
            <summary>
            Constructs the message body based on the text-based bodies, the linked resources, and the attachments.
            </summary>
            <remarks>
            Combines the <see cref="P:MimeKit.BodyBuilder.Attachments"/>, <see cref="P:MimeKit.BodyBuilder.LinkedResources"/>, <see cref="P:MimeKit.BodyBuilder.TextBody"/>,
            and <see cref="P:MimeKit.BodyBuilder.HtmlBody"/> into the proper MIME structure suitable for display in many common
            mail clients.
            </remarks>
            <returns>The message body.</returns>
        </member>
        <member name="P:MimeKit.BodyBuilder.Attachments">
            <summary>
            Gets the attachments.
            </summary>
            <remarks>
            Represents a collection of file attachments that will be included in the message.
            </remarks>
            <value>The attachments.</value>
        </member>
        <member name="P:MimeKit.BodyBuilder.LinkedResources">
            <summary>
            Gets the linked resources.
            </summary>
            <remarks>
            Linked resources are a special type of attachment which are linked to from the <see cref="P:MimeKit.BodyBuilder.HtmlBody"/>.
            </remarks>
            <value>The linked resources.</value>
        </member>
        <member name="P:MimeKit.BodyBuilder.TextBody">
            <summary>
            Gets or sets the text body.
            </summary>
            <remarks>
            Represents the plain-text formatted version of the message body.
            </remarks>
            <value>The text body.</value>
        </member>
        <member name="P:MimeKit.BodyBuilder.HtmlBody">
            <summary>
            Gets or sets the html body.
            </summary>
            <remarks>
            Represents the html formatted version of the message body and may link to any of the <see cref="P:MimeKit.BodyBuilder.LinkedResources"/>.
            </remarks>
            <value>The html body.</value>
        </member>
        <member name="T:MimeKit.ContentDisposition">
            <summary>
            A class representing a Content-Disposition header value.
            </summary>
            <remarks>
            The Content-Disposition header is a way for the originating client to
            suggest to the receiving client whether to present the part to the user
            as an attachment or as part of the content (inline).
            </remarks>
        </member>
        <member name="F:MimeKit.ContentDisposition.Attachment">
            <summary>
            The attachment disposition.
            </summary>
            <remarks>
            Indicates that the <see cref="T:MimeKit.MimePart"/> should be treated as an attachment.
            </remarks>
        </member>
        <member name="F:MimeKit.ContentDisposition.Inline">
            <summary>
            The inline disposition.
            </summary>
            <remarks>
            Indicates that the <see cref="T:MimeKit.MimePart"/> should be rendered inline.
            </remarks>
        </member>
        <member name="M:MimeKit.ContentDisposition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.ContentDisposition"/> class.
            </summary>
            <remarks>
            The disposition should either be <see cref="F:MimeKit.ContentDisposition.Attachment"/>
            or <see cref="F:MimeKit.ContentDisposition.Inline"/>.
            </remarks>
            <param name="disposition">The disposition.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="disposition"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="disposition"/> is not <c>"attachment"</c> or <c>"inline"</c>.
            </exception>
        </member>
        <member name="M:MimeKit.ContentDisposition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.ContentDisposition"/> class.
            </summary>
            <remarks>
            This is identical to <see cref="M:MimeKit.ContentDisposition.#ctor(System.String)"/> with a disposition
            value of <see cref="F:MimeKit.ContentDisposition.Attachment"/>.
            </remarks>
        </member>
        <member name="M:MimeKit.ContentDisposition.ToString(Portable.Text.Encoding,System.Boolean)">
            <summary>
            Serializes the <see cref="T:MimeKit.ContentDisposition"/> to a string,
            optionally encoding the parameters.
            </summary>
            <remarks>
            Creates a string-representation of the <see cref="T:MimeKit.ContentDisposition"/>,
            optionally encoding the parameters as they would be encoded for trabsport.
            </remarks>
            <returns>The serialized string.</returns>
            <param name="charset">The charset to be used when encoding the parameter values.</param>
            <param name="encode">If set to <c>true</c>, the parameter values will be encoded.</param>
        </member>
        <member name="M:MimeKit.ContentDisposition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current
            <see cref="T:MimeKit.ContentDisposition"/>.
            </summary>
            <remarks>
            Creates a string-representation of the <see cref="T:MimeKit.ContentDisposition"/>.
            </remarks>
            <returns>A <see cref="T:System.String"/> that represents the current
            <see cref="T:MimeKit.ContentDisposition"/>.</returns>
        </member>
        <member name="M:MimeKit.ContentDisposition.TryParse(MimeKit.ParserOptions,System.Byte[],System.Int32,System.Int32,MimeKit.ContentDisposition@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.ContentDisposition"/> instance.
            </summary>
            <remarks>
            Parses a Content-Disposition value from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
            <returns><c>true</c>, if the disposition was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes in the input buffer to parse.</param>
            <param name="disposition">The parsed disposition.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.ContentDisposition.TryParse(System.Byte[],System.Int32,System.Int32,MimeKit.ContentDisposition@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.ContentDisposition"/> instance.
            </summary>
            <remarks>
            Parses a Content-Disposition value from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
            <returns><c>true</c>, if the disposition was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes in the input buffer to parse.</param>
            <param name="disposition">The parsed disposition.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.ContentDisposition.TryParse(MimeKit.ParserOptions,System.Byte[],System.Int32,MimeKit.ContentDisposition@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.ContentDisposition"/> instance.
            </summary>
            <remarks>
            Parses a Content-Disposition value from the supplied buffer starting at the specified index.
            </remarks>
            <returns><c>true</c>, if the disposition was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="disposition">The parsed disposition.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.ContentDisposition.TryParse(System.Byte[],System.Int32,MimeKit.ContentDisposition@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.ContentDisposition"/> instance.
            </summary>
            <remarks>
            Parses a Content-Disposition value from the supplied buffer starting at the specified index.
            </remarks>
            <returns><c>true</c>, if the disposition was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="disposition">The parsed disposition.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.ContentDisposition.TryParse(MimeKit.ParserOptions,System.Byte[],MimeKit.ContentDisposition@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.ContentDisposition"/> instance.
            </summary>
            <remarks>
            Parses a Content-Disposition value from the specified buffer.
            </remarks>
            <returns><c>true</c>, if the disposition was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options.</param>
            <param name="buffer">The input buffer.</param>
            <param name="disposition">The parsed disposition.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.ContentDisposition.TryParse(System.Byte[],MimeKit.ContentDisposition@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.ContentDisposition"/> instance.
            </summary>
            <remarks>
            Parses a Content-Disposition value from the specified buffer.
            </remarks>
            <returns><c>true</c>, if the disposition was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="disposition">The parsed disposition.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.ContentDisposition.TryParse(System.String,MimeKit.ContentDisposition@)">
            <summary>
            Tries to parse the given text into a new <see cref="T:MimeKit.ContentDisposition"/> instance.
            </summary>
            <remarks>
            Parses a Content-Disposition value from the supplied text.
            </remarks>
            <returns><c>true</c>, if the disposition was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="text">The text to parse.</param>
            <param name="disposition">The parsed disposition.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.ContentDisposition.Parse(MimeKit.ParserOptions,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse the specified input buffer into a new instance of the <see cref="T:MimeKit.ContentDisposition"/> class.
            </summary>
            <remarks>
            Parses a Content-Disposition value from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.ContentDisposition"/>.</returns>
            <param name="options">The parser options.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The start index of the buffer.</param>
            <param name="length">The length of the buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            The <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.ContentDisposition.Parse(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse the specified input buffer into a new instance of the <see cref="T:MimeKit.ContentDisposition"/> class.
            </summary>
            <remarks>
            Parses a Content-Disposition value from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.ContentDisposition"/>.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The start index of the buffer.</param>
            <param name="length">The length of the buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            The <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.ContentDisposition.Parse(MimeKit.ParserOptions,System.Byte[],System.Int32)">
            <summary>
            Parse the specified input buffer into a new instance of the <see cref="T:MimeKit.ContentDisposition"/> class.
            </summary>
            <remarks>
            Parses a Content-Disposition value from the supplied buffer starting at the specified index.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.ContentDisposition"/>.</returns>
            <param name="options">The parser options.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The start index of the buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is out of range.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            The <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.ContentDisposition.Parse(System.Byte[],System.Int32)">
            <summary>
            Parse the specified input buffer into a new instance of the <see cref="T:MimeKit.ContentDisposition"/> class.
            </summary>
            <remarks>
            Parses a Content-Disposition value from the supplied buffer starting at the specified index.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.ContentDisposition"/>.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The start index of the buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is out of range.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            The <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.ContentDisposition.Parse(MimeKit.ParserOptions,System.Byte[])">
            <summary>
            Parse the specified input buffer into a new instance of the <see cref="T:MimeKit.ContentDisposition"/> class.
            </summary>
            <remarks>
            Parses a Content-Disposition value from the supplied buffer.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.ContentDisposition"/>.</returns>
            <param name="options">The parser options.</param>
            <param name="buffer">The input buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:MimeKit.ParseException">
            The <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.ContentDisposition.Parse(System.Byte[])">
            <summary>
            Parse the specified input buffer into a new instance of the <see cref="T:MimeKit.ContentDisposition"/> class.
            </summary>
            <remarks>
            Parses a Content-Disposition value from the supplied buffer.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.ContentDisposition"/>.</returns>
            <param name="buffer">The input buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            The <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.ContentDisposition.Parse(System.String)">
            <summary>
            Parse the specified text into a new instance of the <see cref="T:MimeKit.ContentDisposition"/> class.
            </summary>
            <remarks>
            Parses a Content-Disposition value from the specified text.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.ContentDisposition"/>.</returns>
            <param name="text">The input text.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            The <paramref name="text"/> could not be parsed.
            </exception>
        </member>
        <member name="P:MimeKit.ContentDisposition.Disposition">
            <summary>
            Gets or sets the disposition.
            </summary>
            <remarks>
            The disposition is typically either <c>"attachment"</c> or <c>"inline"</c>.
            </remarks>
            <value>The disposition.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is not <c>"attachment"</c> or <c>"inline"</c>.
            </exception>
        </member>
        <member name="P:MimeKit.ContentDisposition.IsAttachment">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:MimeKit.MimePart"/> is an attachment.
            </summary>
            <remarks>
            A convenience property to determine if the entity should be considered an attachment or not.
            </remarks>
            <value><c>true</c> if the <see cref="T:MimeKit.MimePart"/> is an attachment; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.ContentDisposition.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <remarks>
            In addition to specifying whether the entity should be treated as an
            attachment vs displayed inline, the Content-Disposition header may also
            contain parameters to provide further information to the receiving client
            such as the file attributes.
            </remarks>
            <value>The parameters.</value>
        </member>
        <member name="P:MimeKit.ContentDisposition.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <remarks>
            When set, this can provide a useful hint for a default file name for the
            content when the user decides to save it to disk.
            </remarks>
            <value>The name of the file.</value>
        </member>
        <member name="P:MimeKit.ContentDisposition.CreationDate">
            <summary>
            Gets or sets the creation-date parameter.
            </summary>
            <remarks>
            Refers to the date and time that the content file was created on the
            originating system. This parameter serves little purpose and is
            typically not used by mail clients.
            </remarks>
            <value>The creation date.</value>
        </member>
        <member name="P:MimeKit.ContentDisposition.ModificationDate">
            <summary>
            Gets or sets the modification-date parameter.
            </summary>
            <remarks>
            Refers to the date and time that the content file was last modified on
            the originating system. This parameter serves little purpose and is
            typically not used by mail clients.
            </remarks>
            <value>The modification date.</value>
        </member>
        <member name="P:MimeKit.ContentDisposition.ReadDate">
            <summary>
            Gets or sets the read-date parameter.
            </summary>
            <remarks>
            Refers to the date and time that the content file was last read on the
            originating system. This parameter serves little purpose and is typically
            not used by mail clients.
            </remarks>
            <value>The read date.</value>
        </member>
        <member name="P:MimeKit.ContentDisposition.Size">
            <summary>
            Gets or sets the size parameter.
            </summary>
            <remarks>
            When set, the size parameter typically refers to the original size of the
            content on disk. This parameter is rarely used by mail clients as it serves
            little purpose.
            </remarks>
            <value>The size.</value>
        </member>
        <member name="T:MimeKit.ContentEncoding">
            <summary>
            An enumeration of all supported content transfer encodings.
            <seealso cref="P:MimeKit.MimePart.ContentTransferEncoding"/>.
            </summary>
            <remarks>
            Some older mail software is unable to properly deal with
            data outside of the ASCII range, so it is sometimes
            necessary to encode the content of MIME entities.
            </remarks>
        </member>
        <member name="F:MimeKit.ContentEncoding.Default">
            <summary>
            The default encoding (aka no encoding at all).
            </summary>
        </member>
        <member name="F:MimeKit.ContentEncoding.SevenBit">
            <summary>
            The 7bit content transfer encoding.
            </summary>
            <remarks>
            This encoding should be restricted to textual content
            in the US-ASCII range.
            </remarks>
        </member>
        <member name="F:MimeKit.ContentEncoding.EightBit">
            <summary>
            The 8bit content transfer encoding.
            </summary>
            <remarks>
            This encoding should be restricted to textual content
            outside of the US-ASCII range but may not be supported
            by all transport services such as older SMTP servers
            that do not support the 8BITMIME extension.
            </remarks>
        </member>
        <member name="F:MimeKit.ContentEncoding.Binary">
            <summary>
            The binary content transfer encoding.
            </summary>
            <remarks>
            This encoding is simply unencoded binary data. Typically not
            supported by standard message transport services such as SMTP.
            </remarks>
        </member>
        <member name="F:MimeKit.ContentEncoding.Base64">
            <summary>
            The base64 content transfer encoding.
            <seealso cref="T:MimeKit.Encodings.Base64Encoder"/>.
            </summary>
            <remarks>
            This encoding is typically used for encoding binary data
            or textual content in a largely 8bit charset encoding and
            is supported by all message transport services.
            </remarks>
        </member>
        <member name="F:MimeKit.ContentEncoding.QuotedPrintable">
            <summary>
            The quoted printable content transfer encoding.
            <seealso cref="T:MimeKit.Encodings.QuotedPrintableEncoder"/>.
            </summary>
            <remarks>
            This encoding is used for textual content that is in a charset
            that has a minority of characters outside of the US-ASCII range
            (such as ISO-8859-1 and other single-byte charset encodings) and
            is supported by all message transport services.
            </remarks>
        </member>
        <member name="F:MimeKit.ContentEncoding.UUEncode">
            <summary>
            The uuencode content transfer encoding.
            <seealso cref="T:MimeKit.Encodings.UUEncoder"/>.
            </summary>
            <remarks>
            This is an obsolete encoding meant for encoding binary
            data and has largely been superceeded by <see cref="F:MimeKit.ContentEncoding.Base64"/>.
            </remarks>
        </member>
        <member name="T:MimeKit.ContentObject">
            <summary>
            Encapsulates a content stream used by <see cref="T:MimeKit.MimePart"/>.
            </summary>
            <remarks>
            A <see cref="T:MimeKit.ContentObject"/> represents the content of a <see cref="T:MimeKit.MimePart"/>.
            The content has both a stream and an encoding (typically <see cref="F:MimeKit.ContentEncoding.Default"/>).
            </remarks>
        </member>
        <member name="T:MimeKit.IContentObject">
            <summary>
            An interface for content stream encapsulation as used by <see cref="T:MimeKit.MimePart"/>.
            </summary>
            <remarks>
            Implemented by <see cref="T:MimeKit.ContentObject"/>.
            </remarks>
        </member>
        <member name="M:MimeKit.IContentObject.Open">
            <summary>
            Opens the decoded content stream.
            </summary>
            <remarks>
            Provides a means of reading the decoded content without having to first
            write it to another stream using <see cref="M:MimeKit.IContentObject.DecodeTo(System.IO.Stream)"/>.
            </remarks>
            <returns>The decoded content stream.</returns>
        </member>
        <member name="M:MimeKit.IContentObject.DecodeTo(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Decodes the content stream into another stream.
            </summary>
            <remarks>
            If the content stream is encoded, this method will decode it into the
            output stream using a suitable decoder.
            </remarks>
            <param name="stream">The output stream.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was cancelled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.IContentObject.DecodeTo(System.IO.Stream)">
            <summary>
            Decodes the content stream into another stream.
            </summary>
            <remarks>
            If the content stream is encoded, this method will decode it into the
            output stream using a suitable decoder.
            </remarks>
            <param name="stream">The output stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.IContentObject.WriteTo(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Copies the content stream to the specified output stream.
            </summary>
            <remarks>
            Copies the data from <see cref="T:System.IO.Stream"/> into <paramref name="stream"/>.
            </remarks>
            <param name="stream">The output stream.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was cancelled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.IContentObject.WriteTo(System.IO.Stream)">
            <summary>
            Copies the content stream to the specified output stream.
            </summary>
            <remarks>
            Copies the data from <see cref="T:System.IO.Stream"/> into <paramref name="stream"/>.
            </remarks>
            <param name="stream">The output stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="P:MimeKit.IContentObject.Encoding">
            <summary>
            Gets the content encoding.
            </summary>
            <remarks>
            If the <see cref="T:System.IO.Stream"/> is not encoded, this value will be
            <see cref="F:MimeKit.ContentEncoding.Default"/>. Otherwise, it will be
            set to the raw content encoding of the stream.
            </remarks>
            <value>The encoding.</value>
        </member>
        <member name="M:MimeKit.ContentObject.#ctor(System.IO.Stream,MimeKit.ContentEncoding)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.ContentObject"/> class.
            </summary>
            <remarks>
            When creating new <see cref="T:MimeKit.MimePart"/>s, the <paramref name="encoding"/>
            should typically be <see cref="F:MimeKit.ContentEncoding.Default"/> unless the
            <paramref name="stream"/> has already been encoded.
            </remarks>
            <param name="stream">The content stream.</param>
            <param name="encoding">The stream encoding.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="stream"/> does not support reading.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> does not support seeking.</para>
            </exception>
        </member>
        <member name="M:MimeKit.ContentObject.Open">
            <summary>
            Opens the decoded content stream.
            </summary>
            <remarks>
            Provides a means of reading the decoded content without having to first
            write it to another stream using <see cref="M:MimeKit.ContentObject.DecodeTo(System.IO.Stream)"/>.
            </remarks>
            <returns>The decoded content stream.</returns>
        </member>
        <member name="M:MimeKit.ContentObject.WriteTo(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Copies the content stream to the specified output stream.
            </summary>
            <remarks>
            This is equivalent to simply using <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)"/> to
            copy the content stream to the output stream except that this method is
            cancellable.
            </remarks>
            <param name="stream">The output stream.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.ContentObject.WriteTo(System.IO.Stream)">
            <summary>
            Copies the content stream to the specified output stream.
            </summary>
            <remarks>
            This is functionally equivalent to using <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)"/>
            to copy the raw content stream to the output stream.
            </remarks>
            <param name="stream">The output stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.ContentObject.DecodeTo(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Decodes the content stream into another stream.
            </summary>
            <remarks>
            Uses the <see cref="P:MimeKit.ContentObject.Encoding"/> to decode the content stream to the output stream.
            </remarks>
            <param name="stream">The output stream.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.ContentObject.DecodeTo(System.IO.Stream)">
            <summary>
            Decodes the content stream into another stream.
            </summary>
            <remarks>
            Uses the <see cref="P:MimeKit.ContentObject.Encoding"/> to decode the content stream to the output stream.
            </remarks>
            <param name="stream">The output stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="P:MimeKit.ContentObject.Encoding">
            <summary>
            Gets or sets the content encoding.
            </summary>
            <remarks>
            If the <see cref="T:MimeKit.MimePart"/> was parsed from an existing stream, the
            encoding will be identical to the <see cref="P:MimeKit.MimePart.ContentTransferEncoding"/>,
            otherwise it will typically be <see cref="F:MimeKit.ContentEncoding.Default"/>.
            </remarks>
            <value>The content encoding.</value>
        </member>
        <member name="T:MimeKit.ContentType">
            <summary>
            A class representing a Content-Type header value.
            </summary>
            <remarks>
            The Content-Type header is a way for the originating client to
            suggest to the receiving client the mime-type of the content and,
            depending on that mime-type, presentation options such as charset.
            </remarks>
        </member>
        <member name="M:MimeKit.ContentType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.ContentType"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.ContentType"/> based on the media type and subtype provided.
            </remarks>
            <param name="mediaType">Media type.</param>
            <param name="mediaSubtype">Media subtype.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="mediaType"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="mediaSubtype"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="mediaType"/> is empty or contains invalid characters.</para>
            <para>-or-</para>
            <para><paramref name="mediaSubtype"/> is empty or contains invalid characters.</para>
            </exception>
        </member>
        <member name="M:MimeKit.ContentType.Matches(System.String,System.String)">
            <summary>
            Checks if the this instance of <see cref="T:MimeKit.ContentType"/> matches
            the specified media type and subtype.
            </summary>
            <remarks>
            If the specified <paramref name="mediaType"/> or <paramref name="mediaSubtype"/>
            are <c>"*"</c>, they match anything.
            </remarks>
            <returns><c>true</c> if the <see cref="T:MimeKit.ContentType"/> matches the
            provided media type and subtype.</returns>
            <param name="mediaType">The media type.</param>
            <param name="mediaSubtype">The media subtype.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="mediaType"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="mediaSubtype"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.ContentType.ToString(Portable.Text.Encoding,System.Boolean)">
            <summary>
            Serializes the <see cref="T:MimeKit.ContentType"/> to a string,
            optionally encoding the parameters.
            </summary>
            <remarks>
            Creates a string-representation of the <see cref="T:MimeKit.ContentType"/>, optionally encoding
            the parameters as they would be encoded for transport.
            </remarks>
            <returns>The serialized string.</returns>
            <param name="charset">The charset to be used when encoding the parameter values.</param>
            <param name="encode">If set to <c>true</c>, the parameter values will be encoded.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="charset"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.ContentType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current
            <see cref="T:MimeKit.ContentType"/>.
            </summary>
            <remarks>
            Creates a string-representation of the <see cref="T:MimeKit.ContentType"/>.
            </remarks>
            <returns>A <see cref="T:System.String"/> that represents the current
            <see cref="T:MimeKit.ContentType"/>.</returns>
        </member>
        <member name="M:MimeKit.ContentType.TryParse(MimeKit.ParserOptions,System.Byte[],System.Int32,System.Int32,MimeKit.ContentType@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.ContentType"/> instance.
            </summary>
            <remarks>
            Parses a Content-Type value from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
            <returns><c>true</c>, if the content type was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes in the input buffer to parse.</param>
            <param name="type">The parsed content type.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.ContentType.TryParse(System.Byte[],System.Int32,System.Int32,MimeKit.ContentType@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.ContentType"/> instance.
            </summary>
            <remarks>
            Parses a Content-Type value from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
            <returns><c>true</c>, if the content type was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes in the input buffer to parse.</param>
            <param name="type">The parsed content type.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.ContentType.TryParse(MimeKit.ParserOptions,System.Byte[],System.Int32,MimeKit.ContentType@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.ContentType"/> instance.
            </summary>
            <remarks>
            Parses a Content-Type value from the supplied buffer starting at the specified index.
            </remarks>
            <returns><c>true</c>, if the content type was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="type">The parsed content type.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.ContentType.TryParse(System.Byte[],System.Int32,MimeKit.ContentType@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.ContentType"/> instance.
            </summary>
            <remarks>
            Parses a Content-Type value from the supplied buffer starting at the specified index.
            </remarks>
            <returns><c>true</c>, if the content type was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="type">The parsed content type.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.ContentType.TryParse(MimeKit.ParserOptions,System.Byte[],MimeKit.ContentType@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.ContentType"/> instance.
            </summary>
            <remarks>
            Parses a Content-Type value from the specified buffer.
            </remarks>
            <returns><c>true</c>, if the content type was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options.</param>
            <param name="buffer">The input buffer.</param>
            <param name="type">The parsed content type.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.ContentType.TryParse(System.Byte[],MimeKit.ContentType@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.ContentType"/> instance.
            </summary>
            <remarks>
            Parses a Content-Type value from the specified buffer.
            </remarks>
            <returns><c>true</c>, if the content type was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="type">The parsed content type.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.ContentType.TryParse(System.String,MimeKit.ContentType@)">
            <summary>
            Tries to parse the given text into a new <see cref="T:MimeKit.ContentType"/> instance.
            </summary>
            <remarks>
            Parses a Content-Type value from the specified text.
            </remarks>
            <returns><c>true</c>, if the content type was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="text">The text to parse.</param>
            <param name="type">The parsed content type.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.ContentType.Parse(MimeKit.ParserOptions,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse the specified input buffer into a new instance of the <see cref="T:MimeKit.ContentType"/> class.
            </summary>
            <remarks>
            Parses a Content-Type value from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.ContentType"/>.</returns>
            <param name="options">The parser options.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The start index of the buffer.</param>
            <param name="length">The length of the buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            The <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.ContentType.Parse(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse the specified input buffer into a new instance of the <see cref="T:MimeKit.ContentType"/> class.
            </summary>
            <remarks>
            Parses a Content-Type value from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.ContentType"/>.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The start index of the buffer.</param>
            <param name="length">The length of the buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            The <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.ContentType.Parse(MimeKit.ParserOptions,System.Byte[],System.Int32)">
            <summary>
            Parse the specified input buffer into a new instance of the <see cref="T:MimeKit.ContentType"/> class.
            </summary>
            <remarks>
            Parses a Content-Type value from the supplied buffer starting at the specified index.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.ContentType"/>.</returns>
            <param name="options">The parser options.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The start index of the buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is out of range.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            The <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.ContentType.Parse(System.Byte[],System.Int32)">
            <summary>
            Parse the specified input buffer into a new instance of the <see cref="T:MimeKit.ContentType"/> class.
            </summary>
            <remarks>
            Parses a Content-Type value from the supplied buffer starting at the specified index.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.ContentType"/>.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The start index of the buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is out of range.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            The <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.ContentType.Parse(MimeKit.ParserOptions,System.Byte[])">
            <summary>
            Parse the specified input buffer into a new instance of the <see cref="T:MimeKit.ContentType"/> class.
            </summary>
            <remarks>
            Parses a Content-Type value from the specified buffer.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.ContentType"/>.</returns>
            <param name="options">The parser options.</param>
            <param name="buffer">The input buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:MimeKit.ParseException">
            The <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.ContentType.Parse(System.Byte[])">
            <summary>
            Parse the specified input buffer into a new instance of the <see cref="T:MimeKit.ContentType"/> class.
            </summary>
            <remarks>
            Parses a Content-Type value from the specified buffer.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.ContentType"/>.</returns>
            <param name="buffer">The input buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            The <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.ContentType.Parse(System.String)">
            <summary>
            Parse the specified text into a new instance of the <see cref="T:MimeKit.ContentType"/> class.
            </summary>
            <remarks>
            Parses a Content-Type value from the specified text.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.ContentType"/>.</returns>
            <param name="text">The text.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            The <paramref name="text"/> could not be parsed.
            </exception>
        </member>
        <member name="P:MimeKit.ContentType.MediaType">
            <summary>
            Gets or sets the type of the media.
            </summary>
            <remarks>
            Represents the media type of the <see cref="T:MimeKit.MimeEntity"/>. Examples include
            <c>"text"</c>, <c>"image"</c>, and <c>"application"</c>. This string should
            always be treated as case-insensitive.
            </remarks>
            <value>The type of the media.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is empty or contains invalid characters.
            </exception>
        </member>
        <member name="P:MimeKit.ContentType.MediaSubtype">
            <summary>
            Gets or sets the media subtype.
            </summary>
            <remarks>
            Represents the media subtype of the <see cref="T:MimeKit.MimeEntity"/>. Examples include
            <c>"html"</c>, <c>"jpeg"</c>, and <c>"octet-stream"</c>. This string should
            always be treated as case-insensitive.
            </remarks>
            <value>The media subtype.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is empty or contains invalid characters.
            </exception>
        </member>
        <member name="P:MimeKit.ContentType.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <remarks>
            In addition to the media type and subtype, the Content-Type header may also
            contain parameters to provide further hints to the receiving client as to
            how to process or display the content.
            </remarks>
            <value>The parameters.</value>
        </member>
        <member name="P:MimeKit.ContentType.Boundary">
            <summary>
            Gets or sets the boundary parameter.
            </summary>
            <remarks>
            This is a special parameter on <see cref="T:MimeKit.Multipart"/> entities, designating to the
            parser a unique string that should be considered the boundary marker for each sub-part.
            </remarks>
            <value>The boundary.</value>
        </member>
        <member name="P:MimeKit.ContentType.Charset">
            <summary>
            Gets or sets the charset parameter.
            </summary>
            <remarks>
            Text-based <see cref="T:MimeKit.MimePart"/> entities will often include a charset parameter
            so that the receiving client can properly render the text.
            </remarks>
            <value>The charset.</value>
        </member>
        <member name="P:MimeKit.ContentType.Name">
            <summary>
            Gets or sets the name parameter.
            </summary>
            <remarks>
            The name parameter is a way for the originiating client to suggest
            to the receiving client a display-name for the content, which may
            be used by the receiving client if it cannot display the actual
            content to the user.
            </remarks>
            <value>The name.</value>
        </member>
        <member name="T:MimeKit.DomainList">
            <summary>
            A domain list.
            </summary>
            <remarks>
            Represents a list of domains, such as those that an email was routed through.
            </remarks>
        </member>
        <member name="M:MimeKit.DomainList.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.DomainList"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.DomainList"/> based on the domains provided.
            </remarks>
            <param name="domains">A domain list.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="domains"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.DomainList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.DomainList"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.DomainList"/>.
            </remarks>
        </member>
        <member name="M:MimeKit.DomainList.IndexOf(System.String)">
            <summary>
            Gets the index of the requested domain, if it exists.
            </summary>
            <remarks>
            Finds the index of the specified domain, if it exists.
            </remarks>
            <returns>The index of the requested domain; otherwise <value>-1</value>.</returns>
            <param name="domain">The domain.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="domain"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.DomainList.Insert(System.Int32,System.String)">
            <summary>
            Insert the domain at the specified index.
            </summary>
            <remarks>
            Inserts the domain at the specified index in the list.
            </remarks>
            <param name="index">The index to insert the domain.</param>
            <param name="domain">The domain to insert.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="domain"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.DomainList.RemoveAt(System.Int32)">
            <summary>
            Removes the domain at the specified index.
            </summary>
            <remarks>
            Removes the domain at the specified index.
            </remarks>
            <param name="index">The index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.DomainList.Add(System.String)">
            <summary>
            Add the specified domain.
            </summary>
            <remarks>
            Adds the specified domain to the end of the list.
            </remarks>
            <param name="domain">The domain.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="domain"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.DomainList.Clear">
            <summary>
            Clears the domain list.
            </summary>
            <remarks>
            Removes all of the domains in the list.
            </remarks>
        </member>
        <member name="M:MimeKit.DomainList.Contains(System.String)">
            <summary>
            Checks if the <see cref="T:MimeKit.DomainList"/> contains the specified domain.
            </summary>
            <remarks>
            Determines whether or not the domain list contains the specified domain.
            </remarks>
            <returns><value>true</value> if the specified domain is contained;
            otherwise <value>false</value>.</returns>
            <param name="domain">The domain.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="domain"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.DomainList.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies all of the domains in the <see cref="T:MimeKit.DomainList"/> to the specified array.
            </summary>
            <remarks>
            Copies all of the domains within the <see cref="T:MimeKit.DomainList"/> into the array,
            starting at the specified array index.
            </remarks>
            <param name="array">The array to copy the domains to.</param>
            <param name="arrayIndex">The index into the array.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.DomainList.Remove(System.String)">
            <summary>
            Removes the specified domain.
            </summary>
            <remarks>
            Removes the first instance of the specified domain from the list if it exists.
            </remarks>
            <returns><value>true</value> if the domain was removed; otherwise <value>false</value>.</returns>
            <param name="domain">The domain.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="domain"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.DomainList.GetEnumerator">
            <summary>
            Gets an enumerator for the list of domains.
            </summary>
            <remarks>
            Gets an enumerator for the list of domains.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MimeKit.DomainList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the list of domains.
            </summary>
            <remarks>
            Gets an enumerator for the list of domains.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MimeKit.DomainList.ToString">
            <summary>
            Returns a string representation of the list of domains.
            </summary>
            <remarks>
            <para>Each non-empty domain string will be prepended by an '@'.</para>
            <para>If there are multiple domains in the list, they will be separated by a comma.</para>
            </remarks>
            <returns>A string representing the <see cref="T:MimeKit.DomainList"/>.</returns>
        </member>
        <member name="M:MimeKit.DomainList.TryParse(System.Byte[],System.Int32@,System.Int32,System.Boolean,MimeKit.DomainList@)">
            <summary>
            Parses a list of domains.
            </summary>
            <remarks>
            Attempts to parse a <see cref="T:MimeKit.DomainList"/> from the text buffer starting at the
            specified index. The index will only be updated if a <see cref="T:MimeKit.DomainList"/> was
            successfully parsed.
            </remarks>
            <returns><c>true</c> if a <see cref="T:MimeKit.DomainList"/> was successfully parsed;
            <c>false</c> otherwise.</returns>
            <param name="text">The text buffer to parse.</param>
            <param name="index">The index to start parsing.</param>
            <param name="endIndex">An index of the end of the input.</param>
            <param name="throwOnError">A flag indicating whether or not an
            exception should be thrown on error.</param>
            <param name="route">The parsed DomainList.</param>
        </member>
        <member name="P:MimeKit.DomainList.Item(System.Int32)">
            <summary>
            Gets or sets the domain at the specified index.
            </summary>
            <remarks>
            Gets or sets the domain at the specified index.
            </remarks>
            <value>The domain at the specified index.</value>
            <param name="index">The index.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="P:MimeKit.DomainList.Count">
            <summary>
            Gets the number of domains in the <see cref="T:MimeKit.DomainList"/>.
            </summary>
            <remarks>
            Indicates the number of domains in the list.
            </remarks>
            <value>The number of domains.</value>
        </member>
        <member name="P:MimeKit.DomainList.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <remarks>
            A <see cref="T:MimeKit.DomainList"/> is never read-only.
            </remarks>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MimeKit.EncodingConstraint">
            <summary>
            A content encoding constraint.
            </summary>
            <remarks>
            Not all message transports support binary or 8-bit data, so it becomes
            necessary to constrain the content encoding to a subset of the possible
            Content-Transfer-Encoding values.
            </remarks>
        </member>
        <member name="F:MimeKit.EncodingConstraint.None">
            <summary>
            There are no encoding constraints, the content may contain any byte.
            </summary>
        </member>
        <member name="F:MimeKit.EncodingConstraint.EightBit">
            <summary>
            The content may contain bytes with the high bit set, but must not contain any zero-bytes.
            </summary>
        </member>
        <member name="F:MimeKit.EncodingConstraint.SevenBit">
            <summary>
            The content may only contain bytes within the 7-bit ASCII range.
            </summary>
        </member>
        <member name="T:MimeKit.NewLineFormat">
            <summary>
            A New-Line format.
            </summary>
            <remarks>
            There are two commonly used line-endings used by modern Operating Systems.
            Unix-based systems such as Linux and Mac OS use a single character (<c>'\n'</c> aka LF)
            to represent the end of line where-as Windows (or DOS) uses a sequence of two
            characters (<c>"\r\n"</c> aka CRLF). Most text-based network protocols such as SMTP,
            POP3, and IMAP use the CRLF sequence as well.
            </remarks>
        </member>
        <member name="F:MimeKit.NewLineFormat.Unix">
            <summary>
            The Unix New-Line format (<c>"\n"</c>).
            </summary>
        </member>
        <member name="F:MimeKit.NewLineFormat.Dos">
            <summary>
            The DOS New-Line format (<c>"\r\n"</c>).
            </summary>
        </member>
        <member name="T:MimeKit.FormatOptions">
            <summary>
            Format options for serializing various MimeKit objects.
            </summary>
            <remarks>
            Represents the available options for formatting MIME messages
            and entities when writing them to a stream.
            </remarks>
        </member>
        <member name="F:MimeKit.FormatOptions.Default">
            <summary>
            The default formatting options.
            </summary>
            <remarks>
            If a custom <see cref="T:MimeKit.FormatOptions"/> is not passed to methods such as
            <see cref="M:MimeKit.MimeMessage.WriteTo(MimeKit.FormatOptions,System.IO.Stream)"/>, the default options
            will be used.
            </remarks>
        </member>
        <member name="M:MimeKit.FormatOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.FormatOptions"/> class.
            </summary>
            <remarks>
            Creates a new set of formatting options for use with methods such as
            <see cref="M:MimeKit.MimeMessage.WriteTo(System.IO.Stream)"/>.
            </remarks>
        </member>
        <member name="M:MimeKit.FormatOptions.Clone">
            <summary>
            Clones an instance of <see cref="T:MimeKit.FormatOptions"/>.
            </summary>
            <remarks>
            Clones the formatting options.
            </remarks>
            <returns>An exact copy of the <see cref="T:MimeKit.FormatOptions"/>.</returns>
        </member>
        <member name="P:MimeKit.FormatOptions.MaxLineLength">
            <summary>
            Gets or sets the maximum line length used by the encoders. The encoders
            use this value to determine where to place line breaks.
            </summary>
            <remarks>
            Specifies the maximum line length to use when line-wrapping headers.
            </remarks>
            <value>The maximum line length.</value>
        </member>
        <member name="P:MimeKit.FormatOptions.NewLineFormat">
            <summary>
            Gets or sets the new-line format.
            </summary>
            <remarks>
            Specifies the new-line encoding to use when writing the message
            or entity to a stream.
            </remarks>
            <value>The new-line format.</value>
        </member>
        <member name="P:MimeKit.FormatOptions.HiddenHeaders">
            <summary>
            Gets the message headers that should be hidden.
            </summary>
            <remarks>
            <para>Specifies the set of headers that should be removed when
            writing a <see cref="T:MimeKit.MimeMessage"/> to a stream.</para>
            <para>This is primarily meant for the purposes of removing Bcc
            and Resent-Bcc headers when sending via a transport such as
            SMTP.</para>
            </remarks>
            <value>The message headers.</value>
        </member>
        <member name="T:MimeKit.GroupAddress">
            <summary>
            An address group, as specified by rfc0822.
            </summary>
            <remarks>
            Group addresses are rarely used anymore. Typically, if you see a group address,
            it will be of the form: <c>"undisclosed-recipients: ;"</c>.
            </remarks>
        </member>
        <member name="T:MimeKit.InternetAddress">
            <summary>
            An internet address, as specified by rfc0822.
            </summary>
            <remarks>
            <para>A <see cref="T:MimeKit.InternetAddress"/> can be any type of address defined by the
            original Internet Message specification.</para>
            <para>There are effectively two (2) types of addresses: mailboxes and groups.</para>
            <para>Mailbox addresses are what are most commonly known as email addresses and are
            represented by the <see cref="T:MimeKit.MailboxAddress"/> class.</para>
            <para>Group addresses are themselves lists of addresses and are represented by the
            <see cref="T:MimeKit.GroupAddress"/> class. While rare, it is still important to handle these
            types of addresses. They typically only contain mailbox addresses, but may also
            contain other group addresses.</para>
            </remarks>
        </member>
        <member name="M:MimeKit.InternetAddress.#ctor(Portable.Text.Encoding,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.InternetAddress"/> class.
            </summary>
            <remarks>
            Initializes the <see cref="P:MimeKit.InternetAddress.Encoding"/> and <see cref="P:MimeKit.InternetAddress.Name"/> properties of the internet address.
            </remarks>
            <param name="encoding">The character encoding to be used for encoding the name.</param>
            <param name="name">The name of the mailbox or group.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="encoding"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddress.ToString(System.Boolean)">
            <summary>
            Returns a string representation of the <see cref="T:MimeKit.InternetAddress"/>,
            optionally encoding it for transport.
            </summary>
            <remarks>
            <para>If the <paramref name="encode"/> parameter is <c>true</c>, then this method will return
            an encoded version of the internet address according to the rules described in rfc2047.</para>
            <para>However, if the <paramref name="encode"/> parameter is <c>false</c>, then this method will
            return a string suitable only for display purposes.</para>
            </remarks>
            <returns>A string representing the <see cref="T:MimeKit.InternetAddress"/>.</returns>
            <param name="encode">If set to <c>true</c>, the <see cref="T:MimeKit.InternetAddress"/> will be encoded.</param>
        </member>
        <member name="M:MimeKit.InternetAddress.ToString">
            <summary>
            Returns a string representation of a <see cref="T:MimeKit.InternetAddress"/> suitable for display.
            </summary>
            <remarks>
            The string returned by this method is suitable only for display purposes.
            </remarks>
            <returns>A string representing the <see cref="T:MimeKit.InternetAddress"/>.</returns>
        </member>
        <member name="M:MimeKit.InternetAddress.OnChanged">
            <summary>
            Raises the internal changed event used by <see cref="T:MimeKit.MimeMessage"/> to keep headers in sync.
            </summary>
            <remarks>
            This method is called whenever a property of the internet address is changed.
            </remarks>
        </member>
        <member name="M:MimeKit.InternetAddress.TryParse(MimeKit.ParserOptions,System.Byte[],System.Int32,System.Int32,MimeKit.InternetAddress@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.InternetAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/> or <see cref="T:MimeKit.GroupAddress"/>. If the buffer contains
            more data, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options to use.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes in the input buffer to parse.</param>
            <param name="address">The parsed address.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddress.TryParse(System.Byte[],System.Int32,System.Int32,MimeKit.InternetAddress@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.InternetAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/> or <see cref="T:MimeKit.GroupAddress"/>. If the buffer contains
            more data, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes in the input buffer to parse.</param>
            <param name="address">The parsed address.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddress.TryParse(MimeKit.ParserOptions,System.Byte[],System.Int32,MimeKit.InternetAddress@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.InternetAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/> or <see cref="T:MimeKit.GroupAddress"/>. If the buffer contains
            more data, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options to use.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="address">The parsed address.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddress.TryParse(System.Byte[],System.Int32,MimeKit.InternetAddress@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.InternetAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/> or <see cref="T:MimeKit.GroupAddress"/>. If the buffer contains
            more data, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="address">The parsed address.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddress.TryParse(MimeKit.ParserOptions,System.Byte[],MimeKit.InternetAddress@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.InternetAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/> or <see cref="T:MimeKit.GroupAddress"/>. If the buffer contains
            more data, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options to use.</param>
            <param name="buffer">The input buffer.</param>
            <param name="address">The parsed address.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddress.TryParse(System.Byte[],MimeKit.InternetAddress@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.InternetAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/> or <see cref="T:MimeKit.GroupAddress"/>. If the buffer contains
            more data, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="address">The parsed address.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddress.TryParse(MimeKit.ParserOptions,System.String,MimeKit.InternetAddress@)">
            <summary>
            Tries to parse the given text into a new <see cref="T:MimeKit.InternetAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/> or <see cref="T:MimeKit.GroupAddress"/>. If the text contains
            more data, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options to use.</param>
            <param name="text">The text.</param>
            <param name="address">The parsed address.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddress.TryParse(System.String,MimeKit.InternetAddress@)">
            <summary>
            Tries to parse the given text into a new <see cref="T:MimeKit.InternetAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/> or <see cref="T:MimeKit.GroupAddress"/>. If the text contains
            more data, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="text">The text.</param>
            <param name="address">The parsed address.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddress.Parse(MimeKit.ParserOptions,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the given input buffer into a new <see cref="T:MimeKit.InternetAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/> or <see cref="T:MimeKit.GroupAddress"/>. If the buffer contains
            more data, then parsing will fail.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.InternetAddress"/>.</returns>
            <param name="options">The parser options to use.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes in the input buffer to parse.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddress.Parse(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the given input buffer into a new <see cref="T:MimeKit.InternetAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/> or <see cref="T:MimeKit.GroupAddress"/>. If the buffer contains
            more data, then parsing will fail.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.InternetAddress"/>.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes in the input buffer to parse.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddress.Parse(MimeKit.ParserOptions,System.Byte[],System.Int32)">
            <summary>
            Parses the given input buffer into a new <see cref="T:MimeKit.InternetAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/> or <see cref="T:MimeKit.GroupAddress"/>. If the buffer contains
            more data, then parsing will fail.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.InternetAddress"/>.</returns>
            <param name="options">The parser options to use.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/>is out of range.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddress.Parse(System.Byte[],System.Int32)">
            <summary>
            Parses the given input buffer into a new <see cref="T:MimeKit.InternetAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/> or <see cref="T:MimeKit.GroupAddress"/>. If the buffer contains
            more data, then parsing will fail.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.InternetAddress"/>.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is out of range.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddress.Parse(MimeKit.ParserOptions,System.Byte[])">
            <summary>
            Parses the given input buffer into a new <see cref="T:MimeKit.InternetAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/> or <see cref="T:MimeKit.GroupAddress"/>. If the buffer contains
            more data, then parsing will fail.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.InternetAddress"/>.</returns>
            <param name="options">The parser options to use.</param>
            <param name="buffer">The input buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:MimeKit.ParseException">
            <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddress.Parse(System.Byte[])">
            <summary>
            Parses the given input buffer into a new <see cref="T:MimeKit.InternetAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/> or <see cref="T:MimeKit.GroupAddress"/>. If the buffer contains
            more data, then parsing will fail.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.InternetAddress"/>.</returns>
            <param name="buffer">The input buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddress.Parse(MimeKit.ParserOptions,System.String)">
            <summary>
            Parses the given text into a new <see cref="T:MimeKit.InternetAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/> or <see cref="T:MimeKit.GroupAddress"/>. If the text contains
            more data, then parsing will fail.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.InternetAddress"/>.</returns>
            <param name="options">The parser options to use.</param>
            <param name="text">The text.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="text"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:MimeKit.ParseException">
            <paramref name="text"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddress.Parse(System.String)">
            <summary>
            Parses the given text into a new <see cref="T:MimeKit.InternetAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/> or <see cref="T:MimeKit.GroupAddress"/>. If the text contains
            more data, then parsing will fail.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.InternetAddress"/>.</returns>
            <param name="text">The text.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            <paramref name="text"/> could not be parsed.
            </exception>
        </member>
        <member name="P:MimeKit.InternetAddress.Encoding">
            <summary>
            Gets or sets the character encoding to use when encoding the name of the address.
            </summary>
            <remarks>
            The character encoding is used to convert the <see cref="P:MimeKit.InternetAddress.Name"/> property, if it is set,
            to a stream of bytes when encoding the internet address for transport.
            </remarks>
            <value>The character encoding.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:MimeKit.InternetAddress.Name">
            <summary>
            Gets or sets the display name of the address.
            </summary>
            <remarks>
            A name is optional and is typically set to the name of the person
            or group that own the internet address.
            </remarks>
            <value>The name of the address.</value>
        </member>
        <member name="M:MimeKit.GroupAddress.#ctor(Portable.Text.Encoding,System.String,System.Collections.Generic.IEnumerable{MimeKit.InternetAddress})">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.GroupAddress"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.GroupAddress"/> with the specified name and list of addresses. The
            specified text encoding is used when encoding the name according to the rules of rfc2047.
            </remarks>
            <param name="encoding">The character encoding to be used for encoding the name.</param>
            <param name="name">The name of the group.</param>
            <param name="addresses">A list of addresses.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="encoding"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.GroupAddress.#ctor(System.String,System.Collections.Generic.IEnumerable{MimeKit.InternetAddress})">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.GroupAddress"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.GroupAddress"/> with the specified name and list of addresses.
            </remarks>
            <param name="name">The name of the group.</param>
            <param name="addresses">A list of addresses.</param>
        </member>
        <member name="M:MimeKit.GroupAddress.#ctor(Portable.Text.Encoding,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.GroupAddress"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.GroupAddress"/> with the specified name. The specified
            text encoding is used when encoding the name according to the rules of rfc2047.
            </remarks>
            <param name="encoding">The character encoding to be used for encoding the name.</param>
            <param name="name">The name of the group.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="encoding"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.GroupAddress.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.GroupAddress"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.GroupAddress"/> with the specified name.
            </remarks>
            <param name="name">The name of the group.</param>
        </member>
        <member name="M:MimeKit.GroupAddress.ToString(System.Boolean)">
            <summary>
            Returns a string representation of the <see cref="T:MimeKit.GroupAddress"/>,
            optionally encoding it for transport.
            </summary>
            <remarks>
            Returns a string containing the formatted group of addresses. If the <paramref name="encode"/>
            parameter is <c>true</c>, then the name of the group and all member addresses will be encoded
            according to the rules defined in rfc2047, otherwise the names will not be encoded at all and
            will therefor only be suitable for display purposes.
            </remarks>
            <returns>A string representing the <see cref="T:MimeKit.GroupAddress"/>.</returns>
            <param name="encode">If set to <c>true</c>, the <see cref="T:MimeKit.GroupAddress"/> will be encoded.</param>
        </member>
        <member name="M:MimeKit.GroupAddress.Equals(MimeKit.GroupAddress)">
            <summary>
            Determines whether the specified <see cref="T:MimeKit.GroupAddress"/> is equal to the current <see cref="T:MimeKit.GroupAddress"/>.
            </summary>
            <remarks>
            Compares two group addresses to determine if they are identical or not.
            </remarks>
            <param name="other">The <see cref="T:MimeKit.GroupAddress"/> to compare with the current <see cref="T:MimeKit.GroupAddress"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:MimeKit.GroupAddress"/> is equal to the current
            <see cref="T:MimeKit.GroupAddress"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MimeKit.GroupAddress.TryParse(MimeKit.ParserOptions,System.Byte[],System.Int32,System.Int32,MimeKit.GroupAddress@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.GroupAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.GroupAddress"/>. If the the address is not a group address or
            there is more than a single group address, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options to use.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes in the input buffer to parse.</param>
            <param name="group">The parsed group address.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.GroupAddress.TryParse(System.Byte[],System.Int32,System.Int32,MimeKit.GroupAddress@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.GroupAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.GroupAddress"/>. If the the address is not a group address or
            there is more than a single group address, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes in the input buffer to parse.</param>
            <param name="group">The parsed group address.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.GroupAddress.TryParse(MimeKit.ParserOptions,System.Byte[],System.Int32,MimeKit.GroupAddress@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.GroupAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.GroupAddress"/>. If the the address is not a group address or
            there is more than a single group address, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options to use.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="group">The parsed group address.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.GroupAddress.TryParse(System.Byte[],System.Int32,MimeKit.GroupAddress@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.GroupAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.GroupAddress"/>. If the the address is not a group address or
            there is more than a single group address, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="group">The parsed group address.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.GroupAddress.TryParse(MimeKit.ParserOptions,System.Byte[],MimeKit.GroupAddress@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.GroupAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.GroupAddress"/>. If the the address is not a group address or
            there is more than a single group address, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options to use.</param>
            <param name="buffer">The input buffer.</param>
            <param name="group">The parsed group address.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.GroupAddress.TryParse(System.Byte[],MimeKit.GroupAddress@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.GroupAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.GroupAddress"/>. If the the address is not a group address or
            there is more than a single group address, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="group">The parsed group address.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.GroupAddress.TryParse(MimeKit.ParserOptions,System.String,MimeKit.GroupAddress@)">
            <summary>
            Tries to parse the given text into a new <see cref="T:MimeKit.GroupAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.GroupAddress"/>. If the the address is not a group address or
            there is more than a single group address, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options to use.</param>
            <param name="text">The text.</param>
            <param name="group">The parsed group address.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.GroupAddress.TryParse(System.String,MimeKit.GroupAddress@)">
            <summary>
            Tries to parse the given text into a new <see cref="T:MimeKit.GroupAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.GroupAddress"/>. If the the address is not a group address or
            there is more than a single group address, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="text">The text.</param>
            <param name="group">The parsed group address.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:MimeKit.GroupAddress.Members">
            <summary>
            Gets the members of the group.
            </summary>
            <remarks>
            Represents the member addresses of the group. Typically the member addresses
            will be of the <see cref="T:MimeKit.MailboxAddress"/> variety, but it is possible
            for groups to contain other groups.
            </remarks>
            <value>The list of members.</value>
        </member>
        <member name="T:MimeKit.Header">
            <summary>
            A class representing a Message or MIME header.
            </summary>
            <remarks>
            Represents a single header field and value pair.
            </remarks>
        </member>
        <member name="M:MimeKit.Header.#ctor(Portable.Text.Encoding,MimeKit.HeaderId,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Header"/> class.
            </summary>
            <remarks>
            Creates a new message or entity header for the specified field and
            value pair. The encoding is used to determine which charset to use
            when encoding the value according to the rules of rfc2047.
            </remarks>
            <param name="charset">The charset that should be used to encode the
            header value.</param>
            <param name="id">The header identifier.</param>
            <param name="value">The value of the header.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="charset"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not a valid <see cref="T:MimeKit.HeaderId"/>.
            </exception>
        </member>
        <member name="M:MimeKit.Header.#ctor(MimeKit.HeaderId,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Header"/> class.
            </summary>
            <remarks>
            Creates a new message or entity header for the specified field and
            value pair.
            </remarks>
            <param name="id">The header identifier.</param>
            <param name="value">The value of the header.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not a valid <see cref="T:MimeKit.HeaderId"/>.
            </exception>
        </member>
        <member name="M:MimeKit.Header.#ctor(Portable.Text.Encoding,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Header"/> class.
            </summary>
            <remarks>
            Creates a new message or entity header for the specified field and
            value pair. The encoding is used to determine which charset to use
            when encoding the value according to the rules of rfc2047.
            </remarks>
            <param name="charset">The charset that should be used to encode the
            header value.</param>
            <param name="field">The name of the header field.</param>
            <param name="value">The value of the header.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="charset"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="field"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="field"/> contains illegal characters.
            </exception>
        </member>
        <member name="M:MimeKit.Header.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Header"/> class.
            </summary>
            <remarks>
            Creates a new message or entity header for the specified field and
            value pair.
            </remarks>
            <param name="field">The name of the header field.</param>
            <param name="value">The value of the header.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="field"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="field"/> contains illegal characters.
            </exception>
        </member>
        <member name="M:MimeKit.Header.GetValue(Portable.Text.Encoding)">
            <summary>
            Gets the header value using the specified charset.
            </summary>
            <remarks>
            <para>If the raw header value does not properly encode non-ASCII text, the decoder
            will fall back to a default charset encoding. Sometimes, however, this
            default charset fallback is wrong and the mail client may wish to override
            that default charset on a per-header basis.</para>
            <para>By using this method, the client is able to override the fallback charset
            on a per-header basis.</para>
            </remarks>
            <returns>The value.</returns>
            <param name="charset">Charset.</param>
        </member>
        <member name="M:MimeKit.Header.SetValue(Portable.Text.Encoding,System.String)">
            <summary>
            Sets the header value using the specified charset.
            </summary>
            <remarks>
            When a particular charset is desired for encoding the header value
            according to the rules of rfc2047, this method should be used
            instead of the <see cref="P:MimeKit.Header.Value"/> setter.
            </remarks>
            <param name="charset">A charset encoding.</param>
            <param name="value">The header value.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="charset"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Header.ToString">
            <summary>
            Returns a string representation of the header.
            </summary>
            <remarks>
            Formats the header field and value in a way that is suitable for display.
            </remarks>
            <returns>A string representing the <see cref="T:MimeKit.Header"/>.</returns>
        </member>
        <member name="M:MimeKit.Header.Unfold(System.String)">
            <summary>
            Unfold the specified header value.
            </summary>
            <remarks>
            Unfolds the header value so that it becomes suitable for display.
            Since <see cref="P:MimeKit.Header.Value"/> is already unfolded, this method is really
            only needed when working with raw header strings.
            </remarks>
            <returns>The unfolded header value.</returns>
            <param name="text">The header text.</param>
        </member>
        <member name="M:MimeKit.Header.TryParse(MimeKit.ParserOptions,System.Byte[],System.Int32,System.Int32,MimeKit.Header@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.Header"/> instance.
            </summary>
            <remarks>
            Parses a header from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
            <returns><c>true</c>, if the header was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options to use.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes in the input buffer to parse.</param>
            <param name="header">The parsed header.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.Header.TryParse(System.Byte[],System.Int32,System.Int32,MimeKit.Header@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.Header"/> instance.
            </summary>
            <remarks>
            Parses a header from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
            <returns><c>true</c>, if the header was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes in the input buffer to parse.</param>
            <param name="header">The parsed header.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.Header.TryParse(MimeKit.ParserOptions,System.Byte[],System.Int32,MimeKit.Header@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.Header"/> instance.
            </summary>
            <remarks>
            Parses a header from the supplied buffer starting at the specified index.
            </remarks>
            <returns><c>true</c>, if the header was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options to use.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="header">The parsed header.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.Header.TryParse(System.Byte[],System.Int32,MimeKit.Header@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.Header"/> instance.
            </summary>
            <remarks>
            Parses a header from the supplied buffer starting at the specified index.
            </remarks>
            <returns><c>true</c>, if the header was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="header">The parsed header.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.Header.TryParse(MimeKit.ParserOptions,System.Byte[],MimeKit.Header@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.Header"/> instance.
            </summary>
            <remarks>
            Parses a header from the specified buffer.
            </remarks>
            <returns><c>true</c>, if the header was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options to use.</param>
            <param name="buffer">The input buffer.</param>
            <param name="header">The parsed header.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Header.TryParse(System.Byte[],MimeKit.Header@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.Header"/> instance.
            </summary>
            <remarks>
            Parses a header from the specified buffer.
            </remarks>
            <returns><c>true</c>, if the header was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="header">The parsed header.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.Header.TryParse(MimeKit.ParserOptions,System.String,MimeKit.Header@)">
            <summary>
            Tries to parse the given text into a new <see cref="T:MimeKit.Header"/> instance.
            </summary>
            <remarks>
            Parses a header from the specified text.
            </remarks>
            <returns><c>true</c>, if the header was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options to use.</param>
            <param name="text">The text to parse.</param>
            <param name="header">The parsed header.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="text"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.Header.TryParse(System.String,MimeKit.Header@)">
            <summary>
            Tries to parse the given text into a new <see cref="T:MimeKit.Header"/> instance.
            </summary>
            <remarks>
            Parses a header from the specified text.
            </remarks>
            <returns><c>true</c>, if the header was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="text">The text to parse.</param>
            <param name="header">The parsed header.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:MimeKit.Header.Offset">
            <summary>
            Gets the stream offset of the beginning of the header.
            </summary>
            <remarks>
            If the offset is set, it refers to the byte offset where it
            was found in the stream it was parsed from.
            </remarks>
            <value>The stream offset.</value>
        </member>
        <member name="P:MimeKit.Header.Field">
            <summary>
            Gets the name of the header field.
            </summary>
            <remarks>
            Represents the field name of the header.
            </remarks>
            <value>The name of the header field.</value>
        </member>
        <member name="P:MimeKit.Header.Id">
            <summary>
            Gets the header identifier.
            </summary>
            <remarks>
            This property is mainly used for switch-statements for performance reasons.
            </remarks>
            <value>The header identifier.</value>
        </member>
        <member name="P:MimeKit.Header.RawValue">
            <summary>
            Gets the raw value of the header.
            </summary>
            <remarks>
            Contains the raw value of the header, before any decoding or charset conversion.
            </remarks>
            <value>The raw value of the header.</value>
        </member>
        <member name="P:MimeKit.Header.Value">
            <summary>
            Gets or sets the header value.
            </summary>
            <remarks>
            Represents the decoded header value and is suitable for displaying to the user.
            </remarks>
            <value>The header value.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:MimeKit.HeaderId">
            <summary>
            An enumeration of common header fields.
            </summary>
            <remarks>
            Comparing enum  values is not only faster, but less error prone than
            comparing strings.
            </remarks>
        </member>
        <member name="F:MimeKit.HeaderId.AdHoc">
            <summary>
            The Ad-Hoc header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ApparentlyTo">
            <summary>
            The Apparently-To header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Approved">
            <summary>
            The Approved header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Article">
            <summary>
            The Article header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Bcc">
            <summary>
            The Bcc header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Bytes">
            <summary>
            The Bytes header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Cc">
            <summary>
            The Cc header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Comments">
            <summary>
            The Comments header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ContentBase">
            <summary>
            The Content-Base header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ContentClass">
            <summary>
            The Content-Class header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ContentDescription">
            <summary>
            The Content-Description header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ContentDisposition">
            <summary>
            The Content-Disposition header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ContentDuration">
            <summary>
            The Content-Duration header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ContentId">
            <summary>
            The Content-Id header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ContentLanguage">
            <summary>
            The Content-Language header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ContentLength">
            <summary>
            The Content-Length header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ContentLocation">
            <summary>
            The Content-Location header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ContentMd5">
            <summary>
            The Content-Md5 header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ContentTransferEncoding">
            <summary>
            The Content-Transfer-Encoding header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ContentType">
            <summary>
            The Content-Type header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Control">
            <summary>
            The Control header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Date">
            <summary>
            The Date header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.DeferredDelivery">
            <summary>
            The Deferred-Delivery header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.DispositionNotificationTo">
            <summary>
            The Disposition-Notification-To header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Distribution">
            <summary>
            The Distribution header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Encoding">
            <summary>
            The Encoding header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Encrypted">
            <summary>
            The Encrypted header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Expires">
            <summary>
            The Expires header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ExpiryDate">
            <summary>
            The Expiry-Date header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.FollowUpTo">
            <summary>
            The Followup-To header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.From">
            <summary>
            The From header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Importance">
            <summary>
            The Importance header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.InReplyTo">
            <summary>
            The In-Reply-To header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Keywords">
            <summary>
            The Keywords header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Lines">
            <summary>
            The Lines header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ListHelp">
            <summary>
            The List-Help header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ListSubscribe">
            <summary>
            The List-Subscribe header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ListUnsubscribe">
            <summary>
            The List-Unsubscribe header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.MessageId">
            <summary>
            The Message-Id header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.MimeVersion">
            <summary>
            The MIME-Version header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.NewsGroups">
            <summary>
            The News-Groups header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.NntpPostingHost">
            <summary>
            The Nntp-Posting-Host header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Organization">
            <summary>
            The Organization header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Path">
            <summary>
            The Path header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Precedence">
            <summary>
            The Precedence header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Priority">
            <summary>
            The Priority header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Received">
            <summary>
            The Received header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.References">
            <summary>
            The References header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ReplyBy">
            <summary>
            The Reply-By header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ReplyTo">
            <summary>
            The Reply-To header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ResentBcc">
            <summary>
            The Resent-Bcc header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ResentCc">
            <summary>
            The Resent-Cc header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ResentDate">
            <summary>
            The Resent-Date header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ResentFrom">
            <summary>
            The Resent-From header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ResentMessageId">
            <summary>
            The Resent-Message-Id header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ResentReplyTo">
            <summary>
            The Resent-Reply-To header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ResentSender">
            <summary>
            The Resent-Sender header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ResentTo">
            <summary>
            The Resent-To header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ReturnPath">
            <summary>
            The Return-Path header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.ReturnReceiptTo">
            <summary>
            The Return-Receipt-To header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Sender">
            <summary>
            The Sender header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Sensitivity">
            <summary>
            The Sensitivity header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Subject">
            <summary>
            The Subject header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Summary">
            <summary>
            The Summary header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Supercedes">
            <summary>
            The Supercedes header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.To">
            <summary>
            The To header field.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderId.Unknown">
            <summary>
            An unknown header field.
            </summary>
        </member>
        <member name="T:MimeKit.HeaderList">
            <summary>
            A list of <see cref="T:MimeKit.Header"/>s.
            </summary>
            <remarks>
            Represents a list of headers as found in a <see cref="T:MimeKit.MimeMessage"/>
            or <see cref="T:MimeKit.MimeEntity"/>.
            </remarks>
        </member>
        <member name="M:MimeKit.HeaderList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.HeaderList"/> class.
            </summary>
            <remarks>
            Creates a new empty header list.
            </remarks>
        </member>
        <member name="M:MimeKit.HeaderList.Add(MimeKit.HeaderId,System.String)">
            <summary>
            Adds a header with the specified field and value.
            </summary>
            <remarks>
            Adds a new header for the specified field and value pair.
            </remarks>
            <param name="id">The header identifier.</param>
            <param name="value">The header value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not a valid <see cref="T:MimeKit.HeaderId"/>.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.Add(System.String,System.String)">
            <summary>
            Adds a header with the specified field and value.
            </summary>
            <remarks>
            Adds a new header for the specified field and value pair.
            </remarks>
            <param name="field">The name of the header field.</param>
            <param name="value">The header value.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="field"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="field"/> contains illegal characters.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.Contains(MimeKit.HeaderId)">
            <summary>
            Checks if the <see cref="T:MimeKit.HeaderList"/> contains a header with the specified field name.
            </summary>
            <remarks>
            Determines whether or not the header list contains the specified header.
            </remarks>
            <returns><value>true</value> if the requested header exists;
            otherwise <value>false</value>.</returns>
            <param name="id">The header identifier.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not a valid <see cref="T:MimeKit.HeaderId"/>.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.Contains(System.String)">
            <summary>
            Checks if the <see cref="T:MimeKit.HeaderList"/> contains a header with the specified field name.
            </summary>
            <remarks>
            Determines whether or not the header list contains the specified header.
            </remarks>
            <returns><value>true</value> if the requested header exists;
            otherwise <value>false</value>.</returns>
            <param name="field">The name of the header field.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="field"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.IndexOf(MimeKit.HeaderId)">
            <summary>
            Gets the index of the requested header, if it exists.
            </summary>
            <remarks>
            Finds the first index of the specified header, if it exists.
            </remarks>
            <returns>The index of the requested header; otherwise <value>-1</value>.</returns>
            <param name="id">The header id.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not a valid <see cref="T:MimeKit.HeaderId"/>.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.IndexOf(System.String)">
            <summary>
            Gets the index of the requested header, if it exists.
            </summary>
            <remarks>
            Finds the first index of the specified header, if it exists.
            </remarks>
            <returns>The index of the requested header; otherwise <value>-1</value>.</returns>
            <param name="field">The name of the header field.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="field"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.Insert(System.Int32,MimeKit.HeaderId,System.String)">
            <summary>
            Inserts a header with the specified field and value at the given index.
            </summary>
            <remarks>
            Inserts the header at the specified index in the list.
            </remarks>
            <param name="index">The index to insert the header.</param>
            <param name="id">The header identifier.</param>
            <param name="value">The header value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="id"/> is not a valid <see cref="T:MimeKit.HeaderId"/>.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is out of range.</para>
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.Insert(System.Int32,System.String,System.String)">
            <summary>
            Inserts a header with the specified field and value at the given index.
            </summary>
            <remarks>
            Inserts the header at the specified index in the list.
            </remarks>
            <param name="index">The index to insert the header.</param>
            <param name="field">The name of the header field.</param>
            <param name="value">The header value.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="field"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="field"/> contains illegal characters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.Remove(MimeKit.HeaderId)">
            <summary>
            Removes the first occurance of the specified header field.
            </summary>
            <remarks>
            Removes the first occurance of the specified header field, if any exist.
            </remarks>
            <returns><value>true</value> if the first occurance of the specified
            header was removed; otherwise <value>false</value>.</returns>
            <param name="id">The header identifier.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is is not a valid <see cref="T:MimeKit.HeaderId"/>.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.Remove(System.String)">
            <summary>
            Removes the first occurance of the specified header field.
            </summary>
            <remarks>
            Removes the first occurance of the specified header field, if any exist.
            </remarks>
            <returns><value>true</value> if the first occurance of the specified
            header was removed; otherwise <value>false</value>.</returns>
            <param name="field">The name of the header field.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="field"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.RemoveAll(MimeKit.HeaderId)">
            <summary>
            Removes all of the headers matching the specified field name.
            </summary>
            <remarks>
            Removes all of the headers matching the specified field name.
            </remarks>
            <param name="id">The header identifier.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not a valid <see cref="T:MimeKit.HeaderId"/>.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.RemoveAll(System.String)">
            <summary>
            Removes all of the headers matching the specified field name.
            </summary>
            <remarks>
            Removes all of the headers matching the specified field name.
            </remarks>
            <param name="field">The name of the header field.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="field"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.Replace(MimeKit.HeaderId,System.String)">
            <summary>
            Replaces all headers with identical field names with the single specified header.
            </summary>
            <remarks>
            <para>Replaces all headers with identical field names with the single specified header.</para>
            <para>If no headers with the specified field name exist, it is simply added.</para>
            </remarks>
            <param name="id">The header identifier.</param>
            <param name="value">The header value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not a valid <see cref="T:MimeKit.HeaderId"/>.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.Replace(System.String,System.String)">
            <summary>
            Replaces all headers with identical field names with the single specified header.
            </summary>
            <remarks>
            <para>Replaces all headers with identical field names with the single specified header.</para>
            <para>If no headers with the specified field name exist, it is simply added.</para>
            </remarks>
            <param name="field">The name of the header field.</param>
            <param name="value">The header value.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="field"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="field"/> contains illegal characters.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.WriteTo(MimeKit.FormatOptions,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Writes the <see cref="T:MimeKit.HeaderList"/> to the specified output stream.
            </summary>
            <remarks>
            Writes all of the headers to the output stream.
            </remarks>
            <param name="options">The formatting options.</param>
            <param name="stream">The output stream.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.WriteTo(MimeKit.FormatOptions,System.IO.Stream)">
            <summary>
            Writes the <see cref="T:MimeKit.HeaderList"/> to the specified output stream.
            </summary>
            <remarks>
            Writes all of the headers to the output stream.
            </remarks>
            <param name="options">The formatting options.</param>
            <param name="stream">The output stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.WriteTo(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Writes the <see cref="T:MimeKit.HeaderList"/> to the specified output stream.
            </summary>
            <remarks>
            Writes all of the headers to the output stream.
            </remarks>
            <param name="stream">The output stream.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.WriteTo(System.IO.Stream)">
            <summary>
            Writes the <see cref="T:MimeKit.HeaderList"/> to the specified output stream.
            </summary>
            <remarks>
            Writes all of the headers to the output stream.
            </remarks>
            <param name="stream">The output stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.Add(MimeKit.Header)">
            <summary>
            Adds the specified header.
            </summary>
            <remarks>
            Adds the specified header to the end of the header list.
            </remarks>
            <param name="header">The header to add.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="header"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.Clear">
            <summary>
            Clears the header list.
            </summary>
            <remarks>
            Removes all of the headers from the list.
            </remarks>
        </member>
        <member name="M:MimeKit.HeaderList.Contains(MimeKit.Header)">
            <summary>
            Checks if the <see cref="T:MimeKit.HeaderList"/> contains the specified header.
            </summary>
            <remarks>
            Determines whether or not the header list contains the specified header.
            </remarks>
            <returns><value>true</value> if the specified header is contained;
            otherwise <value>false</value>.</returns>
            <param name="header">The header.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="header"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.CopyTo(MimeKit.Header[],System.Int32)">
            <summary>
            Copies all of the headers in the <see cref="T:MimeKit.HeaderList"/> to the specified array.
            </summary>
            <remarks>
            Copies all of the headers within the <see cref="T:MimeKit.HeaderList"/> into the array,
            starting at the specified array index.
            </remarks>
            <param name="array">The array to copy the headers to.</param>
            <param name="arrayIndex">The index into the array.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.Remove(MimeKit.Header)">
            <summary>
            Removes the specified header.
            </summary>
            <remarks>
            Removes the specified header from the list if it exists.
            </remarks>
            <returns><c>true</c> if the specified header was removed;
            otherwise <c>false</c>.</returns>
            <param name="header">The header.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="header"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.Replace(MimeKit.Header)">
            <summary>
            Replaces all headers with identical field names with the single specified header.
            </summary>
            <remarks>
            <para>Replaces all headers with identical field names with the single specified header.</para>
            <para>If no headers with the specified field name exist, it is simply added.</para>
            </remarks>
            <param name="header">The header.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="header"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.IndexOf(MimeKit.Header)">
            <summary>
            Gets the index of the requested header, if it exists.
            </summary>
            <remarks>
            Finds the index of the specified header, if it exists.
            </remarks>
            <returns>The index of the requested header; otherwise <value>-1</value>.</returns>
            <param name="header">The header.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="header"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.Insert(System.Int32,MimeKit.Header)">
            <summary>
            Inserts the specified header at the given index.
            </summary>
            <remarks>
            Inserts the header at the specified index in the list.
            </remarks>
            <param name="index">The index to insert the header.</param>
            <param name="header">The header.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="header"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.RemoveAt(System.Int32)">
            <summary>
            Removes the header at the specified index.
            </summary>
            <remarks>
            Removes the header at the specified index.
            </remarks>
            <param name="index">The index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.HeaderList.GetEnumerator">
            <summary>
            Gets an enumerator for the list of headers.
            </summary>
            <remarks>
            Gets an enumerator for the list of headers.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MimeKit.HeaderList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the list of headers.
            </summary>
            <remarks>
            Gets an enumerator for the list of headers.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:MimeKit.HeaderList.Item(MimeKit.HeaderId)">
            <summary>
            Gets or sets the value of the first occurance of a header
            with the specified field name.
            </summary>
            <remarks>
            Gets or sets the value of the first occurance of a header
            with the specified field name.
            </remarks>
            <value>The value of the first occurrance of the specified header if it exists; otherwise <c>null</c>.</value>
            <param name="id">The header identifier.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:MimeKit.HeaderList.Item(System.String)">
            <summary>
            Gets or sets the value of the first occurance of a header
            with the specified field name.
            </summary>
            <remarks>
            Gets or sets the value of the first occurance of a header
            with the specified field name.
            </remarks>
            <value>The value of the first occurrance of the specified header if it exists; otherwise <c>null</c>.</value>
            <param name="field">The name of the header field.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="field"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="P:MimeKit.HeaderList.Count">
            <summary>
            Gets the number of headers in the <see cref="T:MimeKit.HeaderList"/>.
            </summary>
            <remarks>
            Indicates the number of headers in the list.
            </remarks>
            <value>The number of headers.</value>
        </member>
        <member name="P:MimeKit.HeaderList.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <remarks>
            A <see cref="T:MimeKit.HeaderList"/> is never read-only.
            </remarks>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.HeaderList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:MimeKit.Header"/> at the specified index.
            </summary>
            <remarks>
            Gets or sets the <see cref="T:MimeKit.Header"/> at the specified index.
            </remarks>
            <value>The header at the specified index.</value>
            <param name="index">The index.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="T:MimeKit.HeaderListChangedAction">
            <summary>
            Header list changed action.
            </summary>
            <remarks>
            Specifies the way that a <see cref="T:MimeKit.HeaderList"/> was changed.
            </remarks>
        </member>
        <member name="F:MimeKit.HeaderListChangedAction.Added">
            <summary>
            A header was added.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderListChangedAction.Changed">
            <summary>
            A header was changed.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderListChangedAction.Removed">
            <summary>
            A header was removed.
            </summary>
        </member>
        <member name="F:MimeKit.HeaderListChangedAction.Cleared">
            <summary>
            The header list was cleared.
            </summary>
        </member>
        <member name="T:MimeKit.InternetAddressList">
            <summary>
            A list of email addresses. 
            </summary>
            <remarks>
            <para>An <see cref="T:MimeKit.InternetAddressList"/> may contain any number of addresses of any type
            defined by the original Internet Message specification.</para>
            <para>There are effectively two (2) types of addresses: mailboxes and groups.</para>
            <para>Mailbox addresses are what are most commonly known as email addresses and are
            represented by the <see cref="T:MimeKit.MailboxAddress"/> class.</para>
            <para>Group addresses are themselves lists of addresses and are represented by the
            <see cref="T:MimeKit.GroupAddress"/> class. While rare, it is still important to handle these
            types of addresses. They typically only contain mailbox addresses, but may also
            contain other group addresses.</para>
            </remarks>
        </member>
        <member name="M:MimeKit.InternetAddressList.#ctor(System.Collections.Generic.IEnumerable{MimeKit.InternetAddress})">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.InternetAddressList"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.InternetAddressList"/> containing the supplied addresses.
            </remarks>
            <param name="addresses">An initial list of addresses.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="addresses"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.InternetAddressList"/> class.
            </summary>
            <remarks>
            Creates a new, empty, <see cref="T:MimeKit.InternetAddressList"/>.
            </remarks>
        </member>
        <member name="M:MimeKit.InternetAddressList.IndexOf(MimeKit.InternetAddress)">
            <summary>
            Gets the index of the specified address.
            </summary>
            <remarks>
            Finds the index of the specified address, if it exists.
            </remarks>
            <returns>The index of the specified address if found; otherwise <c>-1</c>.</returns>
            <param name="address">The address to get the index of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.Insert(System.Int32,MimeKit.InternetAddress)">
            <summary>
            Inserts the address at the specified index.
            </summary>
            <remarks>
            Inserts the address at the specified index in the list.
            </remarks>
            <param name="index">The index to insert the address.</param>
            <param name="address">The address.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.RemoveAt(System.Int32)">
            <summary>
            Removes the address at the specified index.
            </summary>
            <remarks>
            Removes the address at the specified index.
            </remarks>
            <param name="index">The index of the address to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.Add(MimeKit.InternetAddress)">
            <summary>
            Adds the specified address.
            </summary>
            <remarks>
            Adds the specified address to the end of the address list.
            </remarks>
            <param name="address">The address.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.AddRange(System.Collections.Generic.IEnumerable{MimeKit.InternetAddress})">
            <summary>
            Adds a collection of addresses.
            </summary>
            <remarks>
            Adds a range of addresses to the end of the address list.
            </remarks>
            <param name="addresses">A colelction of addresses.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="addresses"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.Clear">
            <summary>
            Clears the address list.
            </summary>
            <remarks>
            Removes all of the addresses from the list.
            </remarks>
        </member>
        <member name="M:MimeKit.InternetAddressList.Contains(MimeKit.InternetAddress)">
            <summary>
            Checks if the <see cref="T:MimeKit.InternetAddressList"/> contains the specified address.
            </summary>
            <remarks>
            Determines whether or not the address list contains the specified address.
            </remarks>
            <returns><value>true</value> if the specified address exists;
            otherwise <value>false</value>.</returns>
            <param name="address">The address.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.CopyTo(MimeKit.InternetAddress[],System.Int32)">
            <summary>
            Copies all of the addresses in the <see cref="T:MimeKit.InternetAddressList"/> to the specified array.
            </summary>
            <remarks>
            Copies all of the addresses within the <see cref="T:MimeKit.InternetAddressList"/> into the array,
            starting at the specified array index.
            </remarks>
            <param name="array">The array to copy the addresses to.</param>
            <param name="arrayIndex">The index into the array.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.Remove(MimeKit.InternetAddress)">
            <summary>
            Removes the specified address.
            </summary>
            <remarks>
            Removes the specified address.
            </remarks>
            <returns><value>true</value> if the address was removed; otherwise <value>false</value>.</returns>
            <param name="address">The address.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.GetEnumerator">
            <summary>
            Gets an enumerator for the list of addresses.
            </summary>
            <remarks>
            Gets an enumerator for the list of addresses.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MimeKit.InternetAddressList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the list of addresses.
            </summary>
            <remarks>
            Gets an enumerator for the list of addresses.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MimeKit.InternetAddressList.Equals(MimeKit.InternetAddressList)">
            <summary>
            Determines whether the specified <see cref="T:MimeKit.InternetAddressList"/> is equal to the current <see cref="T:MimeKit.InternetAddressList"/>.
            </summary>
            <remarks>
            Determines whether the specified <see cref="T:MimeKit.InternetAddressList"/> is equal to the current <see cref="T:MimeKit.InternetAddressList"/>.
            </remarks>
            <param name="other">The <see cref="T:MimeKit.InternetAddressList"/> to compare with the current <see cref="T:MimeKit.InternetAddressList"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:MimeKit.InternetAddressList"/> is equal to the current
            <see cref="T:MimeKit.InternetAddressList"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MimeKit.InternetAddressList.ToString(MimeKit.FormatOptions,System.Boolean)">
            <summary>
            Returns a string representation of the email addresses in the <see cref="T:MimeKit.InternetAddressList"/>,
            optionally encoding them for transport.
            </summary>
            <remarks>
            <para>If <paramref name="encode"/> is <c>true</c>, each address in the list will be encoded
            according to the rules defined in rfc2047.</para>
            <para>If there are multiple addresses in the list, they will be separated by a comma.</para>
            </remarks>
            <returns>A string representing the <see cref="T:MimeKit.InternetAddressList"/>.</returns>
            <param name="options">The formatting options.</param>
            <param name="encode">If set to <c>true</c>, each <see cref="T:MimeKit.InternetAddress"/> in the list will be encoded.</param>
        </member>
        <member name="M:MimeKit.InternetAddressList.ToString(System.Boolean)">
            <summary>
            Returns a string representation of the email addresses in the <see cref="T:MimeKit.InternetAddressList"/>,
            optionally encoding them for transport.
            </summary>
            <remarks>
            <para>If <paramref name="encode"/> is <c>true</c>, each address in the list will be encoded
            according to the rules defined in rfc2047.</para>
            <para>If there are multiple addresses in the list, they will be separated by a comma.</para>
            </remarks>
            <returns>A string representing the <see cref="T:MimeKit.InternetAddressList"/>.</returns>
            <param name="encode">If set to <c>true</c>, each <see cref="T:MimeKit.InternetAddress"/> in the list will be encoded.</param>
        </member>
        <member name="M:MimeKit.InternetAddressList.ToString">
            <summary>
            Returns a string representation of the email addresses in the <see cref="T:MimeKit.InternetAddressList"/>.
            </summary>
            <remarks>
            If there are multiple addresses in the list, they will be separated by a comma.
            </remarks>
            <returns>A string representing the <see cref="T:MimeKit.InternetAddressList"/>.</returns>
        </member>
        <member name="M:MimeKit.InternetAddressList.TryParse(MimeKit.ParserOptions,System.Byte[],System.Int32,System.Int32,MimeKit.InternetAddressList@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.InternetAddressList"/> instance.
            </summary>
            <remarks>
            Parses a list of addresses from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
            <returns><c>true</c>, if the address list was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options to use.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes in the input buffer to parse.</param>
            <param name="addresses">The parsed addresses.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.TryParse(System.Byte[],System.Int32,System.Int32,MimeKit.InternetAddressList@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.InternetAddressList"/> instance.
            </summary>
            <remarks>
            Parses a list of addresses from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
            <returns><c>true</c>, if the address list was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes in the input buffer to parse.</param>
            <param name="addresses">The parsed addresses.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.TryParse(MimeKit.ParserOptions,System.Byte[],System.Int32,MimeKit.InternetAddressList@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.InternetAddressList"/> instance.
            </summary>
            <remarks>
            Parses a list of addresses from the supplied buffer starting at the specified index.
            </remarks>
            <returns><c>true</c>, if the address list was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options to use.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="addresses">The parsed addresses.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.TryParse(System.Byte[],System.Int32,MimeKit.InternetAddressList@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.InternetAddressList"/> instance.
            </summary>
            <remarks>
            Parses a list of addresses from the supplied buffer starting at the specified index.
            </remarks>
            <returns><c>true</c>, if the address list was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="addresses">The parsed addresses.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.TryParse(MimeKit.ParserOptions,System.Byte[],MimeKit.InternetAddressList@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.InternetAddressList"/> instance.
            </summary>
            <remarks>
            Parses a list of addresses from the specified buffer.
            </remarks>
            <returns><c>true</c>, if the address list was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options to use.</param>
            <param name="buffer">The input buffer.</param>
            <param name="addresses">The parsed addresses.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.TryParse(System.Byte[],MimeKit.InternetAddressList@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.InternetAddressList"/> instance.
            </summary>
            <remarks>
            Parses a list of addresses from the specified buffer.
            </remarks>
            <returns><c>true</c>, if the address list was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="addresses">The parsed addresses.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.TryParse(MimeKit.ParserOptions,System.String,MimeKit.InternetAddressList@)">
            <summary>
            Tries to parse the given text into a new <see cref="T:MimeKit.InternetAddressList"/> instance.
            </summary>
            <remarks>
            Parses a list of addresses from the specified text.
            </remarks>
            <returns><c>true</c>, if the address list was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options to use.</param>
            <param name="text">The text.</param>
            <param name="addresses">The parsed addresses.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="text"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.TryParse(System.String,MimeKit.InternetAddressList@)">
            <summary>
            Tries to parse the given text into a new <see cref="T:MimeKit.InternetAddressList"/> instance.
            </summary>
            <remarks>
            Parses a list of addresses from the specified text.
            </remarks>
            <returns><c>true</c>, if the address list was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="text">The text.</param>
            <param name="addresses">The parsed addresses.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.Parse(MimeKit.ParserOptions,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the given input buffer into a new <see cref="T:MimeKit.InternetAddressList"/> instance.
            </summary>
            <remarks>
            Parses a list of addresses from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.InternetAddressList"/>.</returns>
            <param name="options">The parser options to use.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes in the input buffer to parse.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.Parse(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the given input buffer into a new <see cref="T:MimeKit.InternetAddressList"/> instance.
            </summary>
            <remarks>
            Parses a list of addresses from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.InternetAddressList"/>.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes in the input buffer to parse.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.Parse(MimeKit.ParserOptions,System.Byte[],System.Int32)">
            <summary>
            Parses the given input buffer into a new <see cref="T:MimeKit.InternetAddressList"/> instance.
            </summary>
            <remarks>
            Parses a list of addresses from the supplied buffer starting at the specified index.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.InternetAddressList"/>.</returns>
            <param name="options">The parser options to use.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/>is out of range.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.Parse(System.Byte[],System.Int32)">
            <summary>
            Parses the given input buffer into a new <see cref="T:MimeKit.InternetAddressList"/> instance.
            </summary>
            <remarks>
            Parses a list of addresses from the supplied buffer starting at the specified index.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.InternetAddressList"/>.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is out of range.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.Parse(MimeKit.ParserOptions,System.Byte[])">
            <summary>
            Parses the given input buffer into a new <see cref="T:MimeKit.InternetAddressList"/> instance.
            </summary>
            <remarks>
            Parses a list of addresses from the specified buffer.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.InternetAddressList"/>.</returns>
            <param name="options">The parser options to use.</param>
            <param name="buffer">The input buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:MimeKit.ParseException">
            <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.Parse(System.Byte[])">
            <summary>
            Parses the given input buffer into a new <see cref="T:MimeKit.InternetAddressList"/> instance.
            </summary>
            <remarks>
            Parses a list of addresses from the specified buffer.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.InternetAddressList"/>.</returns>
            <param name="buffer">The input buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            <paramref name="buffer"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.Parse(MimeKit.ParserOptions,System.String)">
            <summary>
            Parses the given text into a new <see cref="T:MimeKit.InternetAddressList"/> instance.
            </summary>
            <remarks>
            Parses a list of addresses from the specified text.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.InternetAddressList"/>.</returns>
            <param name="options">The parser options to use.</param>
            <param name="text">The text.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="text"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:MimeKit.ParseException">
            <paramref name="text"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.InternetAddressList.Parse(System.String)">
            <summary>
            Parses the given text into a new <see cref="T:MimeKit.InternetAddressList"/> instance.
            </summary>
            <remarks>
            Parses a list of addresses from the specified text.
            </remarks>
            <returns>The parsed <see cref="T:MimeKit.InternetAddressList"/>.</returns>
            <param name="text">The text.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            <paramref name="text"/> could not be parsed.
            </exception>
        </member>
        <member name="P:MimeKit.InternetAddressList.Mailboxes">
            <summary>
            Recursively gets all of the mailboxes contained within the <see cref="T:MimeKit.InternetAddressList"/>.
            </summary>
            <remarks>
            This API is useful for collecting a flattened list of <see cref="T:MimeKit.MailboxAddress"/>
            recipients for use with sending via SMTP or for encrypting via S/MIME or PGP/MIME.
            </remarks>
            <value>The mailboxes.</value>
        </member>
        <member name="P:MimeKit.InternetAddressList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:MimeKit.InternetAddress"/> at the specified index.
            </summary>
            <remarks>
            Gets or sets the <see cref="T:MimeKit.InternetAddress"/> at the specified index.
            </remarks>
            <value>The internet address at the specified index.</value>
            <param name="index">The index of the address to get or set.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="P:MimeKit.InternetAddressList.Count">
            <summary>
            Gets the number of addresses in the <see cref="T:MimeKit.InternetAddressList"/>.
            </summary>
            <remarks>
            Indicates the number of addresses in the list.
            </remarks>
            <value>The number of addresses.</value>
        </member>
        <member name="P:MimeKit.InternetAddressList.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <remarks>
            A <see cref="T:MimeKit.InternetAddressList"/> is never read-only.
            </remarks>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MimeKit.MailboxAddress">
            <summary>
            A mailbox address, as specified by rfc822.
            </summary>
            <remarks>
            Represents a mailbox address (commonly referred to as an email address)
            for a single recipient.
            </remarks>
        </member>
        <member name="M:MimeKit.MailboxAddress.#ctor(Portable.Text.Encoding,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MailboxAddress"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.MailboxAddress"/> with the specified name, address and route. The
            specified text encoding is used when encoding the name according to the rules of rfc2047.
            </remarks>
            <param name="encoding">The character encoding to be used for encoding the name.</param>
            <param name="name">The name of the mailbox.</param>
            <param name="route">The route of the mailbox.</param>
            <param name="address">The address of the mailbox.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="encoding"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="route"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="address"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.MailboxAddress.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MailboxAddress"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.MailboxAddress"/> with the specified name, address and route.
            </remarks>
            <param name="name">The name of the mailbox.</param>
            <param name="route">The route of the mailbox.</param>
            <param name="address">The address of the mailbox.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="route"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="address"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.MailboxAddress.#ctor(Portable.Text.Encoding,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MailboxAddress"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.MailboxAddress"/> with the specified name and address. The
            specified text encoding is used when encoding the name according to the rules of rfc2047.
            </remarks>
            <param name="encoding">The character encoding to be used for encoding the name.</param>
            <param name="name">The name of the mailbox.</param>
            <param name="address">The address of the mailbox.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="encoding"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="address"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.MailboxAddress.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MailboxAddress"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.MailboxAddress"/> with the specified name and address.
            </remarks>
            <param name="name">The name of the mailbox.</param>
            <param name="address">The address of the mailbox.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.MailboxAddress.ToString(System.Boolean)">
            <summary>
            Returns a string representation of the <see cref="T:MimeKit.MailboxAddress"/>,
            optionally encoding it for transport.
            </summary>
            <remarks>
            Returns a string containing the formatted mailbox address. If the <paramref name="encode"/>
            parameter is <c>true</c>, then the mailbox name will be encoded according to the rules defined
            in rfc2047, otherwise the name will not be encoded at all and will therefor only be suitable
            for display purposes.
            </remarks>
            <returns>A string representing the <see cref="T:MimeKit.MailboxAddress"/>.</returns>
            <param name="encode">If set to <c>true</c>, the <see cref="T:MimeKit.MailboxAddress"/> will be encoded.</param>
        </member>
        <member name="M:MimeKit.MailboxAddress.Equals(MimeKit.MailboxAddress)">
            <summary>
            Determines whether the specified <see cref="T:MimeKit.MailboxAddress"/> is equal to the current <see cref="T:MimeKit.MailboxAddress"/>.
            </summary>
            <remarks>
            Compares two mailbox addresses to determine if they are identical or not.
            </remarks>
            <param name="other">The <see cref="T:MimeKit.MailboxAddress"/> to compare with the current <see cref="T:MimeKit.MailboxAddress"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:MimeKit.MailboxAddress"/> is equal to the current
            <see cref="T:MimeKit.MailboxAddress"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MimeKit.MailboxAddress.TryParse(MimeKit.ParserOptions,System.Byte[],System.Int32,System.Int32,MimeKit.MailboxAddress@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.MailboxAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/>. If the the address is not a mailbox address or
            there is more than a single mailbox address, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options to use.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes in the input buffer to parse.</param>
            <param name="mailbox">The parsed mailbox address.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.MailboxAddress.TryParse(System.Byte[],System.Int32,System.Int32,MimeKit.MailboxAddress@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.MailboxAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/>. If the the address is not a mailbox address or
            there is more than a single mailbox address, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes in the input buffer to parse.</param>
            <param name="mailbox">The parsed mailbox address.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:MimeKit.MailboxAddress.TryParse(MimeKit.ParserOptions,System.Byte[],System.Int32,MimeKit.MailboxAddress@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.MailboxAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/>. If the the address is not a mailbox address or
            there is more than a single mailbox address, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options to use.</param>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="mailbox">The parsed mailbox address.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.MailboxAddress.TryParse(System.Byte[],System.Int32,MimeKit.MailboxAddress@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.MailboxAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/>. If the the address is not a mailbox address or
            there is more than a single mailbox address, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="mailbox">The parsed mailbox address.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.MailboxAddress.TryParse(MimeKit.ParserOptions,System.Byte[],MimeKit.MailboxAddress@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.MailboxAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/>. If the the address is not a mailbox address or
            there is more than a single mailbox address, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options to use.</param>
            <param name="buffer">The input buffer.</param>
            <param name="mailbox">The parsed mailbox address.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="buffer"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.MailboxAddress.TryParse(System.Byte[],MimeKit.MailboxAddress@)">
            <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.MailboxAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/>. If the the address is not a mailbox address or
            there is more than a single mailbox address, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="mailbox">The parsed mailbox address.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.MailboxAddress.TryParse(MimeKit.ParserOptions,System.String,MimeKit.MailboxAddress@)">
            <summary>
            Tries to parse the given text into a new <see cref="T:MimeKit.MailboxAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/>. If the the address is not a mailbox address or
            there is more than a single mailbox address, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="options">The parser options to use.</param>
            <param name="text">The text.</param>
            <param name="mailbox">The parsed mailbox address.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.MailboxAddress.TryParse(System.String,MimeKit.MailboxAddress@)">
            <summary>
            Tries to parse the given text into a new <see cref="T:MimeKit.MailboxAddress"/> instance.
            </summary>
            <remarks>
            Parses a single <see cref="T:MimeKit.MailboxAddress"/>. If the the address is not a mailbox address or
            there is more than a single mailbox address, then parsing will fail.
            </remarks>
            <returns><c>true</c>, if the address was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="text">The text.</param>
            <param name="mailbox">The parsed mailbox address.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:MimeKit.MailboxAddress.Route">
            <summary>
            Gets the mailbox route.
            </summary>
            <remarks>
            A route is convention that is rarely seen in modern email systems, but is supported
            for compatibility with email archives.
            </remarks>
            <value>The mailbox route.</value>
        </member>
        <member name="P:MimeKit.MailboxAddress.Address">
            <summary>
            Gets or sets the mailbox address.
            </summary>
            <remarks>
            Represents the actual email address and is in the form of <c>"name@example.com"</c>.
            </remarks>
            <value>The mailbox address.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:MimeKit.MessageIdList">
            <summary>
            A list of Message-Ids.
            </summary>
            <remarks>
            Used by the <see cref="P:MimeKit.MimeMessage.References"/> property.
            </remarks>
        </member>
        <member name="M:MimeKit.MessageIdList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MessageIdList"/> class.
            </summary>
            <remarks>
            Creates a new, empty, <see cref="T:MimeKit.MessageIdList"/>.
            </remarks>
        </member>
        <member name="M:MimeKit.MessageIdList.Clone">
            <summary>
            Clones the <see cref="T:MimeKit.MessageIdList"/>.
            </summary>
            <remarks>
            Creates an exact copy of the <see cref="T:MimeKit.MessageIdList"/>.
            </remarks>
            <returns>An exact copy of the <see cref="T:MimeKit.MessageIdList"/>.</returns>
        </member>
        <member name="M:MimeKit.MessageIdList.IndexOf(System.String)">
            <summary>
            Gets the index of the requested Message-Id, if it exists.
            </summary>
            <remarks>
            Finds the index of the specified Message-Id, if it exists.
            </remarks>
            <returns>The index of the requested Message-Id; otherwise <value>-1</value>.</returns>
            <param name="messageId">The Message-Id.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageId"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.MessageIdList.Insert(System.Int32,System.String)">
            <summary>
            Insert the Message-Id at the specified index.
            </summary>
            <remarks>
            Inserts the Message-Id at the specified index in the list.
            </remarks>
            <param name="index">The index to insert the Message-Id.</param>
            <param name="messageId">The Message-Id to insert.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageId"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="messageId"/> is improperly formatted.
            </exception>
        </member>
        <member name="M:MimeKit.MessageIdList.RemoveAt(System.Int32)">
            <summary>
            Removes the Message-Id at the specified index.
            </summary>
            <remarks>
            Removes the Message-Id at the specified index.
            </remarks>
            <param name="index">The index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.MessageIdList.Add(System.String)">
            <summary>
            Add the specified Message-Id.
            </summary>
            <remarks>
            Adds the specified Message-Id to the end of the list.
            </remarks>
            <param name="messageId">The Message-Id.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageId"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="messageId"/> is improperly formatted.
            </exception>
        </member>
        <member name="M:MimeKit.MessageIdList.Clear">
            <summary>
            Clears the Message-Id list.
            </summary>
            <remarks>
            Removes all of the Message-Ids in the list.
            </remarks>
        </member>
        <member name="M:MimeKit.MessageIdList.Contains(System.String)">
            <summary>
            Checks if the <see cref="T:MimeKit.MessageIdList"/> contains the specified Message-Id.
            </summary>
            <remarks>
            Determines whether or not the list contains the specified Message-Id.
            </remarks>
            <returns><value>true</value> if the specified Message-Id is contained;
            otherwise <value>false</value>.</returns>
            <param name="messageId">The Message-Id.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageId"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.MessageIdList.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies all of the Message-Ids in the <see cref="T:MimeKit.MessageIdList"/> to the specified array.
            </summary>
            <remarks>
            Copies all of the Message-Ids within the <see cref="T:MimeKit.MessageIdList"/> into the array,
            starting at the specified array index.
            </remarks>
            <param name="array">The array to copy the Message-Ids to.</param>
            <param name="arrayIndex">The index into the array.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.MessageIdList.Remove(System.String)">
            <summary>
            Removes the specified Message-Id.
            </summary>
            <remarks>
            Removes the first instance of the specified Message-Id from the list if it exists.
            </remarks>
            <returns><value>true</value> if the specified Message-Id was removed;
            otherwise <value>false</value>.</returns>
            <param name="messageId">The Message-Id.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageId"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.MessageIdList.GetEnumerator">
            <summary>
            Gets an enumerator for the list of Message-Ids.
            </summary>
            <remarks>
            Gets an enumerator for the list of Message-Ids.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MimeKit.MessageIdList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the list of Message-Ids.
            </summary>
            <remarks>
            Gets an enumerator for the list of Message-Ids.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MimeKit.MessageIdList.ToString">
            <summary>
            Returns a string representation of the list of Message-Ids.
            </summary>
            <remarks>
            <para>Each Message-Id will be surrounded by angle brackets.</para>
            <para>If there are multiple Message-Ids in the list, they will be separated by whitespace.</para>
            </remarks>
            <returns>A string representing the <see cref="T:MimeKit.MessageIdList"/>.</returns>
        </member>
        <member name="P:MimeKit.MessageIdList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:MimeKit.MessageIdList"/> at the specified index.
            </summary>
            <remarks>
            Gets or sets the Message-Id at the specified index.
            </remarks>
            <value>The Message-Id at the specified index.</value>
            <param name="index">The index.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is improperly formatted.
            </exception>
        </member>
        <member name="P:MimeKit.MessageIdList.Count">
            <summary>
            Gets the number of Message-Ids in the <see cref="T:MimeKit.MessageIdList"/>.
            </summary>
            <remarks>
            Indicates the number of Message-Ids in the list.
            </remarks>
            <value>The number of Message-Ids.</value>
        </member>
        <member name="P:MimeKit.MessageIdList.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <remarks>
            A <see cref="T:MimeKit.MessageIdList"/> is never read-only.
            </remarks>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MimeKit.MessagePart">
            <summary>
            A MIME part containing a <see cref="T:MimeKit.MimeMessage"/> as its content.
            </summary>
            <remarks>
            Represents MIME entities such as those with a Content-Type of message/rfc822 or message/news.
            </remarks>
        </member>
        <member name="T:MimeKit.MimeEntity">
            <summary>
            An abstract MIME entity.
            </summary>
            <remarks>
            <para>A MIME entity is really just a node in a tree structure of MIME parts in a MIME message.</para>
            <para>There are 3 basic types of entities: <see cref="T:MimeKit.MimePart"/>, <see cref="T:MimeKit.Multipart"/>,
            and <see cref="T:MimeKit.MessagePart"/> (which is actually just a special variation of
            <see cref="T:MimeKit.MimePart"/> who's content is another MIME message/document). All other types are
            derivatives of one of those.</para>
            </remarks>
        </member>
        <member name="M:MimeKit.MimeEntity.#ctor(MimeKit.MimeEntityConstructorInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MimeEntity"/> class
            based on the <see cref="T:MimeKit.MimeEntityConstructorInfo"/>.
            </summary>
            <remarks>
            Custom <see cref="T:MimeKit.MimeEntity"/> subclasses MUST implement this constructor
            in order to register it using <see cref="M:MimeKit.ParserOptions.RegisterMimeType(System.String,System.Type)"/>.
            </remarks>
            <param name="entity">Information used by the constructor.</param>
        </member>
        <member name="M:MimeKit.MimeEntity.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MimeEntity"/> class.
            </summary>
            <remarks>
            Initializes the <see cref="P:MimeKit.MimeEntity.ContentType"/> based on the provided media type and subtype.
            </remarks>
            <param name="mediaType">The media type.</param>
            <param name="mediaSubtype">The media subtype.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="mediaType"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="mediaSubtype"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.MimeEntity.#ctor(MimeKit.ContentType)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MimeEntity"/> class.
            </summary>
            <remarks>
            Initializes the <see cref="P:MimeKit.MimeEntity.ContentType"/> to the one provided.
            </remarks>
            <param name="contentType">The content type.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="contentType"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.MimeEntity.TryInit(System.Object)">
            <summary>
            Tries to use the given object to initialize the appropriate property.
            </summary>
            <remarks>
            Initializes the appropriate property based on the type of the object.
            </remarks>
            <param name="obj">The object.</param>
            <returns><c>true</c> if the object was recognized and used; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MimeKit.MimeEntity.WriteTo(MimeKit.FormatOptions,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Writes the <see cref="T:MimeKit.MimeEntity"/> to the specified output stream.
            </summary>
            <remarks>
            <para>Writes the headers to the output stream, followed by a blank line.</para>
            <para>Subclasses should override this method to write the content of the entity.</para>
            </remarks>
            <param name="options">The formatting options.</param>
            <param name="stream">The output stream.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeEntity.WriteTo(MimeKit.FormatOptions,System.IO.Stream)">
            <summary>
            Writes the <see cref="T:MimeKit.MimeEntity"/> to the specified output stream.
            </summary>
            <remarks>
            Writes the entity to the output stream.
            </remarks>
            <param name="options">The formatting options.</param>
            <param name="stream">The output stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeEntity.WriteTo(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Writes the <see cref="T:MimeKit.MimeEntity"/> to the specified output stream.
            </summary>
            <remarks>
            Writes the entity to the output stream.
            </remarks>
            <param name="stream">The output stream.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeEntity.WriteTo(System.IO.Stream)">
            <summary>
            Writes the <see cref="T:MimeKit.MimeEntity"/> to the specified output stream.
            </summary>
            <remarks>
            Writes the entity to the output stream.
            </remarks>
            <param name="stream">The output stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeEntity.RemoveHeader(System.String)">
            <summary>
            Removes the header.
            </summary>
            <remarks>
            Removes all headers matching the specified name without
            calling <see cref="M:MimeKit.MimeEntity.OnHeadersChanged(MimeKit.HeaderListChangedAction,MimeKit.Header)"/>.
            </remarks>
            <param name="name">The name of the header.</param>
        </member>
        <member name="M:MimeKit.MimeEntity.SetHeader(System.String,System.String)">
            <summary>
            Sets the header.
            </summary>
            <remarks>
            Sets the header to the specified value without
            calling <see cref="M:MimeKit.MimeEntity.OnHeadersChanged(MimeKit.HeaderListChangedAction,MimeKit.Header)"/>.
            </remarks>
            <param name="name">The name of the header.</param>
            <param name="value">The value of the header.</param>
        </member>
        <member name="M:MimeKit.MimeEntity.SetHeader(System.String,System.Byte[])">
            <summary>
            Sets the header using the raw value.
            </summary>
            <remarks>
            Sets the header to the specified value without
            calling <see cref="M:MimeKit.MimeEntity.OnHeadersChanged(MimeKit.HeaderListChangedAction,MimeKit.Header)"/>.
            </remarks>
            <param name="name">The name of the header.</param>
            <param name="rawValue">The raw value of the header.</param>
        </member>
        <member name="M:MimeKit.MimeEntity.OnHeadersChanged(MimeKit.HeaderListChangedAction,MimeKit.Header)">
            <summary>
            Called when the headers change in some way.
            </summary>
            <remarks>
            <para>Whenever a header is added, changed, or removed, this method will
            be called in order to allow custom <see cref="T:MimeKit.MimeEntity"/> subclasses
            to update their state.</para>
            <para>Overrides of this method should call the base method so that their
            superclass may also update its own state.</para>
            </remarks>
            <param name="action">The type of change.</param>
            <param name="header">The header being added, changed or removed.</param>
        </member>
        <member name="M:MimeKit.MimeEntity.Load(MimeKit.ParserOptions,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Load a <see cref="T:MimeKit.MimeEntity"/> from the specified stream.
            </summary>
            <remarks>
            Loads a <see cref="T:MimeKit.MimeEntity"/> from the given stream, using the
            specified <see cref="T:MimeKit.ParserOptions"/>.
            </remarks>
            <returns>The parsed MIME entity.</returns>
            <param name="options">The parser options.</param>
            <param name="stream">The stream.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeEntity.Load(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Load a <see cref="T:MimeKit.MimeEntity"/> from the specified stream.
            </summary>
            <remarks>
            Loads a <see cref="T:MimeKit.MimeEntity"/> from the given stream, using the
            default <see cref="T:MimeKit.ParserOptions"/>.
            </remarks>
            <returns>The parsed MIME entity.</returns>
            <param name="stream">The stream.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeEntity.Load(MimeKit.ParserOptions,System.IO.Stream)">
            <summary>
            Load a <see cref="T:MimeKit.MimeEntity"/> from the specified stream.
            </summary>
            <remarks>
            Loads a <see cref="T:MimeKit.MimeEntity"/> from the given stream, using the
            specified <see cref="T:MimeKit.ParserOptions"/>.
            </remarks>
            <returns>The parsed MIME entity.</returns>
            <param name="options">The parser options.</param>
            <param name="stream">The stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeEntity.Load(System.IO.Stream)">
            <summary>
            Load a <see cref="T:MimeKit.MimeEntity"/> from the specified stream.
            </summary>
            <remarks>
            Loads a <see cref="T:MimeKit.MimeEntity"/> from the given stream, using the
            default <see cref="T:MimeKit.ParserOptions"/>.
            </remarks>
            <returns>The parsed MIME entity.</returns>
            <param name="stream">The stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeEntity.Load(MimeKit.ParserOptions,MimeKit.ContentType,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Load a <see cref="T:MimeKit.MimeEntity"/> from the specified content stream.
            </summary>
            <remarks>
            This method is mostly meant for use with APIs such as <see cref="T:System.Net.HttpWebResponse"/>
            where the headers are parsed separately from the content.
            </remarks>
            <returns>The parsed MIME entity.</returns>
            <param name="options">The parser options.</param>
            <param name="contentType">The Content-Type of the stream.</param>
            <param name="content">The content stream.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="contentType"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="content"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeEntity.Load(MimeKit.ContentType,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Load a <see cref="T:MimeKit.MimeEntity"/> from the specified content stream.
            </summary>
            <remarks>
            This method is mostly meant for use with APIs such as <see cref="T:System.Net.HttpWebResponse"/>
            where the headers are parsed separately from the content.
            </remarks>
            <returns>The parsed MIME entity.</returns>
            <param name="contentType">The Content-Type of the stream.</param>
            <param name="content">The content stream.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="contentType"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="content"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeEntity.Load(MimeKit.ParserOptions,MimeKit.ContentType,System.IO.Stream)">
            <summary>
            Load a <see cref="T:MimeKit.MimeEntity"/> from the specified content stream.
            </summary>
            <remarks>
            This method is mostly meant for use with APIs such as <see cref="T:System.Net.HttpWebResponse"/>
            where the headers are parsed separately from the content.
            </remarks>
            <returns>The parsed MIME entity.</returns>
            <param name="options">The parser options.</param>
            <param name="contentType">The Content-Type of the stream.</param>
            <param name="content">The content stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="contentType"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="content"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeEntity.Load(MimeKit.ContentType,System.IO.Stream)">
            <summary>
            Load a <see cref="T:MimeKit.MimeEntity"/> from the specified content stream.
            </summary>
            <remarks>
            This method is mostly meant for use with APIs such as <see cref="T:System.Net.HttpWebResponse"/>
            where the headers are parsed separately from the content.
            </remarks>
            <returns>The parsed MIME entity.</returns>
            <param name="contentType">The Content-Type of the stream.</param>
            <param name="content">The content stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="contentType"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="content"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="P:MimeKit.MimeEntity.Headers">
            <summary>
            Gets the list of headers.
            </summary>
            <remarks>
            Represents the list of headers for a MIME part. Typically, the headers of
            a MIME part will be various Content-* headers such as Content-Type or
            Content-Disposition, but may include just about anything.
            </remarks>
            <value>The list of headers.</value>
        </member>
        <member name="P:MimeKit.MimeEntity.ContentDisposition">
            <summary>
            Gets or sets the content disposition.
            </summary>
            <remarks>
            Represents the pre-parsed Content-Disposition header value, if present.
            If the Content-Disposition header is not set, then this property will
            be <c>null</c>.
            </remarks>
            <value>The content disposition.</value>
        </member>
        <member name="P:MimeKit.MimeEntity.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <remarks>
            <para>The Content-Type header specifies information about the type of content contained
            within the MIME entity.</para>
            </remarks>
            <value>The type of the content.</value>
        </member>
        <member name="P:MimeKit.MimeEntity.ContentBase">
            <summary>
            Gets or sets the base content URI.
            </summary>
            <remarks>
            <para>The Content-Base header specifies the base URI for the <see cref="T:MimeKit.MimeEntity"/>
            in cases where the <see cref="P:MimeKit.MimeEntity.ContentLocation"/> is a relative URI.</para>
            <para>The Content-Base URI must be an absolute URI.</para>
            <para>For more information, see http://www.ietf.org/rfc/rfc2110.txt</para>
            </remarks>
            <value>The base content URI or <c>null</c>.</value>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is not an absolute URI.
            </exception>
        </member>
        <member name="P:MimeKit.MimeEntity.ContentLocation">
            <summary>
            Gets or sets the content location.
            </summary>
            <remarks>
            <para>The Content-Location header specifies the URI for a MIME entity and can be
            either absolute or relative.</para>
            <para>Setting a Content-Location URI allows other <see cref="T:MimeKit.MimePart"/> objects
            within the same multipart/related container to reference this part by URI. This
            can be useful, for example, when constructing an HTML message body that needs to
            reference image attachments.</para>
            <para>For more information, see http://www.ietf.org/rfc/rfc2110.txt</para>
            </remarks>
            <value>The content location or <c>null</c>.</value>
        </member>
        <member name="P:MimeKit.MimeEntity.ContentId">
            <summary>
            Gets or sets the content identifier.
            </summary>
            <remarks>
            <para>The Content-Id header is used for uniquely identifying a particular entity and
            uses the same syntax as the Message-Id header on MIME messages.</para>
            <para>Setting a Content-Id allows other <see cref="T:MimeKit.MimePart"/> objects within the same
            multipart/related container to reference this part by its unique identifier, typically
            by using a "cid:" URI in an HTML-formatted message body. This can be useful, for example,
            when the HTML-formatted message body needs to reference image attachments.</para>
            </remarks>
            <value>The content identifier.</value>
        </member>
        <member name="M:MimeKit.MessagePart.#ctor(MimeKit.MimeEntityConstructorInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MessagePart"/> class.
            </summary>
            <remarks>This constructor is used by <see cref="T:MimeKit.MimeParser"/>.</remarks>
            <param name="entity">Information used by the constructor.</param>
        </member>
        <member name="M:MimeKit.MessagePart.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MessagePart"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.MessagePart"/>.
            </remarks>
            <param name="subtype">The message subtype.</param>
            <param name="args">An array of initialization parameters: headers and message parts.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="subtype"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="args"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="args"/> contains more than one <see cref="T:MimeKit.MimeMessage"/>.</para>
            <para>-or-</para>
            <para><paramref name="args"/> contains one or more arguments of an unknown type.</para>
            </exception>
        </member>
        <member name="M:MimeKit.MessagePart.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MessagePart"/> class.
            </summary>
            <remarks>
            Creates a new MIME message entity with the specified subtype.
            </remarks>
            <param name="subtype">The message subtype.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="subtype"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.MessagePart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MessagePart"/> class.
            </summary>
            <remarks>
            Creates a new message/rfc822 MIME entity.
            </remarks>
        </member>
        <member name="M:MimeKit.MessagePart.WriteTo(MimeKit.FormatOptions,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Writes the <see cref="T:MimeKit.MessagePart"/> to the output stream.
            </summary>
            <remarks>
            Writes the MIME entity and its message to the output stream.
            </remarks>
            <param name="options">The formatting options.</param>
            <param name="stream">The output stream.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="P:MimeKit.MessagePart.Message">
            <summary>
            Gets or sets the message content.
            </summary>
            <remarks>
            Gets or sets the message content.
            </remarks>
            <value>The message content.</value>
        </member>
        <member name="T:MimeKit.MessagePartial">
            <summary>
            A MIME part containing a partial message as its content.
            </summary>
            <remarks>
            <para>The "message/partial" MIME-type is used to split large messages into
            multiple parts, typically to work around transport systems that have size
            limitations (for example, some SMTP servers limit have a maximum message
            size that they will accept).</para>
            </remarks>
        </member>
        <member name="T:MimeKit.MimePart">
            <summary>
            A leaf-node MIME part that contains content such as the message body text or an attachment.
            </summary>
            <remarks>
            A leaf-node MIME part that contains content such as the message body text or an attachment.
            </remarks>
        </member>
        <member name="M:MimeKit.MimePart.#ctor(MimeKit.MimeEntityConstructorInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MimePart"/> class
            based on the <see cref="T:MimeKit.MimeEntityConstructorInfo"/>.
            </summary>
            <remarks>This constructor is used by <see cref="T:MimeKit.MimeParser"/>.</remarks>
            <param name="entity">Information used by the constructor.</param>
        </member>
        <member name="M:MimeKit.MimePart.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MimePart"/> class
            with the specified media type and subtype.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.MimePart"/> with the specified media type and subtype.
            </remarks>
            <param name="mediaType">The media type.</param>
            <param name="mediaSubtype">The media subtype.</param>
            <param name="args">An array of initialization parameters: headers and part content.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="mediaType"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="mediaSubtype"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="args"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="args"/> contains more than one <see cref="T:MimeKit.IContentObject"/> or
            <see cref="T:System.IO.Stream"/>.</para>
            <para>-or-</para>
            <para><paramref name="args"/> contains one or more arguments of an unknown type.</para>
            </exception>
        </member>
        <member name="M:MimeKit.MimePart.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MimePart"/> class
            with the specified media type and subtype.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.MimePart"/> with the specified media type and subtype.
            </remarks>
            <param name="mediaType">The media type.</param>
            <param name="mediaSubtype">The media subtype.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="mediaType"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="mediaSubtype"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.MimePart.#ctor(MimeKit.ContentType)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MimePart"/> class
            with the specified content type.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.MimePart"/> with the specified Content-Type value.
            </remarks>
            <param name="contentType">The content type.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="contentType"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.MimePart.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MimePart"/> class
            with the specified content type.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.MimePart"/> with the specified Content-Type value.
            </remarks>
            <param name="contentType">The content type.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="contentType"/> is <c>null</c>.
            </exception>
            <exception cref="T:MimeKit.ParseException">
            <paramref name="contentType"/> could not be parsed.
            </exception>
        </member>
        <member name="M:MimeKit.MimePart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MimePart"/> class
            with the default Content-Type of application/octet-stream.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.MimePart"/> with a Content-Type of application/octet-stream.
            </remarks>
        </member>
        <member name="M:MimeKit.MimePart.GetBestEncoding(MimeKit.EncodingConstraint,System.Threading.CancellationToken)">
            <summary>
            Calculates the most efficient content encoding given the specified constraint.
            </summary>
            <remarks>
            If no <see cref="P:MimeKit.MimePart.ContentObject"/> is set, <see cref="F:MimeKit.ContentEncoding.SevenBit"/> will be returned.
            </remarks>
            <returns>The most efficient content encoding.</returns>
            <param name="constraint">The encoding constraint.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimePart.GetBestEncoding(MimeKit.EncodingConstraint)">
            <summary>
            Calculates the most efficient content encoding given the specified constraint.
            </summary>
            <remarks>
            If no <see cref="P:MimeKit.MimePart.ContentObject"/> is set, <see cref="F:MimeKit.ContentEncoding.SevenBit"/> will be returned.
            </remarks>
            <returns>The most efficient content encoding.</returns>
            <param name="constraint">The encoding constraint.</param>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimePart.ComputeContentMd5">
            <summary>
            Computes the MD5 checksum of the content.
            </summary>
            <remarks>
            Computes the MD5 checksum of the MIME content in its canonical
            format and then base64-encodes the result.
            </remarks>
            <returns>The md5sum of the content.</returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="P:MimeKit.MimePart.ContentObject"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.MimePart.VerifyContentMd5">
            <summary>
            Verifies the Content-Md5 value against an independently computed md5sum.
            </summary>
            <remarks>
            Computes the MD5 checksum of the MIME content and compares it with the
            value in the Content-MD5 header, returning <c>true</c> if and only if
            the values match.
            </remarks>
            <returns><c>true</c>, if content MD5 checksum was verified, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MimeKit.MimePart.WriteTo(MimeKit.FormatOptions,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Writes the <see cref="T:MimeKit.MimePart"/> to the specified output stream.
            </summary>
            <remarks>
            Writes the MIME part to the output stream.
            </remarks>
            <param name="options">The formatting options.</param>
            <param name="stream">The output stream.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimePart.OnHeadersChanged(MimeKit.HeaderListChangedAction,MimeKit.Header)">
            <summary>
            Called when the headers change in some way.
            </summary>
            <remarks>
            Updates the <see cref="P:MimeKit.MimePart.ContentTransferEncoding"/>, <see cref="P:MimeKit.MimePart.ContentDuration"/>,
            and <see cref="P:MimeKit.MimePart.ContentMd5"/> properties if the corresponding headers have changed.
            </remarks>
            <param name="action">The type of change.</param>
            <param name="header">The header being added, changed or removed.</param>
        </member>
        <member name="P:MimeKit.MimePart.ContentDuration">
            <summary>
            Gets or sets the duration of the content if available.
            </summary>
            <remarks>
            <para>The Content-Duration header specifies duration of timed media,
            such as audio or video, in seconds.</para>
            </remarks>
            <value>The duration of the content.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:MimeKit.MimePart.ContentMd5">
            <summary>
            Gets or sets the md5sum of the content.
            </summary>
            <remarks>
            <para>The Content-MD5 header specifies the base64-encoded MD5 checksum of the content
            in its canonical format.</para>
            <para>For more information, see http://www.ietf.org/rfc/rfc1864.txt</para>
            </remarks>
            <value>The md5sum of the content.</value>
        </member>
        <member name="P:MimeKit.MimePart.ContentTransferEncoding">
            <summary>
            Gets or sets the content transfer encoding.
            </summary>
            <remarks>
            The Content-Transfer-Encoding header specifies an auxiliary encoding
            that was applied to the content in order to allow it to pass through
            mail transport mechanisms (such as SMTP) which may have limitations
            in the byte ranges that it accepts. For example, many SMTP servers
            do not accept data outside of the 7-bit ASCII range and so sending
            binary attachments or even non-English text is not possible without
            applying an encoding such as base64 or quoted-printable.
            </remarks>
            <value>The content transfer encoding.</value>
        </member>
        <member name="P:MimeKit.MimePart.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <remarks>
            <para>First checks for the "filename" parameter on the Content-Disposition header. If
            that does not exist, then the "name" parameter on the Content-Type header is used.</para>
            <para>When setting the filename, both the "filename" parameter on the Content-Disposition
            header and the "name" parameter on the Content-Type header are set.</para>
            </remarks>
            <value>The name of the file.</value>
        </member>
        <member name="P:MimeKit.MimePart.ContentObject">
            <summary>
            Gets or sets the MIME content.
            </summary>
            <remarks>
            Gets or sets the MIME content.
            </remarks>
            <value>The MIME content.</value>
        </member>
        <member name="P:MimeKit.MimePart.IsAttachment">
            <summary>
            Gets a value indicating whether this <see cref="T:MimeKit.MimePart"/> is an attachment.
            </summary>
            <remarks>
            If the Content-Disposition header is set and has a value of <c>"attachment"</c>,
            then this property returns <c>true</c>. Otherwise it is assumed that the
            <see cref="T:MimeKit.MimePart"/> is not meant to be treated as an attachment.
            </remarks>
            <value><c>true</c> if this <see cref="T:MimeKit.MimePart"/> is an attachment; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MimeKit.MessagePartial.#ctor(MimeKit.MimeEntityConstructorInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MessagePartial"/> class.
            </summary>
            <remarks>This constructor is used by <see cref="T:MimeKit.MimeParser"/>.</remarks>
            <param name="entity">Information used by the constructor.</param>
        </member>
        <member name="M:MimeKit.MessagePartial.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MessagePartial"/> class.
            </summary>
            <remarks>
            <para>Creates a new message/partial entity.</para>
            <para>Three (3) parameters must be specified in the Content-Type header
            of a message/partial: id, number, and total.</para>
            <para>The "id" parameter is a unique identifier used to match the parts together.</para>
            <para>The "number" parameter is the sequential (1-based) index of the partial message fragment.</para>
            <para>The "total" parameter is the total number of pieces that make up the complete message.</para>
            </remarks>
            <param name="id">The id value shared among the partial message parts.</param>
            <param name="number">The (1-based) part number for this partial message part.</param>
            <param name="total">The total number of partial message parts.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="number"/> is less than <c>1</c>.</para>
            <para>-or-</para>
            <para><paramref name="total"/> is less than <paramref name="number"/>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.MessagePartial.Split(MimeKit.MimeMessage,System.Int32)">
            <summary>
            Splits the specified message into multiple messages.
            </summary>
            <remarks>
            Splits the specified message into multiple messages, each with a
            message/partial body no larger than the max size specified.
            </remarks>
            <returns>An enumeration of partial messages.</returns>
            <param name="message">The message.</param>
            <param name="maxSize">The maximum size for each message body.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxSize"/> is less than <c>1</c>.
            </exception>
        </member>
        <member name="M:MimeKit.MessagePartial.Join(MimeKit.ParserOptions,System.Collections.Generic.IEnumerable{MimeKit.MessagePartial})">
            <summary>
            Joins the specified message/partial parts into the complete message.
            </summary>
            <remarks>
            Combines all of the message/partial fragments into its original,
            complete, message.
            </remarks>
            <returns>The re-combined message.</returns>
            <param name="options">The parser options to use.</param>
            <param name="partials">The list of partial message parts.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="partials"/>is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>The last partial does not have a Total.</para>
            <para>-or-</para>
            <para>The number of partials provided does not match the expected count.</para>
            <para>-or-</para>
            <para>One or more partials is missing.</para>
            </exception>
        </member>
        <member name="M:MimeKit.MessagePartial.Join(System.Collections.Generic.IEnumerable{MimeKit.MessagePartial})">
            <summary>
            Joins the specified message/partial parts into the complete message.
            </summary>
            <remarks>
            Combines all of the message/partial fragments into its original,
            complete, message.
            </remarks>
            <returns>The re-combined message.</returns>
            <param name="partials">The list of partial message parts.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="partials"/>is <c>null</c>.
            </exception>
        </member>
        <member name="P:MimeKit.MessagePartial.Id">
            <summary>
            Gets the "id" parameter of the Content-Type header.
            </summary>
            <remarks>
            The "id" parameter is a unique identifier used to match the parts together.
            </remarks>
            <value>The identifier.</value>
        </member>
        <member name="P:MimeKit.MessagePartial.Number">
            <summary>
            Gets the "number" parameter of the Content-Type header.
            </summary>
            <remarks>
            The "number" parameter is the sequential (1-based) index of the partial message fragment.
            </remarks>
            <value>The part number.</value>
        </member>
        <member name="P:MimeKit.MessagePartial.Total">
            <summary>
            Gets the "total" parameter of the Content-Type header.
            </summary>
            <remarks>
            The "total" parameter is the total number of pieces that make up the complete message.
            </remarks>
            <value>The total number of parts.</value>
        </member>
        <member name="T:MimeKit.MimeEntityConstructorInfo">
            <summary>
            MIME entity constructor info.
            </summary>
            <remarks>
            MIME entity constructor info.
            </remarks>
        </member>
        <member name="T:MimeKit.MimeFormat">
            <summary>
            The format of the MIME stream.
            </summary>
            <remarks>
            The format of the MIME stream.
            </remarks>
        </member>
        <member name="F:MimeKit.MimeFormat.Entity">
            <summary>
            The stream contains a single MIME entity or message.
            </summary>
        </member>
        <member name="F:MimeKit.MimeFormat.Mbox">
            <summary>
            The stream is in the Unix mbox format and may contain
            more than a single message.
            </summary>
        </member>
        <member name="F:MimeKit.MimeFormat.Default">
            <summary>
            The default stream format.
            </summary>
        </member>
        <member name="T:MimeKit.MimeMessage">
            <summary>
            A MIME message.
            </summary>
            <remarks>
            <para>A message consists of header fields and, optionally, a body.</para>
            <para>The body of the message can either be plain text or it can be a
            tree of MIME entities such as a text/plain MIME part and a collection
            of file attachments.</para>
            </remarks>
        </member>
        <member name="M:MimeKit.MimeMessage.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MimeMessage"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.MimeMessage"/>.
            </remarks>
            <param name="args">An array of initialization parameters: headers and message parts.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="args"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="args"/> contains more than one <see cref="T:MimeKit.MimeEntity"/>.</para>
            <para>-or-</para>
            <para><paramref name="args"/> contains one or more arguments of an unknown type.</para>
            </exception>
        </member>
        <member name="M:MimeKit.MimeMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MimeMessage"/> class.
            </summary>
            <remarks>
            Creates a new MIME message.
            </remarks>
        </member>
        <member name="M:MimeKit.MimeMessage.WriteTo(MimeKit.FormatOptions,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Writes the message to the specified output stream.
            </summary>
            <remarks>
            Writes the message to the output stream using the provided formatting options.
            </remarks>
            <param name="options">The formatting options.</param>
            <param name="stream">The output stream.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeMessage.WriteTo(MimeKit.FormatOptions,System.IO.Stream)">
            <summary>
            Writes the message to the specified output stream.
            </summary>
            <remarks>
            Writes the message to the output stream using the provided formatting options.
            </remarks>
            <param name="options">The formatting options.</param>
            <param name="stream">The output stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeMessage.WriteTo(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Writes the message to the specified output stream.
            </summary>
            <remarks>
            Writes the message to the output stream using the default formatting options.
            </remarks>
            <param name="stream">The output stream.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeMessage.WriteTo(System.IO.Stream)">
            <summary>
            Writes the message to the specified output stream.
            </summary>
            <remarks>
            Writes the message to the output stream using the default formatting options.
            </remarks>
            <param name="stream">The output stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeMessage.Load(MimeKit.ParserOptions,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Load a <see cref="T:MimeKit.MimeMessage"/> from the specified stream.
            </summary>
            <remarks>
            Loads a <see cref="T:MimeKit.MimeMessage"/> from the given stream, using the
            specified <see cref="T:MimeKit.ParserOptions"/>.
            </remarks>
            <returns>The parsed message.</returns>
            <param name="options">The parser options.</param>
            <param name="stream">The stream.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeMessage.Load(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Load a <see cref="T:MimeKit.MimeMessage"/> from the specified stream.
            </summary>
            <remarks>
            Loads a <see cref="T:MimeKit.MimeMessage"/> from the given stream, using the
            default <see cref="T:MimeKit.ParserOptions"/>.
            </remarks>
            <returns>The parsed message.</returns>
            <param name="stream">The stream.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeMessage.Load(MimeKit.ParserOptions,System.IO.Stream)">
            <summary>
            Load a <see cref="T:MimeKit.MimeMessage"/> from the specified stream.
            </summary>
            <remarks>
            Loads a <see cref="T:MimeKit.MimeMessage"/> from the given stream, using the
            specified <see cref="T:MimeKit.ParserOptions"/>.
            </remarks>
            <returns>The parsed message.</returns>
            <param name="options">The parser options.</param>
            <param name="stream">The stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeMessage.Load(System.IO.Stream)">
            <summary>
            Load a <see cref="T:MimeKit.MimeMessage"/> from the specified stream.
            </summary>
            <remarks>
            Loads a <see cref="T:MimeKit.MimeMessage"/> from the given stream, using the
            default <see cref="T:MimeKit.ParserOptions"/>.
            </remarks>
            <returns>The parsed message.</returns>
            <param name="stream">The stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="P:MimeKit.MimeMessage.Headers">
            <summary>
            Gets the list of headers.
            </summary>
            <remarks>
            Represents the list of headers for a message. Typically, the headers of
            a message will contain transmission headers such as From and To along
            with metadata headers such as Subject and Date, but may include just
            about anything.
            </remarks>
            <value>The list of headers.</value>
        </member>
        <member name="P:MimeKit.MimeMessage.Sender">
            <summary>
            Gets or sets the address in the Sender header.
            </summary>
            <remarks>
            The sender may differ from the addresses in <see cref="P:MimeKit.MimeMessage.From"/> if
            the message was sent by someone on behalf of someone else.
            </remarks>
            <value>The address in the Sender header.</value>
        </member>
        <member name="P:MimeKit.MimeMessage.ResentSender">
            <summary>
            Gets or sets the address in the Resent-Sender header.
            </summary>
            <remarks>
            The resent sender may differ from the addresses in <see cref="P:MimeKit.MimeMessage.ResentFrom"/> if
            the message was sent by someone on behalf of someone else.
            </remarks>
            <value>The address in the Resent-Sender header.</value>
        </member>
        <member name="P:MimeKit.MimeMessage.From">
            <summary>
            Gets the list of addresses in the From header.
            </summary>
            <remarks>
            <para>The "From" header specifies the author(s) of the message.</para>
            <para>If more than one <see cref="T:MimeKit.MailboxAddress"/> is added to the
            list of "From" addresses, the <see cref="P:MimeKit.MimeMessage.Sender"/> should be set to the
            single <see cref="T:MimeKit.MailboxAddress"/> of the personal actually sending
            the message.</para>
            </remarks>
            <value>The list of addresses in the From header.</value>
        </member>
        <member name="P:MimeKit.MimeMessage.ResentFrom">
            <summary>
            Gets the list of addresses in the Resent-From header.
            </summary>
            <remarks>
            <para>The "Resent-From" header specifies the author(s) of the messagebeing
            resent.</para>
            <para>If more than one <see cref="T:MimeKit.MailboxAddress"/> is added to the
            list of "Resent-From" addresses, the <see cref="P:MimeKit.MimeMessage.ResentSender"/> should
            be set to the single <see cref="T:MimeKit.MailboxAddress"/> of the personal actually
            sending the message.</para>
            </remarks>
            <value>The list of addresses in the Resent-From header.</value>
        </member>
        <member name="P:MimeKit.MimeMessage.ReplyTo">
            <summary>
            Gets the list of addresses in the Reply-To header.
            </summary>
            <remarks>
            <para>When the list of addresses in the Reply-To header is not empty,
            it contains the address(es) where the author(s) of the message prefer
            that replies be sent.</para>
            <para>When the list of addresses in the Reply-To header is empty,
            replies should be sent to the mailbox(es) specified in the From
            header.</para>
            </remarks>
            <value>The list of addresses in the Reply-To header.</value>
        </member>
        <member name="P:MimeKit.MimeMessage.ResentReplyTo">
            <summary>
            Gets the list of addresses in the Resent-Reply-To header.
            </summary>
            <remarks>
            <para>When the list of addresses in the Resent-Reply-To header is not empty,
            it contains the address(es) where the author(s) of the resent message prefer
            that replies be sent.</para>
            <para>When the list of addresses in the Resent-Reply-To header is empty,
            replies should be sent to the mailbox(es) specified in the Resent-From
            header.</para>
            </remarks>
            <value>The list of addresses in the Resent-Reply-To header.</value>
        </member>
        <member name="P:MimeKit.MimeMessage.To">
            <summary>
            Gets the list of addresses in the To header.
            </summary>
            <remarks>
            The addresses in the To header are the primary recipients of
            the message.
            </remarks>
            <value>The list of addresses in the To header.</value>
        </member>
        <member name="P:MimeKit.MimeMessage.ResentTo">
            <summary>
            Gets the list of addresses in the Resent-To header.
            </summary>
            <remarks>
            The addresses in the Resent-To header are the primary recipients of
            the message.
            </remarks>
            <value>The list of addresses in the Resent-To header.</value>
        </member>
        <member name="P:MimeKit.MimeMessage.Cc">
            <summary>
            Gets the list of addresses in the Cc header.
            </summary>
            <remarks>
            The addresses in the Cc header are secondary recipients of the message
            and are usually not the individuals being directly addressed in the
            content of the message.
            </remarks>
            <value>The list of addresses in the Cc header.</value>
        </member>
        <member name="P:MimeKit.MimeMessage.ResentCc">
            <summary>
            Gets the list of addresses in the Resent-Cc header.
            </summary>
            <remarks>
            The addresses in the Resent-Cc header are secondary recipients of the message
            and are usually not the individuals being directly addressed in the
            content of the message.
            </remarks>
            <value>The list of addresses in the Resent-Cc header.</value>
        </member>
        <member name="P:MimeKit.MimeMessage.Bcc">
            <summary>
            Gets the list of addresses in the Bcc header.
            </summary>
            <remarks>
            Recipients in the Blind-Carpbon-Copy list will not be visible to
            the other recipients of the message.
            </remarks>
            <value>The list of addresses in the Bcc header.</value>
        </member>
        <member name="P:MimeKit.MimeMessage.ResentBcc">
            <summary>
            Gets the list of addresses in the Resent-Bcc header.
            </summary>
            <remarks>
            Recipients in the Resent-Bcc list will not be visible to
            the other recipients of the message.
            </remarks>
            <value>The list of addresses in the Resent-Bcc header.</value>
        </member>
        <member name="P:MimeKit.MimeMessage.Subject">
            <summary>
            Gets or sets the subject of the message.
            </summary>
            <remarks>
            <para>The Subject is typically a short string denoting the topic of the message.</para>
            <para>Replies will often use <c>"Re: "</c> followed by the Subject of the original message.</para>
            </remarks>
            <value>The subject of the message.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:MimeKit.MimeMessage.Date">
            <summary>
            Gets or sets the date of the message.
            </summary>
            <remarks>
            If the date is not explicitly set before the message is written to a stream,
            the date will default to the exact moment when it is written to said stream.
            </remarks>
            <value>The date of the message.</value>
        </member>
        <member name="P:MimeKit.MimeMessage.ResentDate">
            <summary>
            Gets or sets the Resent-Date of the message.
            </summary>
            <remarks>
            Gets or sets the Resent-Date of the message.
            </remarks>
            <value>The Resent-Date of the message.</value>
        </member>
        <member name="P:MimeKit.MimeMessage.References">
            <summary>
            Gets or sets the list of references to other messages.
            </summary>
            <remarks>
            The References header contains a chain of Message-Ids back to the
            original message that started the thread.
            </remarks>
            <value>The references.</value>
        </member>
        <member name="P:MimeKit.MimeMessage.InReplyTo">
            <summary>
            Gets or sets the Message-Id that this message is in reply to.
            </summary>
            <remarks>
            If the message is a reply to another message, it will typically
            use the In-Reply-To header to specify the Message-Id of the
            original message being replied to.
            </remarks>
            <value>The message id that this message is in reply to.</value>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is improperly formatted.
            </exception>
        </member>
        <member name="P:MimeKit.MimeMessage.MessageId">
            <summary>
            Gets or sets the message identifier.
            </summary>
            <remarks>
            <para>The Message-Id is meant to be a globally unique identifier for
            a message.</para>
            <para><see cref="M:MimeKit.Utils.MimeUtils.GenerateMessageId"/> can be used
            to generate this value.</para>
            </remarks>
            <value>The message identifier.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is improperly formatted.
            </exception>
        </member>
        <member name="P:MimeKit.MimeMessage.ResentMessageId">
            <summary>
            Gets or sets the Resent-Message-Id header.
            </summary>
            <remarks>
            <para>The Resent-Message-Id is meant to be a globally unique identifier for
            a message.</para>
            <para><see cref="M:MimeKit.Utils.MimeUtils.GenerateMessageId"/> can be used
            to generate this value.</para>
            </remarks>
            <value>The Resent-Message-Id.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is improperly formatted.
            </exception>
        </member>
        <member name="P:MimeKit.MimeMessage.MimeVersion">
            <summary>
            Gets or sets the MIME-Version.
            </summary>
            <remarks>
            The MIME-Version header specifies the version of the MIME specification
            that the message was created for.
            </remarks>
            <value>The MIME version.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:MimeKit.MimeMessage.Body">
            <summary>
            Gets or sets the body of the message.
            </summary>
            <remarks>
            <para>The body of the message can either be plain text or it can be a
            tree of MIME entities such as a text/plain MIME part and a collection
            of file attachments.</para>
            <para>For a convenient way of constructing message bodies, see the
            <see cref="T:MimeKit.BodyBuilder"/> class.</para>
            </remarks>
            <value>The body of the message.</value>
        </member>
        <member name="P:MimeKit.MimeMessage.BodyParts">
            <summary>
            Gets the body parts of the message.
            </summary>
            <remarks>
            Traverses over the MIME tree, enumerating all  of the <see cref="T:MimeKit.MimePart"/> objects.
            </remarks>
            <value>The body parts.</value>
        </member>
        <member name="P:MimeKit.MimeMessage.Attachments">
            <summary>
            Gets the attachments.
            </summary>
            <remarks>
            Traverses over the MIME tree, enumerating all of the <see cref="T:MimeKit.MimePart"/> objects that
            have a Content-Disposition header set to <c>"attachment"</c>.
            </remarks>
            <value>The attachments.</value>
        </member>
        <member name="T:MimeKit.MimeParser">
            <summary>
            A MIME message and entity parser.
            </summary>
            <remarks>
            A MIME parser is used to parse <see cref="T:MimeKit.MimeMessage"/> and
            <see cref="T:MimeKit.MimeEntity"/> objects from arbitrary streams.
            </remarks>
        </member>
        <member name="M:MimeKit.MimeParser.#ctor(System.IO.Stream,MimeKit.MimeFormat,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MimeParser"/> class.
            </summary>
            <remarks>
            <para>Creates a new <see cref="T:MimeKit.MimeParser"/> that will parse the specified stream.</para>
            <para>If <paramref name="persistent"/> is <c>true</c> and <paramref name="stream"/> is seekable, then
            the <see cref="T:MimeKit.MimeParser"/> will not copy the content of <see cref="T:MimeKit.MimePart"/>s into memory. Instead,
            it will use a <see cref="T:MimeKit.IO.BoundStream"/> to reference a substream of <paramref name="stream"/>.
            This has the potential to not only save mmeory usage, but also improve <see cref="T:MimeKit.MimeParser"/>
            performance.</para>
            <para>It should be noted, however, that disposing <paramref name="stream"/> will make it impossible
            for <see cref="T:MimeKit.ContentObject"/> to read the content.</para>
            </remarks>
            <param name="stream">The stream to parse.</param>
            <param name="format">The format of the stream.</param>
            <param name="persistent"><c>true</c> if the stream is persistent; otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.MimeParser.#ctor(System.IO.Stream,MimeKit.MimeFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MimeParser"/> class.
            </summary>
            <remarks>
            <para>Creates a new <see cref="T:MimeKit.MimeParser"/> that will parse the specified stream.</para>
            </remarks>
            <param name="stream">The stream to parse.</param>
            <param name="format">The format of the stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.MimeParser.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MimeParser"/> class.
            </summary>
            <remarks>
            <para>Creates a new <see cref="T:MimeKit.MimeParser"/> that will parse the specified stream.</para>
            <para>If <paramref name="persistent"/> is <c>true</c> and <paramref name="stream"/> is seekable, then
            the <see cref="T:MimeKit.MimeParser"/> will not copy the content of <see cref="T:MimeKit.MimePart"/>s into memory. Instead,
            it will use a <see cref="T:MimeKit.IO.BoundStream"/> to reference a substream of <paramref name="stream"/>.
            This has the potential to not only save mmeory usage, but also improve <see cref="T:MimeKit.MimeParser"/>
            performance.</para>
            <para>It should be noted, however, that disposing <paramref name="stream"/> will make it impossible
            for <see cref="T:MimeKit.ContentObject"/> to read the content.</para>
            </remarks>
            <param name="stream">The stream to parse.</param>
            <param name="persistent"><c>true</c> if the stream is persistent; otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.MimeParser.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MimeParser"/> class.
            </summary>
            <remarks>
            <para>Creates a new <see cref="T:MimeKit.MimeParser"/> that will parse the specified stream.</para>
            </remarks>
            <param name="stream">The stream to parse.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.MimeParser.#ctor(MimeKit.ParserOptions,System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MimeParser"/> class.
            </summary>
            <remarks>
            <para>Creates a new <see cref="T:MimeKit.MimeParser"/> that will parse the specified stream.</para>
            <para>If <paramref name="persistent"/> is <c>true</c> and <paramref name="stream"/> is seekable, then
            the <see cref="T:MimeKit.MimeParser"/> will not copy the content of <see cref="T:MimeKit.MimePart"/>s into memory. Instead,
            it will use a <see cref="T:MimeKit.IO.BoundStream"/> to reference a substream of <paramref name="stream"/>.
            This has the potential to not only save mmeory usage, but also improve <see cref="T:MimeKit.MimeParser"/>
            performance.</para>
            <para>It should be noted, however, that disposing <paramref name="stream"/> will make it impossible
            for <see cref="T:MimeKit.ContentObject"/> to read the content.</para>
            </remarks>
            <param name="options">The parser options.</param>
            <param name="stream">The stream to parse.</param>
            <param name="persistent"><c>true</c> if the stream is persistent; otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.MimeParser.#ctor(MimeKit.ParserOptions,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MimeParser"/> class.
            </summary>
            <remarks>
            <para>Creates a new <see cref="T:MimeKit.MimeParser"/> that will parse the specified stream.</para>
            </remarks>
            <param name="options">The parser options.</param>
            <param name="stream">The stream to parse.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.MimeParser.#ctor(MimeKit.ParserOptions,System.IO.Stream,MimeKit.MimeFormat,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MimeParser"/> class.
            </summary>
            <remarks>
            <para>Creates a new <see cref="T:MimeKit.MimeParser"/> that will parse the specified stream.</para>
            <para>If <paramref name="persistent"/> is <c>true</c> and <paramref name="stream"/> is seekable, then
            the <see cref="T:MimeKit.MimeParser"/> will not copy the content of <see cref="T:MimeKit.MimePart"/>s into memory. Instead,
            it will use a <see cref="T:MimeKit.IO.BoundStream"/> to reference a substream of <paramref name="stream"/>.
            This has the potential to not only save mmeory usage, but also improve <see cref="T:MimeKit.MimeParser"/>
            performance.</para>
            <para>It should be noted, however, that disposing <paramref name="stream"/> will make it impossible
            for <see cref="T:MimeKit.ContentObject"/> to read the content.</para>
            </remarks>
            <param name="options">The parser options.</param>
            <param name="stream">The stream to parse.</param>
            <param name="format">The format of the stream.</param>
            <param name="persistent"><c>true</c> if the stream is persistent; otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.MimeParser.#ctor(MimeKit.ParserOptions,System.IO.Stream,MimeKit.MimeFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MimeParser"/> class.
            </summary>
            <remarks>
            <para>Creates a new <see cref="T:MimeKit.MimeParser"/> that will parse the specified stream.</para>
            </remarks>
            <param name="options">The parser options.</param>
            <param name="stream">The stream to parse.</param>
            <param name="format">The format of the stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.MimeParser.SetStream(MimeKit.ParserOptions,System.IO.Stream,MimeKit.MimeFormat,System.Boolean)">
            <summary>
            Sets the stream to parse.
            </summary>
            <remarks>
            <para>Sets the stream to parse.</para>
            <para>If <paramref name="persistent"/> is <c>true</c> and <paramref name="stream"/> is seekable, then
            the <see cref="T:MimeKit.MimeParser"/> will not copy the content of <see cref="T:MimeKit.MimePart"/>s into memory. Instead,
            it will use a <see cref="T:MimeKit.IO.BoundStream"/> to reference a substream of <paramref name="stream"/>.
            This has the potential to not only save mmeory usage, but also improve <see cref="T:MimeKit.MimeParser"/>
            performance.</para>
            <para>It should be noted, however, that disposing <paramref name="stream"/> will make it impossible
            for <see cref="T:MimeKit.ContentObject"/> to read the content.</para>
            </remarks>
            <param name="options">The parser options.</param>
            <param name="stream">The stream to parse.</param>
            <param name="format">The format of the stream.</param>
            <param name="persistent"><c>true</c> if the stream is persistent; otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.MimeParser.SetStream(MimeKit.ParserOptions,System.IO.Stream,MimeKit.MimeFormat)">
            <summary>
            Sets the stream to parse.
            </summary>
            <remarks>
            <para>Sets the stream to parse.</para>
            </remarks>
            <param name="options">The parser options.</param>
            <param name="stream">The stream to parse.</param>
            <param name="format">The format of the stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.MimeParser.SetStream(MimeKit.ParserOptions,System.IO.Stream,System.Boolean)">
            <summary>
            Sets the stream to parse.
            </summary>
            <remarks>
            <para>Sets the stream to parse.</para>
            <para>If <paramref name="persistent"/> is <c>true</c> and <paramref name="stream"/> is seekable, then
            the <see cref="T:MimeKit.MimeParser"/> will not copy the content of <see cref="T:MimeKit.MimePart"/>s into memory. Instead,
            it will use a <see cref="T:MimeKit.IO.BoundStream"/> to reference a substream of <paramref name="stream"/>.
            This has the potential to not only save mmeory usage, but also improve <see cref="T:MimeKit.MimeParser"/>
            performance.</para>
            <para>It should be noted, however, that disposing <paramref name="stream"/> will make it impossible
            for <see cref="T:MimeKit.ContentObject"/> to read the content.</para>
            </remarks>
            <param name="options">The parser options.</param>
            <param name="stream">The stream to parse.</param>
            <param name="persistent"><c>true</c> if the stream is persistent; otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.MimeParser.SetStream(MimeKit.ParserOptions,System.IO.Stream)">
            <summary>
            Sets the stream to parse.
            </summary>
            <remarks>
            <para>Sets the stream to parse.</para>
            </remarks>
            <param name="options">The parser options.</param>
            <param name="stream">The stream to parse.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MimeKit.MimeParser.SetStream(System.IO.Stream,MimeKit.MimeFormat,System.Boolean)">
            <summary>
            Sets the stream to parse.
            </summary>
            <remarks>
            <para>Sets the stream to parse.</para>
            <para>If <paramref name="persistent"/> is <c>true</c> and <paramref name="stream"/> is seekable, then
            the <see cref="T:MimeKit.MimeParser"/> will not copy the content of <see cref="T:MimeKit.MimePart"/>s into memory. Instead,
            it will use a <see cref="T:MimeKit.IO.BoundStream"/> to reference a substream of <paramref name="stream"/>.
            This has the potential to not only save mmeory usage, but also improve <see cref="T:MimeKit.MimeParser"/>
            performance.</para>
            <para>It should be noted, however, that disposing <paramref name="stream"/> will make it impossible
            for <see cref="T:MimeKit.ContentObject"/> to read the content.</para>
            </remarks>
            <param name="stream">The stream to parse.</param>
            <param name="format">The format of the stream.</param>
            <param name="persistent"><c>true</c> if the stream is persistent; otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.MimeParser.SetStream(System.IO.Stream,MimeKit.MimeFormat)">
            <summary>
            Sets the stream to parse.
            </summary>
            <remarks>
            <para>Sets the stream to parse.</para>
            </remarks>
            <param name="stream">The stream to parse.</param>
            <param name="format">The format of the stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.MimeParser.SetStream(System.IO.Stream,System.Boolean)">
            <summary>
            Sets the stream to parse.
            </summary>
            <remarks>
            <para>Sets the stream to parse.</para>
            <para>If <paramref name="persistent"/> is <c>true</c> and <paramref name="stream"/> is seekable, then
            the <see cref="T:MimeKit.MimeParser"/> will not copy the content of <see cref="T:MimeKit.MimePart"/>s into memory. Instead,
            it will use a <see cref="T:MimeKit.IO.BoundStream"/> to reference a substream of <paramref name="stream"/>.
            This has the potential to not only save mmeory usage, but also improve <see cref="T:MimeKit.MimeParser"/>
            performance.</para>
            <para>It should be noted, however, that disposing <paramref name="stream"/> will make it impossible
            for <see cref="T:MimeKit.ContentObject"/> to read the content.</para>
            </remarks>
            <param name="stream">The stream to parse.</param>
            <param name="persistent"><c>true</c> if the stream is persistent; otherwise <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.MimeParser.SetStream(System.IO.Stream)">
            <summary>
            Sets the stream to parse.
            </summary>
            <remarks>
            <para>Sets the stream to parse.</para>
            </remarks>
            <param name="stream">The stream to parse.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.MimeParser.ParseEntity(System.Threading.CancellationToken)">
            <summary>
            Parses an entity from the stream.
            </summary>
            <remarks>
            Parses an entity from the stream.
            </remarks>
            <returns>The parsed entity.</returns>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeParser.ParseEntity">
            <summary>
            Parses an entity from the stream.
            </summary>
            <remarks>
            Parses an entity from the stream.
            </remarks>
            <returns>The parsed entity.</returns>
            <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeParser.ParseMessage(System.Threading.CancellationToken)">
            <summary>
            Parses a message from the stream.
            </summary>
            <remarks>
            Parses a message from the stream.
            </remarks>
            <returns>The parsed message.</returns>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.FormatException">
            There was an error parsing the message.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeParser.ParseMessage">
            <summary>
            Parses a message from the stream.
            </summary>
            <remarks>
            Parses a message from the stream.
            </remarks>
            <returns>The parsed message.</returns>
            <exception cref="T:System.FormatException">
            There was an error parsing the message.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.MimeParser.GetEnumerator">
            <summary>
            Enumerates the messages in the stream.
            </summary>
            <remarks>
            This is mostly useful when parsing mbox-formatted streams.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MimeKit.MimeParser.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerates the messages in the stream.
            </summary>
            <remarks>
            This is mostly useful when parsing mbox-formatted streams.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:MimeKit.MimeParser.IsEndOfStream">
            <summary>
            Gets a value indicating whether the parser has reached the end of the input stream.
            </summary>
            <remarks>
            Gets a value indicating whether the parser has reached the end of the input stream.
            </remarks>
            <value><c>true</c> if this parser has reached the end of the input stream;
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.MimeParser.Position">
            <summary>
            Gets the current position of the parser within the stream.
            </summary>
            <remarks>
            Gets the current position of the parser within the stream.
            </remarks>
            <value>The stream offset.</value>
        </member>
        <member name="P:MimeKit.MimeParser.MboxMarkerOffset">
            <summary>
            Gets the most recent mbox marker offset.
            </summary>
            <remarks>
            Gets the most recent mbox marker offset.
            </remarks>
            <value>The mbox marker offset.</value>
        </member>
        <member name="P:MimeKit.MimeParser.MboxMarker">
            <summary>
            Gets the most recent mbox marker.
            </summary>
            <remarks>
            Gets the most recent mbox marker.
            </remarks>
            <value>The mbox marker.</value>
        </member>
        <member name="T:MimeKit.Multipart">
            <summary>
            A multipart MIME entity which may contain a collection of MIME entities.
            </summary>
            <remarks>
            <para>All multipart MIME entities will have a Content-Type with a media type of <c>"multipart"</c>.
            The most common multipart MIME entity used in email is the <c>"multipart/mixed"</c> entity.</para>
            <para>Four (4) initial subtypes were defined in the original MIME specifications: mixed, alternative,
            digest, and parallel.</para>
            <para>The "multipart/mixed" type is a sort of general-purpose container. When used in email, the
            first entity is typically the "body" of the message while additional entities are most often
            file attachments.</para>
            <para>Speaking of message "bodies", the "multipart/alternative" type is used to offer a list of
            alternative formats for the main body of the message (usually they will be "text/plain" and
            "text/html"). These alternatives are in order of increasing faithfulness to the original document
            (in other words, the last entity will be in a format that, when rendered, will most closely match
            what the sending client's WYSISYG editor produced).</para>
            <para>The "multipart/digest" type will typically contain a digest of MIME messages and is most
            commonly used by mailing-list software.</para>
            <para>The "multipart/parallel" type contains entities that are all meant to be shown (or heard)
            in parallel.</para>
            <para>Another commonly used type is the "multipart/related" type which contains, as one might expect,
            inter-related MIME parts which typically reference each other via URIs based on the Content-Id and/or
            Content-Location headers.</para>
            </remarks>
        </member>
        <member name="M:MimeKit.Multipart.#ctor(MimeKit.MimeEntityConstructorInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Multipart"/> class.
            </summary>
            <remarks>This constructor is used by <see cref="T:MimeKit.MimeParser"/>.</remarks>
            <param name="entity">Information used by the constructor.</param>
        </member>
        <member name="M:MimeKit.Multipart.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Multipart"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.Multipart"/> with the specified subtype.
            </remarks>
            <param name="subtype">The multipart media sub-type.</param>
            <param name="args">An array of initialization parameters: headers and MIME entities.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="subtype"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="args"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="args"/> contains one or more arguments of an unknown type.
            </exception>
        </member>
        <member name="M:MimeKit.Multipart.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Multipart"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.Multipart"/> with the specified subtype.
            </remarks>
            <param name="subtype">The multipart media sub-type.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="subtype"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.Multipart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Multipart"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.Multipart"/> with a ContentType of multipart/mixed.
            </remarks>
        </member>
        <member name="M:MimeKit.Multipart.WriteTo(MimeKit.FormatOptions,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Writes the <see cref="T:MimeKit.Multipart"/> to the specified output stream.
            </summary>
            <remarks>
            Writes the multipart MIME entity and its subparts to the output stream.
            </remarks>
            <param name="options">The formatting options.</param>
            <param name="stream">The output stream.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="stream"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MimeKit.Multipart.Add(MimeKit.MimeEntity)">
            <summary>
            Adds the specified part.
            </summary>
            <remarks>
            Adds the specified part to the multipart.
            </remarks>
            <param name="part">The part to add.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.Multipart.Clear">
            <summary>
            Clears the multipart.
            </summary>
            <remarks>
            Removes all of the parts within the multipart.
            </remarks>
        </member>
        <member name="M:MimeKit.Multipart.Contains(MimeKit.MimeEntity)">
            <summary>
            Checks if the <see cref="T:MimeKit.Multipart"/> contains the specified part.
            </summary>
            <remarks>
            Determines whether or not the multipart contains the specified part.
            </remarks>
            <returns><value>true</value> if the specified part exists;
            otherwise <value>false</value>.</returns>
            <param name="part">The part to check for.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.Multipart.CopyTo(MimeKit.MimeEntity[],System.Int32)">
            <summary>
            Copies all of the entities in the <see cref="T:MimeKit.Multipart"/> to the specified array.
            </summary>
            <remarks>
            Copies all of the entities within the <see cref="T:MimeKit.Multipart"/> into the array,
            starting at the specified array index.
            </remarks>
            <param name="array">The array to copy the headers to.</param>
            <param name="arrayIndex">The index into the array.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.Multipart.Remove(MimeKit.MimeEntity)">
            <summary>
            Removes the specified part.
            </summary>
            <remarks>
            Removes the specified part, if it exists within the multipart.
            </remarks>
            <returns><value>true</value> if the part was removed; otherwise <value>false</value>.</returns>
            <param name="part">The part to remove.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.Multipart.IndexOf(MimeKit.MimeEntity)">
            <summary>
            Gets the index of the specified part.
            </summary>
            <remarks>
            Finds the index of the specified address, if it exists.
            </remarks>
            <returns>The index of the specified part if found; otherwise <c>-1</c>.</returns>
            <param name="part">The part.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.Multipart.Insert(System.Int32,MimeKit.MimeEntity)">
            <summary>
            Inserts the part at the specified index.
            </summary>
            <remarks>
            Inserts the part into the multipart at the specified index.
            </remarks>
            <param name="index">The index.</param>
            <param name="part">The part.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.Multipart.RemoveAt(System.Int32)">
            <summary>
            Removes the part at the specified index.
            </summary>
            <remarks>
            Removes the part at the specified index.
            </remarks>
            <param name="index">The index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.Multipart.GetEnumerator">
            <summary>
            Gets the enumerator for the children of the <see cref="T:MimeKit.Multipart"/>.
            </summary>
            <remarks>
            Gets the enumerator for the children of the <see cref="T:MimeKit.Multipart"/>.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MimeKit.Multipart.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for the children of the <see cref="T:MimeKit.Multipart"/>.
            </summary>
            <remarks>
            Gets the enumerator for the children of the <see cref="T:MimeKit.Multipart"/>.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:MimeKit.Multipart.Boundary">
            <summary>
            Gets or sets the boundary.
            </summary>
            <remarks>
            Gets or sets the boundary parameter on the Content-Type header.
            </remarks>
            <value>The boundary.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:MimeKit.Multipart.Preamble">
            <summary>
            Gets or sets the preamble.
            </summary>
            <remarks>
            A multipart preamble appears before the first child entity of the
            multipart and is typically used only in the top-level multipart
            of the message to specify that the message is in MIME format and
            therefore requires a MIME compliant email application to render
            it correctly.
            </remarks>
            <value>The preamble.</value>
        </member>
        <member name="P:MimeKit.Multipart.Epilogue">
            <summary>
            Gets or sets the epilogue.
            </summary>
            <remarks>
            A multipart epiloque is the text that ppears after the last
            child of the multipart and is rarely ever used.
            </remarks>
            <value>The epilogue.</value>
        </member>
        <member name="P:MimeKit.Multipart.Count">
            <summary>
            Gets the number of parts in the multipart.
            </summary>
            <remarks>
            Indicates the number of parts in the multipart.
            </remarks>
            <value>The number of parts in the multipart.</value>
        </member>
        <member name="P:MimeKit.Multipart.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <remarks>
            A <see cref="T:MimeKit.Multipart"/> is never read-only.
            </remarks>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.Multipart.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:MimeKit.MimeEntity"/> at the specified index.
            </summary>
            <remarks>
            Gets or sets the <see cref="T:MimeKit.MimeEntity"/> at the specified index.
            </remarks>
            <value>The entity at the specified index.</value>
            <param name="index">The index.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="T:MimeKit.Parameter">
            <summary>
            A header parameter as found in the Content-Type and Content-Disposition headers.
            </summary>
            <remarks>
            Content-Type and Content-Disposition headers often have parameters that specify
            further information about how to interpret the content.
            </remarks>
        </member>
        <member name="M:MimeKit.Parameter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Parameter"/> class.
            </summary>
            <remarks>
            Creates a new parameter with the specified name and value.
            </remarks>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="name"/> contains illegal characters.
            </exception>
        </member>
        <member name="M:MimeKit.Parameter.ToString">
            <summary>
            Returns a string representation of the <see cref="T:MimeKit.Parameter"/>.
            </summary>
            <remarks>
            Formats the parameter name and value in the form <c>name="value"</c>.
            </remarks>
            <returns>A string representation of the <see cref="T:MimeKit.Parameter"/>.</returns>
        </member>
        <member name="P:MimeKit.Parameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
            <remarks>
            Gets the parameter name.
            </remarks>
            <value>The parameter name.</value>
        </member>
        <member name="P:MimeKit.Parameter.Value">
            <summary>
            Gets or sets the parameter value.
            </summary>
            <remarks>
            Gets or sets the parameter value.
            </remarks>
            <value>The parameter value.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:MimeKit.ParameterList">
            <summary>
            A list of parameters, as found in the Content-Type and Content-Disposition headers.
            </summary>
            <remarks>
            Parameters are used by both <see cref="T:MimeKit.ContentType"/> and <see cref="T:MimeKit.ContentDisposition"/>.
            </remarks>
        </member>
        <member name="M:MimeKit.ParameterList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.ParameterList"/> class.
            </summary>
            <remarks>
            Creates a new parameter list.
            </remarks>
        </member>
        <member name="M:MimeKit.ParameterList.Add(System.String,System.String)">
            <summary>
            Adds a parameter with the specified name and value.
            </summary>
            <remarks>
            Adds a new parameter to the list with the specified name and value.
            </remarks>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="name"/> contains illegal characters.
            </exception>
        </member>
        <member name="M:MimeKit.ParameterList.Contains(System.String)">
            <summary>
            Checks if the <see cref="T:MimeKit.ParameterList"/> contains a parameter with the specified name.
            </summary>
            <remarks>
            Determines whether or not the parameter list contains a parameter with the specified name.
            </remarks>
            <returns><value>true</value> if the requested parameter exists;
            otherwise <value>false</value>.</returns>
            <param name="name">The parameter name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.ParameterList.IndexOf(System.String)">
            <summary>
            Gets the index of the requested parameter, if it exists.
            </summary>
            <remarks>
            Finds the index of the parameter with the specified name, if it exists.
            </remarks>
            <returns>The index of the requested parameter; otherwise <value>-1</value>.</returns>
            <param name="name">The parameter name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.ParameterList.Insert(System.Int32,System.String,System.String)">
            <summary>
            Inserts a parameter with the specified name and value at the given index.
            </summary>
            <remarks>
            Inserts a new parameter with the given name and value at the specified index.
            </remarks>
            <param name="index">The index to insert the parameter.</param>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="name"/> contains illegal characters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.ParameterList.Remove(System.String)">
            <summary>
            Removes the specified parameter.
            </summary>
            <remarks>
            Removes the parameter with the specified name from the list, if it exists.
            </remarks>
            <returns><value>true</value> if the specified parameter was removed;
            otherwise <value>false</value>.</returns>
            <param name="name">The parameter name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.ParameterList.Add(MimeKit.Parameter)">
            <summary>
            Adds the specified parameter.
            </summary>
            <remarks>
            Adds the specified parameter to the end of the list.
            </remarks>
            <param name="param">The parameter to add.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="param"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            A parameter with the same name as <paramref name="param"/>
            already exists.
            </exception>
        </member>
        <member name="M:MimeKit.ParameterList.Clear">
            <summary>
            Clears the parameter list.
            </summary>
            <remarks>
            Removes all of the parameters from the list.
            </remarks>
        </member>
        <member name="M:MimeKit.ParameterList.Contains(MimeKit.Parameter)">
            <summary>
            Checks if the <see cref="T:MimeKit.ParameterList"/> contains the specified parameter.
            </summary>
            <remarks>
            Determines whether or not the parameter list contains the specified parameter.
            </remarks>
            <returns><value>true</value> if the specified parameter is contained;
            otherwise <value>false</value>.</returns>
            <param name="param">The parameter.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="param"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.ParameterList.CopyTo(MimeKit.Parameter[],System.Int32)">
            <summary>
            Copies all of the contained parameters to the specified array.
            </summary>
            <remarks>
            Copies all of the parameters within the <see cref="T:MimeKit.ParameterList"/> into the array,
            starting at the specified array index.
            </remarks>
            <param name="array">The array to copy the parameters to.</param>
            <param name="arrayIndex">The index into the array.</param>
        </member>
        <member name="M:MimeKit.ParameterList.Remove(MimeKit.Parameter)">
            <summary>
            Removes the specified parameter.
            </summary>
            <remarks>
            Removes the specified parameter from the list.
            </remarks>
            <returns><value>true</value> if the specified parameter was removed;
            otherwise <value>false</value>.</returns>
            <param name="param">The parameter.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="param"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.ParameterList.IndexOf(MimeKit.Parameter)">
            <summary>
            Gets the index of the requested parameter, if it exists.
            </summary>
            <remarks>
            Finds the index of the specified parameter, if it exists.
            </remarks>
            <returns>The index of the requested parameter; otherwise <value>-1</value>.</returns>
            <param name="param">The parameter.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="param"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.ParameterList.Insert(System.Int32,MimeKit.Parameter)">
            <summary>
            Inserts the specified parameter at the given index.
            </summary>
            <remarks>
            Inserts the parameter at the specified index in the list.
            </remarks>
            <param name="index">The index to insert the parameter.</param>
            <param name="param">The parameter.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="param"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
            <exception cref="T:System.ArgumentException">
            A parameter with the same name as <paramref name="param"/>
            already exists.
            </exception>
        </member>
        <member name="M:MimeKit.ParameterList.RemoveAt(System.Int32)">
            <summary>
            Removes the parameter at the specified index.
            </summary>
            <remarks>
            Removes the parameter at the specified index.
            </remarks>
            <param name="index">The index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:MimeKit.ParameterList.GetEnumerator">
            <summary>
            Gets an enumerator for the list of parameters.
            </summary>
            <remarks>
            Gets an enumerator for the list of parameters.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MimeKit.ParameterList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the list of parameters.
            </summary>
            <remarks>
            Gets an enumerator for the list of parameters.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MimeKit.ParameterList.ToString">
            <summary>
            Returns a string representation of the parameters in the <see cref="T:MimeKit.ParameterList"/>.
            </summary>
            <remarks>
            If there are multiple parameters in the list, they will be separated by a semicolon.
            </remarks>
            <returns>A string representing the <see cref="T:MimeKit.ParameterList"/>.</returns>
        </member>
        <member name="P:MimeKit.ParameterList.Item(System.String)">
            <summary>
            Gets or sets the value of a parameter with the specified name.
            </summary>
            <remarks>
            Gets or sets the value of a parameter with the specified name.
            </remarks>
            <value>The value of the specified parameter if it exists; otherwise <c>null</c>.</value>
            <param name="name">The parameter name.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="name"/> contains illegal characters.
            </exception>
        </member>
        <member name="P:MimeKit.ParameterList.Count">
            <summary>
            Gets the number of parameters in the <see cref="T:MimeKit.ParameterList"/>.
            </summary>
            <remarks>
            Indicates the number of parameters in the list.
            </remarks>
            <value>The number of parameters.</value>
        </member>
        <member name="P:MimeKit.ParameterList.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <remarks>
            A <see cref="T:MimeKit.ParameterList"/> is never read-only.
            </remarks>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.ParameterList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:MimeKit.Parameter"/> at the specified index.
            </summary>
            <remarks>
            Gets or sets the <see cref="T:MimeKit.Parameter"/> at the specified index.
            </remarks>
            <value>The parameter at the specified index.</value>
            <param name="index">The index.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
            <exception cref="T:System.ArgumentException">
            A parameter with the same name as <paramref name="value"/>
            already exists.
            </exception>
        </member>
        <member name="T:MimeKit.ParseException">
            <summary>
            A Parse exception as thrown by the various Parse methods in MimeKit.
            </summary>
            <remarks>
            A <see cref="T:MimeKit.ParseException"/> can be thrown by any of the Parse() methods
            in MimeKit. Each exception instance will have a <see cref="P:MimeKit.ParseException.TokenIndex"/>
            which marks the byte offset of the token that failed to parse as well
            as a <see cref="P:MimeKit.ParseException.ErrorIndex"/> which marks the byte offset where the error
            occurred.
            </remarks>
        </member>
        <member name="M:MimeKit.ParseException.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.ParseException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.ParseException"/>.
            </remarks>
            <param name="message">The error message.</param>
            <param name="tokenIndex">The byte offset of the token.</param>
            <param name="errorIndex">The byte offset of the error.</param>
        </member>
        <member name="P:MimeKit.ParseException.TokenIndex">
            <summary>
            Gets the byte index of the token that was malformed.
            </summary>
            <remarks>
            The token index is the byte offset at which the token started.
            </remarks>
            <value>The byte index of the token.</value>
        </member>
        <member name="P:MimeKit.ParseException.ErrorIndex">
            <summary>
            Gets the index of the byte that caused the error.
            </summary>
            <remarks>
            The error index is the byte offset at which the parser encountered an error.
            </remarks>
            <value>The index of the byte that caused error.</value>
        </member>
        <member name="T:MimeKit.ParserOptions">
            <summary>
            Parser options as used by <see cref="T:MimeKit.MimeParser"/> as well as various Parse and TryParse methods in MimeKit.
            </summary>
            <remarks>
            <see cref="T:MimeKit.ParserOptions"/> allows you to change and/or override default parsing options
            used by methods such as <see cref="M:MimeKit.MimeMessage.Load(MimeKit.ParserOptions,System.IO.Stream)"/> and others.
            </remarks>
        </member>
        <member name="F:MimeKit.ParserOptions.Default">
            <summary>
            The default parser options.
            </summary>
            <remarks>
            If a <see cref="T:MimeKit.ParserOptions"/> is not supplied to <see cref="T:MimeKit.MimeParser"/> or other Parse and TryParse
            methods throughout MimeKit, <see cref="F:MimeKit.ParserOptions.Default"/> will be used.
            </remarks>
        </member>
        <member name="M:MimeKit.ParserOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.ParserOptions"/> class.
            </summary>
            <remarks>
            By default, new instances of <see cref="T:MimeKit.ParserOptions"/> enable rfc2047 work-arounds
            (which are needed for maximum interoperability with mail software used in the wild)
            and do not respect the Content-Length header value.
            </remarks>
        </member>
        <member name="M:MimeKit.ParserOptions.Clone">
            <summary>
            Clones an instance of <see cref="T:MimeKit.ParserOptions"/>.
            </summary>
            <remarks>
            Clones a set of options, allowing you to change a specific option
            without requiring you to change the original.
            </remarks>
            <returns>An identical copy of the current instance.</returns>
        </member>
        <member name="M:MimeKit.ParserOptions.RegisterMimeType(System.String,System.Type)">
            <summary>
            Registers the <see cref="T:MimeKit.MimeEntity"/> subclass for the specified mime-type.
            </summary>
            <param name="mimeType">The MIME type.</param>
            <param name="type">A custom subclass of <see cref="T:MimeKit.MimeEntity"/>.</param>
            <remarks>
            Your custom <see cref="T:MimeKit.MimeEntity"/> class should not subclass
            <see cref="T:MimeKit.MimeEntity"/> directly, but rather it should subclass
            <see cref="T:MimeKit.Multipart"/>, <see cref="T:MimeKit.MimePart"/>,
            <see cref="T:MimeKit.MessagePart"/>, or one of their derivatives.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="mimeType"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="type"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="type"/> is not a subclass of <see cref="T:MimeKit.Multipart"/>,
            <see cref="T:MimeKit.MimePart"/>, or <see cref="T:MimeKit.MessagePart"/>.</para>
            <para>-or-</para>
            <para><paramref name="type"/> does not have a constructor that takes
            only a <see cref="T:MimeKit.MimeEntityConstructorInfo"/> argument.</para>
            </exception>
        </member>
        <member name="P:MimeKit.ParserOptions.EnableRfc2047Workarounds">
            <summary>
            Gets or sets a value indicating whether rfc2047 workarounds should be used.
            </summary>
            <remarks>
            In general, you'll probably want this value to be <c>true</c> (the default) as it
            allows maximum interoperability with existing (broken) mail clients and other mail
            software such as sloppily written perl scripts (aka spambots).
            </remarks>
            <value><c>true</c> if rfc2047 workarounds are enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.ParserOptions.RespectContentLength">
            <summary>
            Gets or sets a value indicating whether the Content-Length value should be
            respected when parsing mbox streams.
            </summary>
            <remarks>
            For more details about why this may be useful, you can find more information
            at http://www.jwz.org/doc/content-length.html
            </remarks>
            <value><c>true</c> if the Content-Length value should be respected;
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MimeKit.ParserOptions.CharsetEncoding">
            <summary>
            Gets or sets the charset encoding to use as a fallback for 8bit headers.
            </summary>
            <remarks>
            <see cref="M:MimeKit.Utils.Rfc2047.DecodeText(MimeKit.ParserOptions,System.Byte[])"/> and
            <see cref="M:MimeKit.Utils.Rfc2047.DecodePhrase(MimeKit.ParserOptions,System.Byte[])"/>
            use this charset encoding as a fallback when decoding 8bit text into unicode. The first
            charset encoding attempted is UTF-8, followed by this charset encoding, before finally
            falling back to iso-8859-1.
            </remarks>
            <value>The charset encoding.</value>
        </member>
        <member name="T:MimeKit.TextPart">
            <summary>
            A Textual MIME part.
            </summary>
            <remarks>
            <para>Unless overridden, all textual parts parsed by the <see cref="T:MimeKit.MimeParser"/>,
            such as text/plain or text/html, will be represented by a <see cref="T:MimeKit.TextPart"/>.</para>
            <para>For more information about text media types, see section 4.1 of
            http://www.ietf.org/rfc/rfc2046.txt</para>
            </remarks>
        </member>
        <member name="M:MimeKit.TextPart.#ctor(MimeKit.MimeEntityConstructorInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.TextPart"/> class.
            </summary>
            <remarks>This constructor is used by <see cref="T:MimeKit.MimeParser"/>.</remarks>
            <param name="entity">Information used by the constructor.</param>
        </member>
        <member name="M:MimeKit.TextPart.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.TextPart"/>
            class with the specified text subtype.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.TextPart"/> with the specified subtype.
            </remarks>
            <param name="subtype">The media subtype.</param>
            <param name="args">An array of initialization parameters: headers, charset encoding and text.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="subtype"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="args"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="args"/> contains more than one <see cref="T:System.Text.Encoding"/>.</para>
            <para>-or-</para>
            <para><paramref name="args"/> contains more than one <see cref="T:System.String"/>.</para>
            <para>-or-</para>
            <para><paramref name="args"/> contains one or more arguments of an unknown type.</para>
            </exception>
        </member>
        <member name="M:MimeKit.TextPart.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.TextPart"/>
            class with the specified text subtype.
            </summary>
            <remarks>
            Creates a new <see cref="T:MimeKit.TextPart"/> with the specified subtype.
            </remarks>
            <param name="subtype">The media subtype.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="subtype"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.TextPart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MimeKit.TextPart"/>
            class with a Content-Type of text/plain.
            </summary>
            <remarks>
            Creates a default <see cref="T:MimeKit.TextPart"/> with a mime-type of text/plain.
            </remarks>
        </member>
        <member name="M:MimeKit.TextPart.GetText(Portable.Text.Encoding)">
            <summary>
            Gets the decoded text content using the provided charset to override
            the charset specified in the Content-Type parameters.
            </summary>
            <remarks>
            Uses the provided charset encoding to convert the raw text content
            into a unicode string, overriding any charset specified in the
            Content-Type header.
            </remarks>
            <returns>The decoded text.</returns>
            <param name="charset">The charset encoding to use.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="charset"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MimeKit.TextPart.SetText(Portable.Text.Encoding,System.String)">
            <summary>
            Sets the text content and the charset parameter in the Content-Type header.
            </summary>
            <remarks>
            This method is similar to setting the <see cref="P:MimeKit.TextPart.Text"/> property, but allows
            specifying a charset encoding to use. Also updates the
            <see cref="P:MimeKit.ContentType.Charset"/> property.
            </remarks>
            <param name="charset">The charset encoding.</param>
            <param name="text">The text content.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="charset"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="text"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="P:MimeKit.TextPart.Text">
            <summary>
            Gets the decoded text content.
            </summary>
            <remarks>
            <para>If the charset parameter on the <see cref="P:MimeKit.MimeEntity.ContentType"/>
            is set, it will be used in order to convert the raw content into unicode.
            If that fails or if the charset parameter is not set, iso-8859-1 will be
            used instead.</para>
            <para>For more control, use the <see cref="M:MimeKit.TextPart.GetText(Portable.Text.Encoding)"/> method.</para>
            </remarks>
            <value>The text.</value>
        </member>
    </members>
</doc>
